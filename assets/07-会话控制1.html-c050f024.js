import{_ as n}from"./img005-b5a67712.js";import{_ as s,o as a,c as e,e as t}from"./app-8007fa1b.js";const i="/assets/img001-92c5076e.png",o="/assets/img002-d9739d10.png",p="/assets/img003-4ad8ad4a.png",l="/assets/img004-a762dda3.png",c={},u=t(`<h1 id="今日目标" tabindex="-1"><a class="header-anchor" href="#今日目标" aria-hidden="true">#</a> 今日目标</h1><ul><li>会话控制</li><li>过滤器</li><li>监听器</li></ul><h1 id="一、会话控制" tabindex="-1"><a class="header-anchor" href="#一、会话控制" aria-hidden="true">#</a> 一、会话控制</h1><h2 id="_1、提出需求" tabindex="-1"><a class="header-anchor" href="#_1、提出需求" aria-hidden="true">#</a> 1、提出需求</h2><p>用户登录，假设正确的用户名、密码分别是：</p><ul><li>账号：peter</li><li>密码：123456 用户通过表单填写账号、密码并提交给UserServlet。<br> UserServlet中检查用户名、密码是否正确。<br></li><li>登录成功：跳转到ListServlet查看数据列表，此时要求<strong>保持用户的登录状态</strong></li><li>登录失败：回到登录表单页面</li></ul><h2 id="_2、基础操作" tabindex="-1"><a class="header-anchor" href="#_2、基础操作" aria-hidden="true">#</a> 2、基础操作</h2><p>略<br></p><h2 id="_3、会话控制核心操作-重中之重" tabindex="-1"><a class="header-anchor" href="#_3、会话控制核心操作-重中之重" aria-hidden="true">#</a> 3、会话控制核心操作（重中之重）</h2><ul><li>数据存入会话域：session.setAttribute(&quot;loginInfo&quot;, userName + &quot;&amp;&quot; + userPwd);</li><li>从会话域读取数据：String loginInfo = (String) session.getAttribute(&quot;loginInfo&quot;);</li></ul><br><h2 id="_4、cookie的工作机制" tabindex="-1"><a class="header-anchor" href="#_4、cookie的工作机制" aria-hidden="true">#</a> 4、Cookie的工作机制</h2><h3 id="_1设定场景" tabindex="-1"><a class="header-anchor" href="#_1设定场景" aria-hidden="true">#</a> ①设定场景</h3><p>咖啡店发布了一个促销活动：消费五杯咖啡，赠送一杯。<br> 又不能要求用户一次性消费完这五杯，用户肯定是不同的日期来店里消费，累积够五杯之后，再赠送。<br> 可是店员不认识顾客，不能单凭顾客的一面之词就相信他消费了五杯。<br> 所以咖啡店设计了一个卡片，顾客每消费一杯，就在卡片上盖一个印章。<br> 集齐五个印章，赠送一杯。<br> 本质上这里解决的是识别用户身份的问题。<br> 对于我们服务器端程序，也有相同的问题：如何识别上一个、下一个请求是来自同一个浏览器。<br></p><h3 id="_2cookie工作机制要点" tabindex="-1"><a class="header-anchor" href="#_2cookie工作机制要点" aria-hidden="true">#</a> ②Cookie工作机制要点</h3><ul><li>Cookie数据是在服务器端生成的</li><li>服务器端生成Cookie之后通过响应消息头返回给浏览器</li><li>浏览器保存Cookie信息</li><li>浏览器以后访问服务器都会自动携带Cookie</li><li>服务器端可以从请求对象中读取Cookie信息</li></ul><br><h3 id="_3操作-服务器创建并返回cookie" tabindex="-1"><a class="header-anchor" href="#_3操作-服务器创建并返回cookie" aria-hidden="true">#</a> ③操作：服务器创建并返回Cookie</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1、创建 Cookie 对象  </span>
<span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;atguiguCookieName01&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;atguiguCookieValue01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token comment">// 2、把 Cookie 对象添加到响应中  </span>
<span class="token comment">// 底层会在响应消息头中附加下面内容：  </span>
<span class="token comment">// Set-Cookie: atguiguCookieName01=atguiguCookieValue01  </span>
response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token comment">// 3、返回响应  </span>
response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html;charset=UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p>响应消息头截图：<br></p><p><img src="`+i+'" alt="images"></p><br><p><img src="'+o+'" alt="images"></p><br><h3 id="_4观察-浏览器再次访问服务器自动携带cookie" tabindex="-1"><a class="header-anchor" href="#_4观察-浏览器再次访问服务器自动携带cookie" aria-hidden="true">#</a> ④观察：浏览器再次访问服务器自动携带Cookie</h3><p><img src="'+p+`" alt="images"></p><br><h3 id="_5操作-服务器端读取cookie信息" tabindex="-1"><a class="header-anchor" href="#_5操作-服务器端读取cookie信息" aria-hidden="true">#</a> ⑤操作：服务器端读取Cookie信息</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html;charset=UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token comment">// 1、通过 request 对象获取 Cookie 数组  </span>
<span class="token comment">// ※注意：这个 Cookie 数组不一定有值，只有浏览器发送请求时携带的 Cookie 才有  </span>
<span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token comment">// 2、对 Cookie 数组做一个判空保护  </span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>cookies <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> cookies<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
  
    <span class="token comment">// 3、遍历 Cookie 数组  </span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cookies<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> cookies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Cookie Name:&quot;</span> <span class="token operator">+</span> cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;br/&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Cookie Value:&quot;</span> <span class="token operator">+</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  
    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;没有获取到任何Cookie信息。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_6理论-cookie时效性" tabindex="-1"><a class="header-anchor" href="#_6理论-cookie时效性" aria-hidden="true">#</a> ⑥理论：Cookie时效性</h3><h4 id="_1-从时效性角度cookie分成两种" tabindex="-1"><a class="header-anchor" href="#_1-从时效性角度cookie分成两种" aria-hidden="true">#</a> [1]从时效性角度Cookie分成两种</h4><ul><li>会话级：保存在浏览器的内存中，只要浏览器开着就一直在。浏览器关闭的时候释放。这是默认情况。</li><li>持久化：保存在浏览器的硬盘中，此时必然是服务器端设定的过期时间。到过期时间时被释放。</li></ul><br><h4 id="_2-setmaxage-方法" tabindex="-1"><a class="header-anchor" href="#_2-setmaxage-方法" aria-hidden="true">#</a> [2]setMaxAge()方法</h4><ul><li>expire参数是正数情况：设置 Cookie 以秒为单位作为过期时间</li><li>expire参数是0情况：告诉浏览器删除这个 Cookie</li><li>expire参数是负数情况：把 Cookie 设置为会话级</li></ul><br><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1、创建 Cookie 对象  </span>
<span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;timedCookieName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;timedCookieValue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token comment">// 2、给 Cookie 设置过期时间  </span>
<span class="token comment">// expire参数是正数情况：设置 Cookie 以秒为单位作为过期时间  </span>
<span class="token comment">// expire参数是0情况：告诉浏览器删除这个 Cookie</span>
<span class="token comment">// expire参数是负数情况：把 Cookie 设置为会话级  </span>
cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token comment">// 3、在响应中添加 Cookieresponse.addCookie(cookie);  </span>
  
<span class="token comment">// 4、返回响应  </span>
response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html;charset=UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_7理论-cookie的domain和path" tabindex="-1"><a class="header-anchor" href="#_7理论-cookie的domain和path" aria-hidden="true">#</a> ⑦理论：Cookie的domain和path</h3><ul><li>Cookie的domain属性：设置Cookie所属的域名。发送请求时，域名不一致，不会携带这个Cookie。</li><li>Cookie的path属性：设置Cookie在某个网站下，属于哪个具体资源。发送请求时，具体资源的路径不同，不会携带这个Cookie。</li></ul><br><p>domain举例说明：</p><ul><li>www.baidu.com 网站给浏览器返回了Cookie，那么这些Cookie只有访问百度这个网站时才会带。</li><li>www.sina.com 网站给浏览器返回了Cookie，那么这些Cookie只有访问新浪这个网站时才会带。</li><li>……</li></ul><br><p>path举例说明：</p><ul><li>通过path属性设定Cookie属于/aaa/bbb/ccc资源，那么访问/xxx/yyy/zzz资源就不携带这个Cookie</li></ul><br><p>如果强行把Cookie的domain设置为其它网站域名，那么浏览器会不接受：<br></p><p><img src="`+l+`" alt="images"></p><h3 id="_8、cookie的使用建议" tabindex="-1"><a class="header-anchor" href="#_8、cookie的使用建议" aria-hidden="true">#</a> ⑧、Cookie的使用建议</h3><ul><li>Cookie有如下限制： <ul><li>单个Cookie能够保存的数据非常有限</li><li>浏览器保存Cookie时，不同网站的数量也是有限的</li><li>来自于同一个网站的Cookie也只能保存有限的个数（约20个）</li><li>用户随时可能删除浏览器端的所有Cookie</li></ul></li><li>Cookie的开发建议 <ul><li>不要在Cookie中保存太多数据</li><li>同一个域名下，Cookie保存的数量不要太多</li><li>不要过于依赖Cookie作为数据保存的手段</li></ul></li></ul><br><h2 id="_5、session的工作机制" tabindex="-1"><a class="header-anchor" href="#_5、session的工作机制" aria-hidden="true">#</a> 5、Session的工作机制</h2><h3 id="_1咖啡买五送一" tabindex="-1"><a class="header-anchor" href="#_1咖啡买五送一" aria-hidden="true">#</a> ①咖啡买五送一</h3><p>参见PPT<br></p><h3 id="_2代码演示session工作机制" tabindex="-1"><a class="header-anchor" href="#_2代码演示session工作机制" aria-hidden="true">#</a> ②代码演示Session工作机制</h3><p>调用 request.getSession(); 方法获取 HttpSession 对象时：</p><ul><li>当前请求中没有携带 JSESSIONID 的 Cookie <ul><li>服务器端创建新的 HttpSession 对象</li><li>每一个 HttpSession 对象都有一个唯一标识：JSESSIONID</li><li>基于 JSESSIONID 创建 Cookie</li><li>Cookie的名字是 &quot;JSESSIONID&quot;这个字符串，值就是 JESSIONID 对应的唯一值</li><li>然后这个名叫 JSESSIONID 的 Cookie 会随着响应返回给浏览器</li></ul></li><li>当前请求中携带了 JSESSIONID 的 Cookie <ul><li>根据 JSESSIONID 在服务器端查找对应的 HttpSession 对象 <ul><li>能找到：把找到的 HttpSession 对象作为 getSession() 方法的返回值</li><li>找不到：服务器端创建新的 HttpSession 对象……</li></ul></li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html;charset=UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token comment">// 1、尝试获取 HttpSession 对象  </span>
<span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token comment">// 2、调用 HttpSession 对象的 isNew() 方法查看这个 HttpSession 对象是否为新创建的  </span>
<span class="token keyword">boolean</span> isNew <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">isNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>isNew<span class="token operator">?</span><span class="token string">&quot;当前HttpSession对象是新创建的&quot;</span><span class="token operator">:</span><span class="token string">&quot;当前HttpSession对象是旧的，以前创建的&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;br/&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token comment">// 3、获取当前 HttpSession 对象的 id 值  </span>
<span class="token class-name">String</span> id <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;当前HttpSession对象的id=&quot;</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3时效性" tabindex="-1"><a class="header-anchor" href="#_3时效性" aria-hidden="true">#</a> ③时效性</h3><h4 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍" aria-hidden="true">#</a> [1]介绍</h4><ul><li>服务器端做 HttpSession 对象的管理有个目标：不能无限创建 HttpSession 对象。</li><li>一旦浏览器端 JSESSIONID 的 Cookie 丢失，留在服务器端的 HttpSession 对象就再也用不上了。</li><li>用不上的 HttpSession 对象留在服务器端就只是白白占用内存空间，时间长了会把内存耗尽。</li><li>所以我们不允许 HttpSession 对象永远保存在服务器。</li><li>具体做法是：一旦 HttpSession 对象空闲达到指定的时间，就会强行把它释放。</li><li>在Tomcat的conf/web.xml中可以看到默认设置：</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>  <span class="token comment">&lt;!-- ==================== Default Session Configuration ================= --&gt;</span>
  <span class="token comment">&lt;!-- You can set the default session timeout (in minutes) for all newly   --&gt;</span>
  <span class="token comment">&lt;!-- created sessions by modifying the value below.                       --&gt;</span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-config</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-timeout</span><span class="token punctuation">&gt;</span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-timeout</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-config</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="_2-测试代码" tabindex="-1"><a class="header-anchor" href="#_2-测试代码" aria-hidden="true">#</a> [2]测试代码</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1、获取 HttpSession 对象  </span>
<span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token comment">// 2、修改最大空闲时间  </span>
<span class="token comment">// Inactive：不活跃的  </span>
<span class="token comment">// Interval：时间间隔  </span>
session<span class="token punctuation">.</span><span class="token function">setMaxInactiveInterval</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="_3-让session立即失效" tabindex="-1"><a class="header-anchor" href="#_3-让session立即失效" aria-hidden="true">#</a> [3]让Session立即失效</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>session<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><p>使用场景举例：用户退出登录时，把HttpSession对象彻底干掉，整个会话域全部释放。<br> 所以要结合业务需求考虑清楚，是“一锅端”还是“定点清除”。</p><ul><li>一锅端：session.invalidate();</li><li>定点清除：session.removeAttribute(&quot;属性名&quot;);</li></ul><br><h1 id="二、过滤器" tabindex="-1"><a class="header-anchor" href="#二、过滤器" aria-hidden="true">#</a> 二、过滤器</h1><h2 id="_1、提出问题" tabindex="-1"><a class="header-anchor" href="#_1、提出问题" aria-hidden="true">#</a> 1、提出问题</h2><p><img src="`+n+`" alt="images"></p><br><h2 id="_2、三要素" tabindex="-1"><a class="header-anchor" href="#_2、三要素" aria-hidden="true">#</a> 2、三要素</h2><h3 id="_1拦截" tabindex="-1"><a class="header-anchor" href="#_1拦截" aria-hidden="true">#</a> ①拦截</h3><p>作为过滤器这样的组件，首先需要能够把请求拦截住，然后才能做后续的相关操作。</p><br><h3 id="_2过滤" tabindex="-1"><a class="header-anchor" href="#_2过滤" aria-hidden="true">#</a> ②过滤</h3><p>通常是基于业务功能的需要，在拦截到请求之后编写特定的代码，对请求进行相关的处理或检查。<br></p><p>最典型的就是登录检查：检查当前请求是否已经登录。</p><br><h3 id="_3放行" tabindex="-1"><a class="header-anchor" href="#_3放行" aria-hidden="true">#</a> ③放行</h3><p>如果当前请求满足过滤条件，那么就应该放行：让请求继续去找它原本要访问的资源。</p><br><h2 id="_3、helloworld" tabindex="-1"><a class="header-anchor" href="#_3、helloworld" aria-hidden="true">#</a> 3、HelloWorld</h2><h3 id="_1创建filter类" tabindex="-1"><a class="header-anchor" href="#_1创建filter类" aria-hidden="true">#</a> ①创建Filter类</h3><p>要求实现接口：jakarta.servlet.Filter。更简洁的做法是继承jakarta.servlet.http.HttpFilter类。</p><br><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**  
 * 假设请求中携带一个特定的请求参数表示用户已经登录，可以访问私密资源。  
 * 特定请求参数名称：message，特定的值：monster  
 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Filter01HelloWorld</span> <span class="token keyword">extends</span> <span class="token class-name">HttpFilter</span> <span class="token punctuation">{</span>  
  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>  
  
        <span class="token comment">// 1、获取请求参数  </span>
        <span class="token class-name">String</span> message <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
        <span class="token comment">// 2、检查请求参数是否满足预设的要求  </span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;monster&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token comment">// 3、满足条件的请求放行  </span>
            chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  
            <span class="token comment">// 4、不满足预设条件就把请求转发到拒绝页面  </span>
            request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;/WEB-INF/pages/forbidden.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2注册" tabindex="-1"><a class="header-anchor" href="#_2注册" aria-hidden="true">#</a> ②注册</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 注册 Filter --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>  
    <span class="token comment">&lt;!-- Filter 友好名称 --&gt;</span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>Filter01HelloWorld<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>  
  
    <span class="token comment">&lt;!-- Filter 全类名 --&gt;</span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>com.atguigu.filter.filter.Filter01HelloWorld<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>  
    <span class="token comment">&lt;!-- 引用 Filter 友好名称 --&gt;</span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>Filter01HelloWorld<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>  
  
    <span class="token comment">&lt;!-- 当前 Filter 要拦截的请求的 URL 地址的匹配模式 --&gt;</span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/private/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h1 id="三、总结" tabindex="-1"><a class="header-anchor" href="#三、总结" aria-hidden="true">#</a> 三、总结</h1><h2 id="_1、操作" tabindex="-1"><a class="header-anchor" href="#_1、操作" aria-hidden="true">#</a> 1、操作</h2><ul><li>会话控制： <ul><li>把数据存入会话域</li><li>从会话域读取数据</li></ul></li><li>Filter：完成HelloWorld <ul><li>Filter类：继承HttpFilter，重写doFilter()方法</li><li>Filter类：放行操作，调用chain.doFilter(request, response);</li><li>web.xml注册</li></ul></li></ul><br><h2 id="_2、理论" tabindex="-1"><a class="header-anchor" href="#_2、理论" aria-hidden="true">#</a> 2、理论</h2><ul><li>会话控制： <ul><li>Cookie工作机制</li><li>Cookie时效性管理</li><li>HttpSession工作机制</li><li>HttpSession时效性管理</li></ul></li><li>Filter： <ul><li>应用场景</li><li>过滤器的三要素</li></ul></li></ul>`,104),r=[u];function d(k,m){return a(),e("div",null,r)}const b=s(c,[["render",d],["__file","07-会话控制1.html.vue"]]);export{b as default};
