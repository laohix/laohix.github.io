import{_ as i,o as l,c as e,e as a}from"./app-8007fa1b.js";const r={},h=a('<h1 id="一、不适合创建索引的情况" tabindex="-1"><a class="header-anchor" href="#一、不适合创建索引的情况" aria-hidden="true">#</a> 一、不适合创建索引的情况</h1><ul><li>频繁修改的表或字段（因为创建索引后，增删改操作的开销会增大）</li><li>SQL性能正常，能够满足需求</li><li>创建之后没有对应的应用场景，用不上</li></ul><br><h1 id="二、适合创建索引的情况" tabindex="-1"><a class="header-anchor" href="#二、适合创建索引的情况" aria-hidden="true">#</a> 二、适合创建索引的情况</h1><ul><li>针对频繁出现的查询操作，有针对性的创建对应的索引，让索引在查询中确实能够起到应有的作用 <ul><li>场景 A：查询用到T、W、V三个字段，那么就针对这三个字段创建索引</li><li>场景 B：查询用到M、N两个字段，那么就针对这两个字段创建索引</li><li>一条SQL语句实际执行的时候，再怎么优化，实际用到的索引顶多就一个</li></ul></li><li>某个特定场景的查询操作(select子句)涉及多个字段，那么尽可能做到覆盖索引，避免回表操作</li><li>分组、排序操作都在过滤之后，所以要尽可能对过滤操作创建索引优化（过滤操作主要就是指where子句中的查询条件）</li></ul><br><h1 id="三、下列情况创建索引效果更好" tabindex="-1"><a class="header-anchor" href="#三、下列情况创建索引效果更好" aria-hidden="true">#</a> 三、下列情况创建索引效果更好</h1><ul><li>字段的数值有唯一性限制 <ul><li>身份证号</li><li>手机号</li><li>银行卡号</li><li>……</li></ul></li><li>类型小（字节宽度小）的字段</li></ul><h1 id="四、总结" tabindex="-1"><a class="header-anchor" href="#四、总结" aria-hidden="true">#</a> 四、总结</h1><p>索引不是在开发中，无度、随意的创建，而是要紧密联系实际业务场景，有针对性的去创建</p>',10),t=[h];function d(c,n){return l(),e("div",null,t)}const s=i(r,[["render",d],["__file","MySQL08-优化-索引总结.html.vue"]]);export{s as default};
