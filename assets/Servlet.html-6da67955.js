import{_ as n,o as a,c as s,e as t}from"./app-8007fa1b.js";const e="/assets/img001-fdea7b75.png",l="/assets/img002-0fc96025.png",p="/assets/img003-e2f5f42c.png",i={},o=t(`<h1 id="一、学习目标" tabindex="-1"><a class="header-anchor" href="#一、学习目标" aria-hidden="true">#</a> 一、学习目标</h1><h2 id="_1、总目标" tabindex="-1"><a class="header-anchor" href="#_1、总目标" aria-hidden="true">#</a> 1、总目标</h2><ul><li>使用Servlet处理请求</li><li>使用Servlet返回响应</li></ul><br><h2 id="_2、拆解目标" tabindex="-1"><a class="header-anchor" href="#_2、拆解目标" aria-hidden="true">#</a> 2、拆解目标</h2><h3 id="_1操作-重要" tabindex="-1"><a class="header-anchor" href="#_1操作-重要" aria-hidden="true">#</a> ①操作（重要）</h3><ul><li>给Web module添加Servlet开发所需依赖</li><li>基于IDEA创建Servlet</li><li>在web.xml中完成对Servlet的配置</li><li>点击超链接以GET请求方式发送请求访问Servlet的doGet()方法</li><li>提交表单以POST请求方式发送请求访问Servlet的doPost()方法</li><li>通过response对象返回响应数据</li></ul><br><h3 id="_2理论" tabindex="-1"><a class="header-anchor" href="#_2理论" aria-hidden="true">#</a> ②理论</h3><ul><li>Servlet概念</li><li>Servlet API体系</li><li>Servlet生命周期与Servlet容器（重要）</li><li>Servlet方法调用过程</li><li>ServletConfig对象（了解）</li><li>ServletContext对象（重要）</li></ul><br><h3 id="_3了解" tabindex="-1"><a class="header-anchor" href="#_3了解" aria-hidden="true">#</a> ③了解</h3><ul><li>Servlet通过注解映射路径</li><li>Servlet路径映射的其它方式 <ul><li>精确匹配</li><li>目录匹配</li><li>扩展名匹配</li></ul></li></ul><br><h1 id="二、学习内容-操作部分" tabindex="-1"><a class="header-anchor" href="#二、学习内容-操作部分" aria-hidden="true">#</a> 二、学习内容：操作部分</h1><h2 id="_1、servlet概念" tabindex="-1"><a class="header-anchor" href="#_1、servlet概念" aria-hidden="true">#</a> 1、Servlet概念</h2><ul><li>Server+applet=Servlet 连起来就是服务器端的小程序</li><li>Server：服务器</li><li>applet：小程序</li></ul><h2 id="_2、servlet功能" tabindex="-1"><a class="header-anchor" href="#_2、servlet功能" aria-hidden="true">#</a> 2、Servlet功能</h2><ul><li>接收并处理前端发来的请求</li><li>给前端返回响应结果</li><li>控制页面跳转（转发、重定向）</li></ul><h2 id="_3、创建web-module" tabindex="-1"><a class="header-anchor" href="#_3、创建web-module" aria-hidden="true">#</a> 3、创建Web module</h2><ul><li>创建普通module</li><li>在新建的module上点右键，点Add Frameworks Support</li><li>勾选Web Application</li><li>点OK</li><li>删除index.jsp</li></ul><h2 id="_4、给web-module添加servlet所需依赖" tabindex="-1"><a class="header-anchor" href="#_4、给web-module添加servlet所需依赖" aria-hidden="true">#</a> 4、给Web module添加Servlet所需依赖</h2><ul><li>File菜单下找到Project Structure</li><li>在Project Structure界面中找到modules</li><li>在modules中找到新建的module</li><li>切换到Dependencies选项卡</li><li>在Dependencies选项卡这里点加号</li><li>在弹出的菜单中选择Library...</li><li>选中Tomcat这一项</li><li>Add Selected</li><li>Apply然后OK</li></ul><h2 id="_5、在idea协助下创建servlet" tabindex="-1"><a class="header-anchor" href="#_5、在idea协助下创建servlet" aria-hidden="true">#</a> 5、在IDEA协助下创建Servlet</h2><ul><li>指定Servlet的类名</li><li>包名</li><li>把基于注解开发的钩钩去掉</li><li>点击OK</li><li>IDEA会自动帮助我们创建Servlet的类</li><li>我们需要把web.xml中Servlet的配置完成</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- servlet 标签：配置 Servlet 本身 --&gt;</span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>  
    <span class="token comment">&lt;!-- servlet-name 标签：由于全类名太长，为了便于其它地方引用，声明一个简短、友好的名称 --&gt;</span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>  
  
    <span class="token comment">&lt;!-- servlet-class 标签：指定 Servlet 全类名 --&gt;</span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.atguigu.servlet.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>  
  
<span class="token comment">&lt;!-- servlet-mapping 标签：配置 Servlet 的映射关系 --&gt;</span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>  
    <span class="token comment">&lt;!-- servlet-name 标签：引用前面声明的 Servlet 名称 --&gt;</span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>  
  
    <span class="token comment">&lt;!-- url-pattern 标签：配置能够映射到 HelloServlet 的 URL 地址 --&gt;</span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6、给helloservlet发送get请求" tabindex="-1"><a class="header-anchor" href="#_6、给helloservlet发送get请求" aria-hidden="true">#</a> 6、给HelloServlet发送GET请求</h2><h3 id="_1编写超链接" tabindex="-1"><a class="header-anchor" href="#_1编写超链接" aria-hidden="true">#</a> ①编写超链接</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 浏览器认为路径开头的斜杠代表服务器根目录 --&gt;</span>  
<span class="token comment">&lt;!-- 在服务器根目录下，我们还需要写上contextPath才能找到具体的某一个 Web 应用 --&gt;</span>  
<span class="token comment">&lt;!-- 所以访问 Servlet 的路径在开头的斜杠前面还需要加上contextPath部分 --&gt;</span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/demo/HelloServlet<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>给HelloServlet发送GET请求<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2在doget-方法中做一个打印" tabindex="-1"><a class="header-anchor" href="#_2在doget-方法中做一个打印" aria-hidden="true">#</a> ②在doGet()方法中做一个打印</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>  
	    <span class="token comment">// 这个打印是我们的一个里程碑：今天我们终于能够通过浏览器上的操作调用 Java 代码</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是HelloServlet，我执行了doGet()方法！哇哈哈！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>  
  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3在doget-方法中给浏览器返回响应" tabindex="-1"><a class="header-anchor" href="#_3在doget-方法中给浏览器返回响应" aria-hidden="true">#</a> ③在doGet()方法中给浏览器返回响应</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>  
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>  
    <span class="token comment">// 这个打印是我们的一个里程碑：今天我们终于能够通过浏览器上的操作调用 Java 代码  </span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是HelloServlet，我执行了doGet()方法！哇哈哈！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
    <span class="token comment">// 调用 response 对象的方法获取字符输出流对象  </span>
    <span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
    <span class="token comment">// 调用把我们希望返回给浏览器的响应数据写入字符输出流对象  </span>
    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Hello!I am from HelloServlet doGet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7、给helloservlet发送post请求" tabindex="-1"><a class="header-anchor" href="#_7、给helloservlet发送post请求" aria-hidden="true">#</a> 7、给HelloServlet发送POST请求</h2><h3 id="_1表单" tabindex="-1"><a class="header-anchor" href="#_1表单" aria-hidden="true">#</a> ①表单</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/demo/HelloServlet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>给HelloServlet发送POST请求<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2dopost-方法" tabindex="-1"><a class="header-anchor" href="#_2dopost-方法" aria-hidden="true">#</a> ②doPost()方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>  
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>  
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是HelloServlet，我执行了doPost()方法！哇哈哈！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
    response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;This is doPost method response.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="四、学习内容-理论部分" tabindex="-1"><a class="header-anchor" href="#四、学习内容-理论部分" aria-hidden="true">#</a> 四、学习内容：理论部分</h1><h2 id="_1、servlet的api体系" tabindex="-1"><a class="header-anchor" href="#_1、servlet的api体系" aria-hidden="true">#</a> 1、Servlet的API体系</h2><p><img src="`+e+`" alt="images"></p><h2 id="_2、servlet生命周期" tabindex="-1"><a class="header-anchor" href="#_2、servlet生命周期" aria-hidden="true">#</a> 2、Servlet生命周期</h2><h3 id="_1从servlet接口说起" tabindex="-1"><a class="header-anchor" href="#_1从servlet接口说起" aria-hidden="true">#</a> ①从Servlet接口说起</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span>
	<span class="token comment">// 做初始化操作（生命周期方法）</span>
    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">;</span>  

	<span class="token comment">// 获取 ServletConfig 对象</span>
    <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

	<span class="token comment">// 每一次接收到请求都调用这个 service() 方法来处理请求（生命周期方法）</span>
    <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>  

	<span class="token comment">// 获取 Servlet 相关信息</span>
    <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

	<span class="token comment">// 在 Web 应用卸载之前执行清理操作（生命周期方法）</span>
    <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_2生命周期" tabindex="-1"><a class="header-anchor" href="#_2生命周期" aria-hidden="true">#</a> ②生命周期</h3><h4 id="_1-创建对象" tabindex="-1"><a class="header-anchor" href="#_1-创建对象" aria-hidden="true">#</a> [1]创建对象</h4><ul><li>Tomcat根据Servlet的全类名（通过web.xml中的配置告诉了Tomcat）基于反射技术创建了Servlet的对象</li><li>在Servlet第一次接收到请求时创建对象，而且只创建一个。也就是说，在整个Web应用范围内，Servlet是单例的。</li><li>创建对象调用的是Servlet的无参构造器。</li></ul><br><h4 id="_2-初始化" tabindex="-1"><a class="header-anchor" href="#_2-初始化" aria-hidden="true">#</a> [2]初始化</h4><ul><li>调用init()方法执行初始化操作</li><li>在创建对象之后立即执行</li><li>在整个生命周期中只执行一次</li></ul><br><h4 id="_3-处理请求" tabindex="-1"><a class="header-anchor" href="#_3-处理请求" aria-hidden="true">#</a> [3]处理请求</h4><ul><li>每一次处理前端请求的时候执行</li><li>调用的方法 <ul><li>从Servlet接口的角度来说：调用的是service()方法</li><li>从继承HttpServlet的类来说：调用的是doXxx()方法</li></ul></li><li>处理请求的操作可以执行多次</li></ul><br><h4 id="_4-销毁or清理" tabindex="-1"><a class="header-anchor" href="#_4-销毁or清理" aria-hidden="true">#</a> [4]销毁or清理</h4><ul><li>调用destroy()方法执行销毁、清理操作</li><li>在Web应用卸载的过程中，Servlet对象被销毁之前执行</li><li>只执行一次</li></ul><br><h4 id="_5-提出问题" tabindex="-1"><a class="header-anchor" href="#_5-提出问题" aria-hidden="true">#</a> [5]提出问题</h4><p>在第一次接收到请求的时候，才执行创建对象、初始化的操作，这样的做法在特定场景下不合适。<br><br></p><p>如果初始化环节要做的操作比较多，耗时较长，那么就会导致第一个请求的用户等待时间太长，用户体验很差。<br><br></p><p>所以初始化操作最好是在Web应用启动的时候来做更合适。特别是将来我们使用框架之后。<br><br></p><p>以后我们使用SpringMVC这个框架，它的核心就是一个名叫DispatcherServlet的组件。这个组件的初始化方法中要做的事情就很多：读取并解析配置文件、根据配置文件创建对象、组装各个组件……<br><br></p><p>操作：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- servlet 标签：配置 Servlet 本身 --&gt;</span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>  
    <span class="token comment">&lt;!-- servlet-name 标签：由于全类名太长，为了便于其它地方引用，声明一个简短、友好的名称 --&gt;</span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>  
  
    <span class="token comment">&lt;!-- servlet-class 标签：指定 Servlet 全类名 --&gt;</span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.atguigu.servlet.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>  
      
    <span class="token comment">&lt;!-- 改变 Servlet 的启动顺序 --&gt;</span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="_3、servlet容器" tabindex="-1"><a class="header-anchor" href="#_3、servlet容器" aria-hidden="true">#</a> 3、Servlet容器</h2><h3 id="_1类比生活中的容器" tabindex="-1"><a class="header-anchor" href="#_1类比生活中的容器" aria-hidden="true">#</a> ①类比生活中的容器</h3><table><thead><tr><th>容器类别</th><th>生活中</th><th>代码中</th></tr></thead><tbody><tr><td>简单容器</td><td>水杯</td><td>数组、List集合、Set集合</td></tr><tr><td>复杂容器</td><td>养鸡场</td><td>Servlet容器、IOC容器</td></tr></tbody></table><br><p>复杂的容器不仅仅是存放对象，而且负责对象的一生：</p><ul><li>创建对象</li><li>对象初始化</li><li>对象工作、干活儿</li><li>对象销毁</li></ul><br><p>负责管理Servlet生命周期的就是Servlet容器。具体来说，我们现在使用的Servlet容器就是Tomcat。</p><br><p>Servlet的生命周期方法也都是Servlet容器调用的：</p><ul><li>通过构造器创建对象</li><li>调用init()方法初始化</li><li>调用doXxx()方法处理请求，传入request、response对象</li><li>调用destroy()方法清理</li></ul><br><h3 id="_2servlet标准和servlet容器" tabindex="-1"><a class="header-anchor" href="#_2servlet标准和servlet容器" aria-hidden="true">#</a> ②Servlet标准和Servlet容器</h3><p>类比JDBC：</p><ul><li>JDBC标准是为了屏蔽不同数据库产品之间的差异，让Java程序可以以相同的方式操作数据库</li><li>JDBC标准是由一系列接口组成的 <ul><li>Connection：代表数据库连接</li><li>Statement：代表SQL语句</li><li>PreparedStatement：预编译的SQL语句</li><li>ResultSet：代表结果集</li><li>DataSource：代表数据源，也就是数据库连接池</li></ul></li></ul><br><p>Servlet也包含一系列接口：</p><ul><li>jakarta.servlet.Servlet</li><li>jakarta.servlet.Filter</li><li>jakarta.servlet.ServletContextListener</li><li>jakarta.servlet.http.HttpServletRequest</li><li>jakarta.servlet.http.HttpServletResponse</li></ul><br><p>基于上述的接口，Servlet也是一套完备的标准。这套标准是为了屏蔽不同Servlet容器之间的差异。</p><ul><li>Tomcat</li><li>Jetty</li><li>JBoss</li><li>Glassfish</li><li>Weblogic</li><li>……</li></ul><br><p>只要Servlet容器和Web应用都遵循同一个版本的标准，就可以在不同容器之间平滑、无缝迁移。Servlet标准中的接口由各个Servlet容器提供实现。<br></p><p>例如：HttpServletRequest接口在Tomcat10的实现类是org.apache.catalina.connector.RequestFacade</p><br><h2 id="_4、从service-到doget" tabindex="-1"><a class="header-anchor" href="#_4、从service-到doget" aria-hidden="true">#</a> 4、从service()到doGet()</h2><p><img src="`+l+'" alt="images"></p><h2 id="_5、servletconfig对象" tabindex="-1"><a class="header-anchor" href="#_5、servletconfig对象" aria-hidden="true">#</a> 5、ServletConfig对象</h2><h3 id="_1来源" tabindex="-1"><a class="header-anchor" href="#_1来源" aria-hidden="true">#</a> ①来源</h3><p><img src="'+p+`" alt="images"></p><br><h3 id="_2用途" tabindex="-1"><a class="header-anchor" href="#_2用途" aria-hidden="true">#</a> ②用途</h3><p>参考ServletConfig接口就能够了解到它的用途：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ServletConfig</span> <span class="token punctuation">{</span>  
	<span class="token comment">// 获取web.xml中给Servlet起的名字</span>
    <span class="token class-name">String</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

	<span class="token comment">// 获取 ServletContext 对象</span>
    <span class="token class-name">ServletContext</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

	<span class="token comment">// 获取 Servlet 的初始化参数：根据初始化参数名获取对应的值</span>
    <span class="token class-name">String</span> <span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token class-name">String</span> paramName<span class="token punctuation">)</span><span class="token punctuation">;</span>  

	<span class="token comment">// 获取 Servlet 的初始化参数：获取所有初始化参数名称</span>
    <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getInitParameterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3获取servlet初始化参数" tabindex="-1"><a class="header-anchor" href="#_3获取servlet初始化参数" aria-hidden="true">#</a> ③获取Servlet初始化参数</h3><h4 id="_1-配置servlet初始化参数" tabindex="-1"><a class="header-anchor" href="#_1-配置servlet初始化参数" aria-hidden="true">#</a> [1]配置Servlet初始化参数</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- servlet 标签：配置 Servlet 本身 --&gt;</span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>  
    <span class="token comment">&lt;!-- servlet-name 标签：由于全类名太长，为了便于其它地方引用，声明一个简短、友好的名称 --&gt;</span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>  
  
    <span class="token comment">&lt;!-- servlet-class 标签：指定 Servlet 全类名 --&gt;</span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.atguigu.servlet.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>  
  
    <span class="token comment">&lt;!-- 改变 Servlet 的启动顺序 --&gt;</span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>  
  
    <span class="token comment">&lt;!-- 配置 Servlet 初始化参数 --&gt;</span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>  
        <span class="token comment">&lt;!-- 初始化参数的名称 --&gt;</span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>SpringMVCConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>  
        <span class="token comment">&lt;!-- 初始化参数的值 --&gt;</span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>spring-mvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>  
      
    <span class="token comment">&lt;!-- 初始化参数可以配置多个 --&gt;</span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>JDBCConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>jdbc.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-在servlet中获取初始化参数" tabindex="-1"><a class="header-anchor" href="#_2-在servlet中获取初始化参数" aria-hidden="true">#</a> [2]在Servlet中获取初始化参数</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 获取 ServletConfig 对象  </span>
<span class="token class-name">ServletConfig</span> servletConfig <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token comment">// 获取初始化参数  </span>
<span class="token class-name">String</span> springMVCConfigLocation <span class="token operator">=</span> servletConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">&quot;SpringMVCConfigLocation&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;springMVCConfigLocation = &quot;</span> <span class="token operator">+</span> springMVCConfigLocation<span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token class-name">String</span> jdbcConfigLocation <span class="token operator">=</span> servletConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">&quot;JDBCConfigLocation&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;jdbcConfigLocation = &quot;</span> <span class="token operator">+</span> jdbcConfigLocation<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_4获取servletcontext对象" tabindex="-1"><a class="header-anchor" href="#_4获取servletcontext对象" aria-hidden="true">#</a> ④获取ServletContext对象</h3><table><thead><tr><th>生活例子</th><th>程序</th></tr></thead><tbody><tr><td>将军</td><td>HelloServlet</td></tr><tr><td>随军主簿</td><td>ServletConfig</td></tr><tr><td>皇上</td><td>ServletContext</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 获取 ServletContext 对象  </span>
<span class="token class-name">ServletContext</span> servletContext01 <span class="token operator">=</span> servletConfig<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;servletContext01 = &quot;</span> <span class="token operator">+</span> servletContext01<span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token class-name">ServletContext</span> servletContext02 <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;servletContext02 = &quot;</span> <span class="token operator">+</span> servletContext02<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6、servletcontext" tabindex="-1"><a class="header-anchor" href="#_6、servletcontext" aria-hidden="true">#</a> 6、ServletContext</h2><h3 id="_1介绍一下这个对象" tabindex="-1"><a class="header-anchor" href="#_1介绍一下这个对象" aria-hidden="true">#</a> ①介绍一下这个对象</h3><p>Context：上下文、环境。所以ServletContext字面意思就表示Servlet工作的这个环境。<br></p><p>从对象本身的功能来说，ServletContext对象代表当前Web应用，在每个Web应用中有且只有一个ServletContext对象。<br></p><h3 id="_2servletcontext接口" tabindex="-1"><a class="header-anchor" href="#_2servletcontext接口" aria-hidden="true">#</a> ②ServletContext接口</h3><ul><li>接口全类名：jakarta.servlet.ServletContext</li><li>Tomcat实现类：org.apache.catalina.core.ApplicationContextFacade</li></ul><br><h3 id="_3功能" tabindex="-1"><a class="header-anchor" href="#_3功能" aria-hidden="true">#</a> ③功能</h3><ul><li>作为域对象：存放数据</li><li>获取Web应用初始化参数</li><li>根据虚拟路径转换为真实物理路径（了解）</li></ul><br><h3 id="_4域对象" tabindex="-1"><a class="header-anchor" href="#_4域对象" aria-hidden="true">#</a> ④域对象</h3><h4 id="_1-为什么需要有域对象" tabindex="-1"><a class="header-anchor" href="#_1-为什么需要有域对象" aria-hidden="true">#</a> [1]为什么需要有域对象</h4><p>在Java中，方法中局部变量的作用域仅限于方法内部。方法执行完，局部变量就会被释放，局部变量保存的数据也就没有了。<br><br></p><p>可是Web应用开发过程中，经常出现一种情况：doXxx()执行完之后，里面有些数据别的方法还需要使用——我们需要让数据存在的时间周期超过方法本身的作用域。<br><br></p><p>所以这样的时候就需要借助域对象来保存这样的数据。<br><br></p><h4 id="_2-域对象一共有三种" tabindex="-1"><a class="header-anchor" href="#_2-域对象一共有三种" aria-hidden="true">#</a> [2]域对象一共有三种</h4><ul><li>请求域：在一次请求的范围内有效。</li><li>会话域：在一次会话的范围内有效。</li><li>应用域：在整个Web应用范围内有效。</li></ul><p><br><br></p><h4 id="_3-测试" tabindex="-1"><a class="header-anchor" href="#_3-测试" aria-hidden="true">#</a> [3]测试</h4><p>在HelloServlet存入数据：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>servletContext02<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;appAttrName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;appAttrValue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><p>在AttrServlet中读取数据：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> appAttrValue <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;appAttrName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5获取web应用初始化参数" tabindex="-1"><a class="header-anchor" href="#_5获取web应用初始化参数" aria-hidden="true">#</a> ⑤获取Web应用初始化参数</h3><h4 id="_1-配置web应用初始化参数" tabindex="-1"><a class="header-anchor" href="#_1-配置web应用初始化参数" aria-hidden="true">#</a> [1]配置Web应用初始化参数</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 配置Web应用初始化参数 --&gt;</span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>SpringConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>spring-core.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-读取web应用初始化参数" tabindex="-1"><a class="header-anchor" href="#_2-读取web应用初始化参数" aria-hidden="true">#</a> [2]读取Web应用初始化参数</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 读取 Web 应用初始化参数  </span>
<span class="token class-name">String</span> springConfigLocation <span class="token operator">=</span> servletContext02<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">&quot;SpringConfigLocation&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;springConfigLocation = &quot;</span> <span class="token operator">+</span> springConfigLocation<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6把虚拟路径转换为真实物理路径-了解" tabindex="-1"><a class="header-anchor" href="#_6把虚拟路径转换为真实物理路径-了解" aria-hidden="true">#</a> ⑥把虚拟路径转换为真实物理路径（了解）</h3><h4 id="_1-概念" tabindex="-1"><a class="header-anchor" href="#_1-概念" aria-hidden="true">#</a> [1]概念</h4><ul><li>虚拟路径：通过Tomcat访问资源时，使用的路径。</li><li>真实物理路径：资源在物理硬盘上实际保存的路径。</li></ul><h4 id="_2-代码实现" tabindex="-1"><a class="header-anchor" href="#_2-代码实现" aria-hidden="true">#</a> [2]代码实现</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 把虚拟路径转换为真实物理路径  </span>
<span class="token class-name">String</span> virtualPath <span class="token operator">=</span> <span class="token string">&quot;/images/wanghaodong.jpg&quot;</span><span class="token punctuation">;</span>  
  
<span class="token class-name">String</span> realPath <span class="token operator">=</span> servletContext02<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span>virtualPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-意义何在" tabindex="-1"><a class="header-anchor" href="#_3-意义何在" aria-hidden="true">#</a> [3]意义何在</h4><p>Web应用在不同环境下部署，各个服务器环境下真实物理路径都有所不同。<br> 所以如果在Java代码中把真实物理路径写死，那么应用程序将不具备任何可迁移性。<br> 而虚拟路径是以Web应用根目录为基准的路径，这个路径是不随部署环境不同而改变的。<br> 所以基于不变的虚拟路径，调用ServletContext对象实时、动态获取当前环境下物理路径这就是最好的方案。<br></p><br><h4 id="_4-应用场景" tabindex="-1"><a class="header-anchor" href="#_4-应用场景" aria-hidden="true">#</a> [4]应用场景</h4><p>什么时候一定要使用物理磁盘的真实路径？主要是I/O操作的时候需要使用。<br> 比如通过new FileInputStream()读取服务器上某个文件时，就需要真实物理磁盘路径。</p><h1 id="五、了解内容" tabindex="-1"><a class="header-anchor" href="#五、了解内容" aria-hidden="true">#</a> 五、了解内容</h1><h2 id="_1、使用注解映射servlet路径" tabindex="-1"><a class="header-anchor" href="#_1、使用注解映射servlet路径" aria-hidden="true">#</a> 1、使用注解映射Servlet路径</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;AnnotationServlet&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;/AnnotationServlet&quot;</span><span class="token punctuation">)</span>  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>  
        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;This Servlet mapping by annotation.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>  
  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、servlet路径匹配其它方式" tabindex="-1"><a class="header-anchor" href="#_2、servlet路径匹配其它方式" aria-hidden="true">#</a> 2、Servlet路径匹配其它方式</h2><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>PathServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.atguigu.servlet.PathServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>PathServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>  
  
    <span class="token comment">&lt;!-- 模糊匹配，在后半部分使用通配符 --&gt;</span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/atguigu/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>  
  
    <span class="token comment">&lt;!-- 模糊匹配，在前半部分使用通配符，也可以称之为扩展名匹配 --&gt;</span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>*.atguigu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>  
  
    <span class="token comment">&lt;!-- 错误写法，不允许中间使用通配符 --&gt;</span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*.atguigu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="六、今天的总结" tabindex="-1"><a class="header-anchor" href="#六、今天的总结" aria-hidden="true">#</a> 六、今天的总结</h1><ul><li>操作部分： <ul><li>基于IDEA创建Servlet</li><li>编写超链接访问doGet()方法</li><li>编写表单访问doPost()方法</li><li>使用response对象返回响应在浏览器显示</li></ul></li><li>理论部分： <ul><li>Servlet生命周期中的各个环节 <ul><li>名称叫法</li><li>在什么时候执行</li><li>执行几次</li></ul></li><li>Servlet创建对象 <ul><li>默认在什么时候创建对象</li><li>如何让Servlet在Web应用启动时创建对象</li></ul></li><li>理解Servlet容器的概念</li><li>ServletContext对象 <ul><li>域对象的概念</li><li>如何读写ServletContext域（应用域）</li><li>通过ServletContext读取Web应用初始化参数</li></ul></li></ul></li></ul>`,155),c=[o];function r(u,d){return a(),s("div",null,c)}const k=n(i,[["render",r],["__file","Servlet.html.vue"]]);export{k as default};
