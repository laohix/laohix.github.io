import{_ as n,o as s,c as a,e}from"./app-8007fa1b.js";const t="/assets/image-20230507144401008-f79cdbaa.png",p="/assets/image-20230507150620790-26d33352.png",o="/assets/image-20230507150506550-a71b83dc.png",c="/assets/image-20230507162822568-720f60d8.png",i="/assets/image-20230507163323363-e8ba43d5.png",l="/assets/image-20230507174539759-41a56cee.png",u="/assets/image-20230507192704142-13ce193d.png",r="/assets/image-20230507184637172-e1693d58.png",d="/assets/image-20230507222619897-15b8e986.png",k="/assets/image-20230507223950676-7fc96f0e.png",v={},m=e(`<h1 id="_1-前端接入登录" tabindex="-1"><a class="header-anchor" href="#_1-前端接入登录" aria-hidden="true">#</a> 1 前端接入登录</h1><p>当后端接口开发好了以后就可以让前端去请求该登录接口完成登录操作。</p><h2 id="_1-1-修改前端代码" tabindex="-1"><a class="header-anchor" href="#_1-1-修改前端代码" aria-hidden="true">#</a> 1.1 修改前端代码</h2><p>修改src/utils/request.js更改基础请求路径</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> service <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">&#39;http://localhost:8503&#39;</span><span class="token punctuation">,</span>    <span class="token comment">// 后端服务的ip地址和端口号</span>
  <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>
  <span class="token literal-property property">withCredentials</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改src/api/login.js更改登录接口地址</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 登录接口</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Login</span> <span class="token operator">=</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/admin/system/index/login&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
    data<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发送登录请求，那么此时会报一个错误：</p><p><img src="`+t+'" alt="image-20230507144401008"></p><p>报错的原因是因为此时的请求是一个跨域的请求。</p><h2 id="_1-2-跨域请求" tabindex="-1"><a class="header-anchor" href="#_1-2-跨域请求" aria-hidden="true">#</a> 1.2 跨域请求</h2><h3 id="_1-2-1-跨域请求简介" tabindex="-1"><a class="header-anchor" href="#_1-2-1-跨域请求简介" aria-hidden="true">#</a> 1.2.1 跨域请求简介</h3><p>跨域请求：通过一个域的JavaScript脚本和另外一个域的内容进行交互</p><p>域的信息：协议、域名、端口号</p><p><img src="'+p+'" alt="image-20230507150620790"></p><p>同域：当两个域的协议、域名、端口号均相同</p><p>如下所示：</p><p><img src="'+o+`" alt="image-20230507150506550"></p><p><strong>同源【域】策略</strong>：在浏览器中存在一种安全策略就是同源策略，同源策略（Sameoriginpolicy）是一种约定，它是浏览器最核心也最基本的安全功</p><p>能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说Web是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实</p><p>现。同源策略会阻止一个域的javascript脚本和另外一个域的内容进行交互。</p><h3 id="_1-2-2-cosr概述" tabindex="-1"><a class="header-anchor" href="#_1-2-2-cosr概述" aria-hidden="true">#</a> 1.2.2 COSR概述</h3><h4 id="cors简介" tabindex="-1"><a class="header-anchor" href="#cors简介" aria-hidden="true">#</a> CORS简介</h4><p>官网地址：https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS</p><p>CORS的全称为Cross-origin Resource Sharing，中文含义是<strong>跨域资源共享</strong>，CORS 给了web服务器一种权限：服务器可以选择是否允许跨域请求访</p><p>问到它们的资源。</p><h4 id="cors原理" tabindex="-1"><a class="header-anchor" href="#cors原理" aria-hidden="true">#</a> CORS原理</h4><p>浏览器将CORS请求分成两类：<strong>简单请求</strong>和<strong>非简单请求</strong>。怎么区分这两者呢?</p><blockquote><p>简单请求</p></blockquote><p>我们先来看两个条件：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token constant">HTTP</span>请求方法是以下三种之一：
	·<span class="token constant">HEAD</span>
	·<span class="token constant">GET</span>
	·<span class="token constant">POST</span>
<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>只包含简单<span class="token constant">HTTP</span>请求头，即：
	·<span class="token class-name">Accept</span><span class="token punctuation">,</span>
	·<span class="token class-name">Accept</span><span class="token operator">-</span><span class="token class-name">Language</span><span class="token punctuation">,</span>
	·<span class="token class-name">Content</span><span class="token operator">-</span><span class="token class-name">Language</span><span class="token punctuation">,</span>
	·<span class="token class-name">Content</span><span class="token operator">-</span><span class="token class-name">Type</span>并且值是 application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencoded<span class="token punctuation">,</span> multipart<span class="token operator">/</span>form<span class="token operator">-</span>data<span class="token punctuation">,</span> 或者 text<span class="token operator">/</span>plain之一的（忽略参数）。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当请求满足上面的两个条件时，则该请求被视为简单请求，否则被视为非简单请求。简单请求与非简单请求的最主要区别就是跨域请求是否需要发送预</p><p>检请求（preflight request）。</p><p>简单请求的跨域请求响应流程：</p><p><img src="`+c+'" alt="image-20230507162822568"></p><p>在进行跨域请求时，如果是<strong>简单请求</strong>，则浏览器会在请求中增加一个<strong>Origin请求头</strong>之后直接发送CORS请求，服务器检查该请求头的值是否在服务器</p><p>设置的CORS许可范围内，如果在许可范围内，则服务器同意本次请求，如果不在许可范围内，则服务会返回一个没有包含Access-Control-Allow-</p><p>Origin 响应头的HTTP响应。</p><blockquote><p>非简单请求</p></blockquote><p>非简单请求的跨域请求响应流程：</p><p><img src="'+i+`" alt="image-20230507163323363"></p><p>除了简单请求其他的请求都是非简单请求，非简单请求会先发送一次预检请求**（OPTIONS请求）<strong>，浏览器除了会带上</strong>Origin请求头**之外，还会再带</p><p>上<strong>Access-Control-Request-Method 和 Access-Control-Request-Headers 这两个请求头</strong>，服务器在收到预检请求之后，会检查这三个请</p><p>求头是否与服务器的资源设置（接口）一致，如服务器的接口只允许请求方法为GET、Origin为http://www.abc.com:8080、Access-Control-</p><p>Request-Header为 content-type的请求，只要预检请求中三个请求头有任意一个值与服务器的资源（接口）设置不一致，服务器就会拒绝预检请求，</p><p>如果都一致，则服务器确认通过预检请求并返回带有Access-Control-Allow-Credentials、Access-Control-Allow-Headers、Access-Control-Allow-</p><p>Methods、Access-Control-Allow-Origin、Access-Control-Max-Age【间隔多长时间在发起预检请求】等响应头的相应。当预检请求通过以后此时</p><p>就可以发送真实请求。</p><h3 id="_1-2-3-cors解决跨域" tabindex="-1"><a class="header-anchor" href="#_1-2-3-cors解决跨域" aria-hidden="true">#</a> 1.2.3 CORS解决跨域</h3><p>后端服务器开启跨域支持：</p><p>方案一：在IndexController上添加**@CrossOrigin**注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/admin/system/index&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@CrossOrigin</span><span class="token punctuation">(</span>allowCredentials <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span> <span class="token punctuation">,</span> originPatterns <span class="token operator">=</span> <span class="token string">&quot;*&quot;</span> <span class="token punctuation">,</span> allowedHeaders <span class="token operator">=</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span> <span class="token comment">// maxAge默认值是30min</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>弊端：每一个controller类上都来添加这样的一个接口影响开发效率、维护性较差</p><p>方案二：添加一个配置类配置跨域请求</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// com.atguigu.spzx.manager.config</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span><span class="token class-name">CorsRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span>      <span class="token comment">// 添加路径规则</span>
                <span class="token punctuation">.</span><span class="token function">allowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>               <span class="token comment">// 是否允许在跨域的情况下传递Cookie</span>
                <span class="token punctuation">.</span><span class="token function">allowedOriginPatterns</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span>           <span class="token comment">// 允许请求来源的域规则</span>
            	<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">allowedHeaders</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>                <span class="token comment">// 允许所有的请求头</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_2-异常处理" tabindex="-1"><a class="header-anchor" href="#_2-异常处理" aria-hidden="true">#</a> 2 异常处理</h1><h2 id="_2-1-提示空消息分析" tabindex="-1"><a class="header-anchor" href="#_2-1-提示空消息分析" aria-hidden="true">#</a> 2.1 提示空消息分析</h2><p>现象说明：当用户输入的用户名或者密码错误，前端页面提示空信息</p><p>问题分析：当用户名或者密码输入错误以后，此时后端服务器抛出了异常。但是在后端并没有对异常进行处理，此时就会给前端响应异常信息，在前端</p><p>提供了axios的响应拦截器，那么通过</p><p>axios响应拦截器拦截了异常信息，然后给出为空的提示信息。</p><p>源码查看：src/utils/request.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 拦截响应</span>
service<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
  <span class="token comment">// 响应成功进入第1个函数，该函数的参数是响应对象</span>
  <span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> response<span class="token punctuation">.</span>data
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 响应失败进入第2个函数，该函数的参数是错误对象</span>
  <span class="token keyword">async</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  
    <span class="token operator">...</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      ElMessage<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>		<span class="token comment">// 打印错误信息</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      ElMessage<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>				<span class="token comment">// 打印错误信息</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-2-系统异常分类" tabindex="-1"><a class="header-anchor" href="#_2-2-系统异常分类" aria-hidden="true">#</a> 2.2 系统异常分类</h2><p>在项目中为了更加详情的对异常出现的异常问题进行排查，那么此时应该对异常进行区分，大致可以分为如下两种异常：</p><p>1、系统异常：一般由框架本身所抛出的异常：NullPointerException、IllegalArgumentException、ConnectTimeoutException...</p><p>2、业务异常：业务异常就是对我们的业务错误进行描述的异常，往往需要进行自定义。常见的业务错误：用户名或者密码错误、用户名重复...</p><p>自定异常：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// com.atguigu.spzx.common.exception</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GuiguException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code <span class="token punctuation">;</span>          <span class="token comment">// 错误状态码</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> message <span class="token punctuation">;</span>        <span class="token comment">// 错误消息</span>

    <span class="token keyword">private</span> <span class="token class-name">ResultCodeEnum</span> resultCodeEnum <span class="token punctuation">;</span>     <span class="token comment">// 封装错误状态码和错误消息</span>

    <span class="token keyword">public</span> <span class="token class-name">GuiguException</span><span class="token punctuation">(</span><span class="token class-name">ResultCodeEnum</span> resultCodeEnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>resultCodeEnum <span class="token operator">=</span> resultCodeEnum <span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> resultCodeEnum<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> resultCodeEnum<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">GuiguException</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code <span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code <span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更改异常的抛出代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// com.atguigu.spzx.manager.service.impl.SysUserServiceImpl#login</span>
<span class="token class-name">SysUser</span> sysUser <span class="token operator">=</span> sysUserMapper<span class="token punctuation">.</span><span class="token function">selectByUserName</span><span class="token punctuation">(</span>loginDto<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>sysUser <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">GuiguException</span><span class="token punctuation">(</span><span class="token class-name">ResultCodeEnum</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>		<span class="token comment">// 抛出自定义的业务异常</span>
<span class="token punctuation">}</span>

<span class="token comment">// 验证密码是否正确</span>
<span class="token class-name">String</span> inputPassword <span class="token operator">=</span> loginDto<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> md5InputPassword <span class="token operator">=</span> <span class="token class-name">DigestUtils</span><span class="token punctuation">.</span><span class="token function">md5DigestAsHex</span><span class="token punctuation">(</span>inputPassword<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 抛出自定义的业务异常</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>md5InputPassword<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">GuiguException</span><span class="token punctuation">(</span><span class="token class-name">ResultCodeEnum</span><span class="token punctuation">.</span><span class="token constant">LOGIN_ERROR</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-3-异常处理" tabindex="-1"><a class="header-anchor" href="#_2-3-异常处理" aria-hidden="true">#</a> 2.3 异常处理</h2><p>要解决上述问题，那么此时就需要对异常进行处理。统一向前端响应200的http的状态码，然后通过不同的业务状态码区分登录成功还是失败。</p><h3 id="_2-2-1-方案一" tabindex="-1"><a class="header-anchor" href="#_2-2-1-方案一" aria-hidden="true">#</a> 2.2.1 方案一</h3><p>在controller方法中使用try...catch捕获业务层方法所抛出的异常。如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// IndexController#login方法</span>
<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/login&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LoginVo</span><span class="token punctuation">&gt;</span></span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">LoginDto</span> loginDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">LoginVo</span> loginVo <span class="token operator">=</span> sysUserService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>loginDto<span class="token punctuation">)</span> <span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>loginVo <span class="token punctuation">,</span> <span class="token class-name">ResultCodeEnum</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">GuiguException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token punctuation">,</span> exception<span class="token punctuation">.</span><span class="token function">getResultCodeEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-2-方案二" tabindex="-1"><a class="header-anchor" href="#_2-2-2-方案二" aria-hidden="true">#</a> 2.2.2 方案二</h3><p>使用spring mvc的全局异常处理器进行异常的处理，整体的工作流程如下所示：</p><p><img src="`+l+`" alt="image-20230507174539759"></p><p>开发一个全局异常处理器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// com.atguigu.spzx.common.exception</span>
<span class="token annotation punctuation">@RestControllerAdvice</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">GuiguException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>     <span class="token comment">// 处理自定义异常</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">guiguExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">GuiguException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token punctuation">,</span> exception<span class="token punctuation">.</span><span class="token function">getResultCodeEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>          <span class="token comment">// 处理系统异常</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">systemExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token punctuation">,</span> <span class="token class-name">ResultCodeEnum</span><span class="token punctuation">.</span><span class="token constant">SYSTEM_ERROR</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token comment">// ResultCodeEnum添加枚举项</span>
<span class="token function">SYSTEM_ERROR</span><span class="token punctuation">(</span><span class="token number">9999</span> <span class="token punctuation">,</span> <span class="token string">&quot;您的网络有问题请稍后重试&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在spzx-manager中使用全局异常处理器：</p><p>方式一：在启动类上使用@Import注解导入全局异常处理器到spring容器中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">GlobalExceptionHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>方式二：自定义注解对@Import注解进行封装，然后在启动类上使用自定义注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// com.atguigu.spzx.common.anno</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">GlobalExceptionHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnableGlobaleExceptionHandler</span> <span class="token punctuation">{</span>		<span class="token comment">// 启动类上添加该注解</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方式三：使用spring boot3的自动化配置完成全局异常处理器的自动化配置</p><p>步骤：</p><p>1、在common-service模块中的resources目录下创建一个META-INF/spring文件夹，在该文件夹下创建一个文件，名称为：</p><p>org.springframework.boot.autoconfigure.AutoConfiguration.imports</p><p>2、在该文件中添加全局异常处理器的全类名</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>spzx<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exception<span class="token punctuation">.</span></span>GlobalExceptionHandler</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="_3-图片验证码" tabindex="-1"><a class="header-anchor" href="#_3-图片验证码" aria-hidden="true">#</a> 3 图片验证码</h1><h2 id="_3-1-图片验证码意义" tabindex="-1"><a class="header-anchor" href="#_3-1-图片验证码意义" aria-hidden="true">#</a> 3.1 图片验证码意义</h2><p>验证码是全自动区分计算机和人类的图灵测试的缩写，是一种区分用户是计算机还是人的公共全自动程序，可以防止恶意破解密码、刷票、论坛灌水，</p><p>有效防止某个黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登录尝试。</p><p>页面效果如下所示：</p><p><img src="`+u+'" alt="image-20230507192704142"></p><h2 id="_3-2-实现思路" tabindex="-1"><a class="header-anchor" href="#_3-2-实现思路" aria-hidden="true">#</a> 3.2 实现思路</h2><p>整体的实现思路，如下图所示：</p><p><img src="'+r+`" alt="image-20230507184637172"></p><h2 id="_3-3-后端接口编写" tabindex="-1"><a class="header-anchor" href="#_3-3-后端接口编写" aria-hidden="true">#</a> 3.3 后端接口编写</h2><h3 id="_3-3-1-实体类创建" tabindex="-1"><a class="header-anchor" href="#_3-3-1-实体类创建" aria-hidden="true">#</a> 3.3.1 实体类创建</h3><p>创建一个实体类封装，给前端返回的验证码数据：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// com.atguigu.spzx.model.vo.system;</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidateCodeVo</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> codeKey <span class="token punctuation">;</span>        <span class="token comment">// 验证码的key</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> codeValue <span class="token punctuation">;</span>      <span class="token comment">// 图片验证码对应的字符串数据</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-2-indexcontroller" tabindex="-1"><a class="header-anchor" href="#_3-3-2-indexcontroller" aria-hidden="true">#</a> 3.3.2 IndexController</h3><p>在IndexController中添加获取验证码接口方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// com.atguigu.spzx.manager.controller.IndexController</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/generateValidateCode&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ValidateCodeVo</span><span class="token punctuation">&gt;</span></span> <span class="token function">generateValidateCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ValidateCodeVo</span> validateCodeVo <span class="token operator">=</span> validateCodeService<span class="token punctuation">.</span><span class="token function">generateValidateCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>validateCodeVo <span class="token punctuation">,</span> <span class="token class-name">ResultCodeEnum</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-3-validatecodeservice" tabindex="-1"><a class="header-anchor" href="#_3-3-3-validatecodeservice" aria-hidden="true">#</a> 3.3.3 ValidateCodeService</h3><p>业务层代码实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// com.atguigu.spzx.manager.service</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ValidateCodeService</span> <span class="token punctuation">{</span>

    <span class="token comment">// 获取验证码图片</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">ValidateCodeVo</span> <span class="token function">generateValidateCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token comment">// com.atguigu.spzx.manager.service.impl</span>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidateCodeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ValidateCodeService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span> <span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> redisTemplate <span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ValidateCodeVo</span> <span class="token function">generateValidateCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 使用hutool工具包中的工具类生成图片验证码</span>
        <span class="token class-name">CircleCaptcha</span> circleCaptcha <span class="token operator">=</span> <span class="token class-name">CaptchaUtil</span><span class="token punctuation">.</span><span class="token function">createCircleCaptcha</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> codeValue <span class="token operator">=</span> circleCaptcha<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> imageBase64 <span class="token operator">=</span> circleCaptcha<span class="token punctuation">.</span><span class="token function">getImageBase64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 生成uuid作为图片验证码的key</span>
        <span class="token class-name">String</span> codeKey <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 将验证码存储到Redis中</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;user:login:validatecode:&quot;</span> <span class="token operator">+</span> codeKey <span class="token punctuation">,</span> codeValue <span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 构建响应结果数据</span>
        <span class="token class-name">ValidateCodeVo</span> validateCodeVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ValidateCodeVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
        validateCodeVo<span class="token punctuation">.</span><span class="token function">setCodeKey</span><span class="token punctuation">(</span>codeKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        validateCodeVo<span class="token punctuation">.</span><span class="token function">setCodeValue</span><span class="token punctuation">(</span><span class="token string">&quot;data:image/png;base64,&quot;</span> <span class="token operator">+</span> imageBase64<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 返回数据</span>
        <span class="token keyword">return</span> validateCodeVo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用postman进行测试。</p><h2 id="_3-4-前端接入" tabindex="-1"><a class="header-anchor" href="#_3-4-前端接入" aria-hidden="true">#</a> 3.4 前端接入</h2><h3 id="_3-4-1-实现思路" tabindex="-1"><a class="header-anchor" href="#_3-4-1-实现思路" aria-hidden="true">#</a> 3.4.1 实现思路</h3><p>整体实现思路：</p><p>1、登录表单中添加验证码表单项，绑定对应的数据模型(可以问GPT)</p><p>2、添加验证码输入框校验规则</p><p>3、在api/login.js中添加请求后端获取验证码接口方法</p><p>4、在首页中使用vue的onMounted钩子函数发送请求获取图片验证码</p><h3 id="_3-4-3-代码实现" tabindex="-1"><a class="header-anchor" href="#_3-4-3-代码实现" aria-hidden="true">#</a> 3.4.3 代码实现</h3><h4 id="页面表单项" tabindex="-1"><a class="header-anchor" href="#页面表单项" aria-hidden="true">#</a> 页面表单项</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 页面结构 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>captcha<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>captcha<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span>
                  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span>
                  <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>model.captcha<span class="token punctuation">&quot;</span></span>
                  <span class="token attr-name">prefix-icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Picture<span class="token punctuation">&quot;</span></span>
                  <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>请输入验证码<span class="token punctuation">&quot;</span></span>
                  <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>captchaSrc<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>refreshCaptcha<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>css样式：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">// 验证码输入框样式 start
.captcha</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span>
  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.captcha img</span> <span class="token punctuation">{</span>
  <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
// 验证码输入框样式 end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="规则校验" tabindex="-1"><a class="header-anchor" href="#规则校验" aria-hidden="true">#</a> 规则校验</h4><p>更改views/login/index.vue页面的vue规则校验代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">const</span> getRules <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    captcha<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            message<span class="token operator">:</span> ctx<span class="token punctuation">.</span>$<span class="token function">t</span><span class="token punctuation">(</span>&#39;login<span class="token punctuation">.</span>rules<span class="token operator">-</span>validate<span class="token operator">-</span>code&#39;<span class="token punctuation">)</span><span class="token punctuation">,</span>
            trigger<span class="token operator">:</span> <span class="token char">&#39;blur&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在国际化文件(i18n/locals/zh-cn/login.js)中添加提示信息：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>&#39;rules-validate-code&#39;<span class="token operator">:</span> &#39;验证码不能为空&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="api-login-js" tabindex="-1"><a class="header-anchor" href="#api-login-js" aria-hidden="true">#</a> api/login.js</h4><p>在api/login.js中添加请求后端获取验证码接口方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 获取验证码</span>
export <span class="token keyword">const</span> <span class="token class-name">GetValidateCode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    url<span class="token operator">:</span> <span class="token string">&quot;/admin/system/index/generateValidateCode&quot;</span><span class="token punctuation">,</span>
    method<span class="token operator">:</span> <span class="token char">&#39;get&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="onmounted" tabindex="-1"><a class="header-anchor" href="#onmounted" aria-hidden="true">#</a> onMounted</h4><p>在首页中使用vue的onMounted钩子函数发送请求获取图片验证码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> onMounted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Login <span class="token punctuation">,</span> GetValidateCode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/api/login&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// onMounted钩子函数</span>
    <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      state<span class="token punctuation">.</span><span class="token function">refreshCaptcha</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">userName</span><span class="token operator">:</span> <span class="token string">&#39;admin&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;111111&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">captcha</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>      <span class="token comment">// 用户输入的验证码</span>
        <span class="token literal-property property">codeKey</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>       <span class="token comment">// 后端返回的验证码key</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">captchaSrc</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">,</span>
      <span class="token function-variable function">refreshCaptcha</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">GetValidateCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
          state<span class="token punctuation">.</span>model<span class="token punctuation">.</span>codeKey <span class="token operator">=</span> data<span class="token punctuation">.</span>codeKey
          state<span class="token punctuation">.</span>captchaSrc <span class="token operator">=</span> data<span class="token punctuation">.</span>codeValue
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span><span class="token function">toRefs</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-5-校验验证码" tabindex="-1"><a class="header-anchor" href="#_3-5-校验验证码" aria-hidden="true">#</a> 3.5 校验验证码</h2><p>对之前的登录方法进行修改，添加校验验证码的逻辑代码。</p><p>步骤：</p><p>1、实体类修改</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// com.atguigu.spzx.model.dto.system</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginDto</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> userName <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> captcha <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> codeKey <span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、SysUserServiceImpl登录方法修改</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// com.atguigu.spzx.manager.service.impl.SysUserServiceImpl#login</span>
<span class="token comment">// 校验验证码是否正确</span>
<span class="token class-name">String</span> captcha <span class="token operator">=</span> loginDto<span class="token punctuation">.</span><span class="token function">getCaptcha</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 用户输入的验证码</span>
<span class="token class-name">String</span> codeKey <span class="token operator">=</span> loginDto<span class="token punctuation">.</span><span class="token function">getCodeKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// redis中验证码的数据key</span>

<span class="token comment">// 从Redis中获取验证码</span>
<span class="token class-name">String</span> redisCode <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;user:login:validatecode:&quot;</span> <span class="token operator">+</span> codeKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>redisCode<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>redisCode <span class="token punctuation">,</span> captcha<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">GuiguException</span><span class="token punctuation">(</span><span class="token class-name">ResultCodeEnum</span><span class="token punctuation">.</span><span class="token constant">VALIDATECODE_ERROR</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 验证通过删除redis中的验证码</span>
redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&quot;user:login:validatecode:&quot;</span> <span class="token operator">+</span> codeKey<span class="token punctuation">)</span> <span class="token punctuation">;</span>

<span class="token comment">// ResultCodeEnum类添加如下枚举项</span>
<span class="token function">VALIDATECODE_ERROR</span><span class="token punctuation">(</span><span class="token number">202</span> <span class="token punctuation">,</span> <span class="token string">&quot;验证码错误&quot;</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_4-获取用户信息接口" tabindex="-1"><a class="header-anchor" href="#_4-获取用户信息接口" aria-hidden="true">#</a> 4 获取用户信息接口</h1><h2 id="_4-1-前端源码分析" tabindex="-1"><a class="header-anchor" href="#_4-1-前端源码分析" aria-hidden="true">#</a> 4.1 前端源码分析</h2><p>需求说明：当登录成功以后，那么此时会调用后端接口获取登录成功以后的用户信息，然后在首页面展示</p><p>前置路由守卫：在当前的系统中提供了前置路由守卫，在该前置路由守卫中会调用后端服务器端口获取用户信息。</p><h3 id="_4-1-1-请求发送分析" tabindex="-1"><a class="header-anchor" href="#_4-1-1-请求发送分析" aria-hidden="true">#</a> 4.1.1 请求发送分析</h3><p>前置路由守卫的配置在permission.js，该文件以及被main.js引入。因此查看源码以当前js为入口进行分析：</p><p><strong>permission.js</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vue-router4的路由守卫不再是通过next放行，而是通过return返回true或false或者一个路由地址</span>
router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">to</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>window<span class="token punctuation">.</span>localStorage<span class="token punctuation">[</span><span class="token constant">TOKEN</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 如果token不存在，此时跳转到登录页面</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;login&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">redirect</span><span class="token operator">:</span> to<span class="token punctuation">.</span>fullPath<span class="token punctuation">,</span> <span class="token comment">// redirect是指登录之后可以跳回到redirect指定的页面</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">replace</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>		<span class="token comment">// token存在</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> userinfo<span class="token punctuation">,</span> getUserinfo <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>		<span class="token comment">// 从pinia的用于账户模块解析出userinfo，getUserInfo方法</span>
    <span class="token comment">// 获取用户角色信息，根据角色判断权限</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>userinfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取用户信息</span>
        <span class="token keyword">await</span> <span class="token function">getUserinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>		<span class="token comment">// 调用getUserInfo方法获取用户数据</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        loadingInstance<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> to<span class="token punctuation">.</span>fullPath
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>pinia/modules/account.js</strong>源码分析</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> GetUserinfo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/api/login&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> useAccount <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;account&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">userinfo</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>     <span class="token comment">// pinia账户模块存储的用户信息</span>
    <span class="token literal-property property">permissionList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 清除用户信息</span>
    <span class="token function">clearUserinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>userinfo <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 获取用户信息</span>
    <span class="token keyword">async</span> <span class="token function">getUserinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> code<span class="token punctuation">,</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">GetUserinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 调用/api/login.js中的GetUserinfo方法，请求后端接口</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">+</span>code <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>userinfo <span class="token operator">=</span> data
        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>api/login.js</strong>源码分析：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取登录用户信息</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">GetUserinfo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/api/userinfo&#39;</span><span class="token punctuation">,</span>		<span class="token comment">// 请求后端的接口地址，后期需要将其更改为</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-1-2-用户信息使用" tabindex="-1"><a class="header-anchor" href="#_3-1-2-用户信息使用" aria-hidden="true">#</a> 3.1.2 用户信息使用</h3><p>获取到当前登录成功以后的用户信息，将用户信息存储到Pinia的account模块中以后，该用户信息会在首页的进行使用。首页布局分析，以及对应的组</p><p>件说明：</p><p><img src="`+d+'" alt="image-20230507222619897"></p><p>涉及到的核心组件关系说明：</p><p><img src="'+k+`" alt="image-20230507223950676"></p><p>layout/components/Topbar/Userinfo.vue组件源码分析：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>el<span class="token operator">-</span>dropdown trigger<span class="token operator">=</span><span class="token string">&quot;hover&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;userinfo&quot;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>template v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>img <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;avatar&quot;</span> <span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">&quot;userinfo.avatar&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 从user对象中获取avatar属性值 <span class="token operator">--</span><span class="token operator">&gt;</span>
        <span class="token punctuation">{</span><span class="token punctuation">{</span> userinfo<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 从user对象中获取name属性值 <span class="token operator">--</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>dropdown<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useUserinfo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/components/Avatar/hooks/useUserinfo&#39;</span>  <span class="token comment">// 导入该目录下useUserinfo.文件</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> userinfo <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useUserinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 调用导入的js文件中的useUserinfo方法，从Pinia中获取用户数据 </span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      userinfo<span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过源码查询得出结论：后端返回的数据中需要至少包含两个属性：avatar【用户头像的url】、name【用户名】</p><h3 id="_3-1-3-token传递" tabindex="-1"><a class="header-anchor" href="#_3-1-3-token传递" aria-hidden="true">#</a> 3.1.3 token传递</h3><p>当登录成功以后，后端会给前端返回token数据。前端会将token数据存储到Pinia的app模块中。并且会将token数据保存到localStorage中。当再次请</p><p>求获取登录用户信息接口的时候，就需要将token传递到后端。</p><p>token的传递是通过axios的请求前置拦截器进行完成的，源码如下所示：utils/request.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 拦截请求</span>
service<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
  <span class="token parameter">config</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> authorization <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 从Pinia的app模块中获取登录成功以后的用户数据</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>authorization<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
      <span class="token comment">// 添加一个请求头Authorization ， 该请求头所对应的值为：Bearer token数据</span>
      config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>authorization<span class="token punctuation">.</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
      
      <span class="token comment">// 上传传递方式后端解析太麻烦，因此可以更改传递token方式为如下方式</span>
      <span class="token comment">// config.headers.token = \`\${authorization.token}\`</span>
      
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> config
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// console.log(error);</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-2-后端接口" tabindex="-1"><a class="header-anchor" href="#_4-2-后端接口" aria-hidden="true">#</a> 4.2 后端接口</h2><h3 id="_4-2-1-indexcontroller" tabindex="-1"><a class="header-anchor" href="#_4-2-1-indexcontroller" aria-hidden="true">#</a> 4.2.1 IndexController</h3><p>IndexController中添加如下接口方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/getUserInfo&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUser</span><span class="token punctuation">&gt;</span></span> <span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;token&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">SysUser</span> sysUser <span class="token operator">=</span> sysUserService<span class="token punctuation">.</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>sysUser <span class="token punctuation">,</span> <span class="token class-name">ResultCodeEnum</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-2-sysuserservice" tabindex="-1"><a class="header-anchor" href="#_4-2-2-sysuserservice" aria-hidden="true">#</a> 4.2.2 SysUserService</h3><p>SysUserService添加根据token获取用户数据接口方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// com.atguigu.spzx.manager.service.impl.SysUserServiceImpl</span>
<span class="token keyword">public</span> <span class="token class-name">SysUser</span> <span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> userJson <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;user:login:&quot;</span> <span class="token operator">+</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>userJson <span class="token punctuation">,</span> <span class="token class-name">SysUser</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-3-前端接入" tabindex="-1"><a class="header-anchor" href="#_4-3-前端接入" aria-hidden="true">#</a> 4.3 前端接入</h2><p>更改前端发送请求的接口地址：api/login.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取登录用户信息</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">GetUserinfo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/admin/system/index/getUserInfo&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_4-进入首页" tabindex="-1"><a class="header-anchor" href="#_4-进入首页" aria-hidden="true">#</a> 4 进入首页</h1><p>获取登录用户信息的接口开发完毕以后，此时还是无法进入到首页。因为在前置路由守卫中还存一段代码是获取当前登录用户的菜单信息，源码如下所</p><p>示：permission.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 生成菜单（如果你的项目有动态菜单，在此处会添加动态路由）</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> menus<span class="token punctuation">,</span> generateMenus <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMenus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>menus<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">await</span> <span class="token function">generateMenus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> to<span class="token punctuation">.</span>fullPath <span class="token comment">// 添加动态路由后，必须加这一句触发重定向，否则会404</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        loadingInstance<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当前先不做动态菜单的功能，因此需要把获取动态菜单的代码注释掉：pinia/modules/menu.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">generateMenus</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    
    <span class="token comment">// // 方式一：只有固定菜单</span>
    <span class="token keyword">const</span> menus <span class="token operator">=</span> <span class="token function">getFilterMenus</span><span class="token punctuation">(</span>fixedRoutes<span class="token punctuation">)</span>
    <span class="token function">setMenus</span><span class="token punctuation">(</span>menus<span class="token punctuation">)</span>

    <span class="token comment">// 方式二：有动态菜单</span>
    <span class="token comment">// 从后台获取菜单</span>
    <span class="token comment">// const { code, data } = await GetMenus()</span>

    <span class="token comment">// if (+code === 200) {</span>
    <span class="token comment">//   // 添加路由之前先删除所有动态路由</span>
    <span class="token comment">//   asyncRoutes.forEach(item =&gt; {</span>
    <span class="token comment">//     router.removeRoute(item.name)</span>
    <span class="token comment">//   })</span>
    <span class="token comment">//   // 过滤出需要添加的动态路由</span>
    <span class="token comment">//   const filterRoutes = getFilterRoutes(asyncRoutes, data)</span>
    <span class="token comment">//   filterRoutes.forEach(route =&gt; router.addRoute(route))</span>

    <span class="token comment">//   // 生成菜单</span>
    <span class="token comment">//   const menus = getFilterMenus([...fixedRoutes, ...filterRoutes])</span>
    <span class="token comment">//   setMenus(menus)</span>
    <span class="token comment">// }</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_5-退出功能" tabindex="-1"><a class="header-anchor" href="#_5-退出功能" aria-hidden="true">#</a> 5 退出功能</h1><h2 id="_5-1-需求分析" tabindex="-1"><a class="header-anchor" href="#_5-1-需求分析" aria-hidden="true">#</a> 5.1 需求分析</h2><p>需求：用户在首页点击退出按钮，那么此时请求后端接口完成退出</p><p>实现思路：</p><p>1、后端根据token从Redis中删除用户数据</p><p>2、前端清空Pinia中保存的用户数据、从localStorage中删除用户token</p><p>前端删除数据的代码以及实现：layout\\Topbar\\Userinfo.vue</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 退出</span>
<span class="token keyword">const</span> logout <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 清除token</span>
    <span class="token function">useApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clearToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token char">&#39;/login&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-2-代码实现" tabindex="-1"><a class="header-anchor" href="#_5-2-代码实现" aria-hidden="true">#</a> 5.2 代码实现</h2><h3 id="_5-2-1-后端接口" tabindex="-1"><a class="header-anchor" href="#_5-2-1-后端接口" aria-hidden="true">#</a> 5.2.1 后端接口</h3><h4 id="indexcontroller" tabindex="-1"><a class="header-anchor" href="#indexcontroller" aria-hidden="true">#</a> IndexController</h4><p>在IndexController中添加接口方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/logout&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;token&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sysUserService<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token punctuation">,</span> <span class="token class-name">ResultCodeEnum</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sysuserservice" tabindex="-1"><a class="header-anchor" href="#sysuserservice" aria-hidden="true">#</a> SysUserService</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&quot;user:login:&quot;</span> <span class="token operator">+</span> token<span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-2-前端接入" tabindex="-1"><a class="header-anchor" href="#_5-2-2-前端接入" aria-hidden="true">#</a> 5.2.2 前端接入</h3><h4 id="login-js" tabindex="-1"><a class="header-anchor" href="#login-js" aria-hidden="true">#</a> login.js</h4><p>在src\\api\\login.js文件中添加如下代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 退出功能</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Logout</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/admin/system/index/logout&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="userinfo-vue" tabindex="-1"><a class="header-anchor" href="#userinfo-vue" aria-hidden="true">#</a> Userinfo.vue</h4><p>修改layout\\Topbar\\Userinfo.vue的退出方法代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent <span class="token punctuation">,</span> getCurrentInstance<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Logout <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/api/login&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">proxy</span><span class="token operator">:</span> ctx <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 可以把ctx当成vue2中的this</span>
        
        <span class="token comment">// 退出</span>
        <span class="token keyword">const</span> <span class="token function-variable function">logout</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> <span class="token punctuation">{</span> code <span class="token punctuation">,</span>  data <span class="token punctuation">,</span> message <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">Logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 清除token</span>
                <span class="token function">useApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clearToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
                ctx<span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            userinfo<span class="token punctuation">,</span>
            logout<span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,206),b=[m];function g(h,y){return s(),a("div",null,b)}const w=n(v,[["render",g],["__file","day03课件.html.vue"]]);export{w as default};
