import{_ as n,o as a,c as s,e as t}from"./app-8007fa1b.js";const e="/assets/notepad设置1-8e3116c4.png",p="/assets/notepad设置2-0c2ce9ec.png",o={},c=t(`<h2 id="java语言概述" tabindex="-1"><a class="header-anchor" href="#java语言概述" aria-hidden="true">#</a> Java语言概述</h2><h3 id="_1-单位换算" tabindex="-1"><a class="header-anchor" href="#_1-单位换算" aria-hidden="true">#</a> 1. 单位换算</h3><blockquote><p>1TB = 1024GB</p><p>1GB = 1024MB</p><p>1MB = 1024KB</p><p>1KB = 1024Byte(字节)</p><p>1Byte = 8bit(位)</p><p>1字节占8位 位是计算机最小的存储单位 即表示每一位只能存储一个0 或者 一个1</p></blockquote><h3 id="_2-dos命令" tabindex="-1"><a class="header-anchor" href="#_2-dos命令" aria-hidden="true">#</a> 2.DOS命令</h3><blockquote><p>DOS : Disk Operation System 磁盘操作系统 其实就是用于直接操作系统磁盘文件的一种命令 可以直接通过DOS命令操作磁盘上的文件。</p></blockquote><h3 id="_3-名词解释" tabindex="-1"><a class="header-anchor" href="#_3-名词解释" aria-hidden="true">#</a> 3. 名词解释</h3><blockquote><p><strong>JVM</strong>（Java Virtual Machine ）：Java虚拟机，简称JVM，是运行所有Java程序的假想计算机，是Java程序的运行环境之一，也是Java 最具吸引力的特性之一。我们编写的Java代码，都运行在<strong>JVM</strong> 之上。</p><p><strong><code>JVM相当于一个软件，用于在不同的平台模拟相同的环境，以实现跨平台</code></strong></p><p><strong>JRE</strong> (Java Runtime Environment) ：是Java程序的运行时环境，包含<code>JVM</code> 和运行时所需要的<code>核心类库</code>。</p><p><strong>JDK</strong> (Java Development Kit)：是Java程序开发工具包，包含<code>JRE</code> 和开发人员使用的工具。</p><p><strong><code>JDK包含JRE JRE包含JVM 所以我们只需要安装JDK即可</code></strong></p></blockquote><h3 id="_4-java跨平台原理" tabindex="-1"><a class="header-anchor" href="#_4-java跨平台原理" aria-hidden="true">#</a> 4. Java跨平台原理</h3><blockquote><p>Java跨平台的原理是JVM Java虚拟机 不同的平台(操作系统)有不同版本的虚拟机。</p></blockquote><h3 id="_5-安装jdk" tabindex="-1"><a class="header-anchor" href="#_5-安装jdk" aria-hidden="true">#</a> 5. 安装JDK</h3><blockquote><p>所有选项全部下一步 默认安装在 C盘 Program Files 文件夹下</p><p><code>C:\\Program Files\\Java</code></p></blockquote><h3 id="_6-配置环境变量" tabindex="-1"><a class="header-anchor" href="#_6-配置环境变量" aria-hidden="true">#</a> 6.配置环境变量</h3><blockquote><p>右键此电脑---》属性---》高级系统设置---》高级---》环境变量</p><p>系统变量---》新建环境变量</p><p>名：JAVA_HOME</p><p>值：安装JDK根目录 C:\\Program Files\\Java\\jdk1.8.0_131</p><p>选择Path变量编辑---》新建----》直接写值为： %JAVA_HOME%\\bin</p></blockquote><h3 id="_7-测试环境变量" tabindex="-1"><a class="header-anchor" href="#_7-测试环境变量" aria-hidden="true">#</a> 7. 测试环境变量</h3><blockquote><p>徽标 +R 输入 CMD</p><p>在DOS命令窗口中输入</p><p>java -version</p><p>javac -version</p><p>以上两个命令都出现版本号表示配置成功</p></blockquote><h3 id="_8-配置环境变量相关问题" tabindex="-1"><a class="header-anchor" href="#_8-配置环境变量相关问题" aria-hidden="true">#</a> 8. 配置环境变量相关问题</h3><blockquote><p>1.为什么要配置环境变量(配置环境变量的作用)？</p><p>配置环境变量相当于将我们安装JDK目录的bin目录这个路径 通知给操作系统 表示可以去此目录下查找我们输</p><p>入的相关的命令 比如 java javac等等 如果不配置环境变量 这些位于bin目录下的命令将无法直接使用</p><p>2.为什么要配置JAVA_HOME</p><p>如果不配置JAVA_HOME直接在Path变量中写上JDK目录下的bin目录绝对路径 也是可以使用的</p><p>但是推荐配置JAVA_HOME 因为后续我们学习相关的软件 以及业界的规范 统一都识别 JAVA_HOME 所以我们还是要配置JAVA_HOME</p><p>3.classpath是什么 以及 为什么不配置classpath</p><p>classpath表示类路径 作用为指定类加载器加载类所对应的路径</p><p>从JDK1.5开始不需要人为的配置类路径 JDK有默认设置</p><p><code>如果你配置了类路径 一定要删掉 </code></p></blockquote><h3 id="_9-第一个java程序" tabindex="-1"><a class="header-anchor" href="#_9-第一个java程序" aria-hidden="true">#</a> 9. 第一个Java程序</h3><blockquote><p>1.新建文本文件 注意 将后缀名展示出来 默认是不展示的</p><p>2.将文件的扩展名改为 .java 会有提示改变扩展名会导致文件不可用…… 点击是</p><p>波浪键 英文模式下 按三下 + 对应语言名称 呼出对应语言编辑框</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello world java0522&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>public 公开的</p><p>class 类</p><p>static 静态的</p><p>void 空的 无效的</p><p>main 主要的</p><p>String 字符串</p><p>args arguments 参数 复数</p><p>System 系统</p><p>out 出</p><p>print 打印</p></blockquote><h3 id="_10-编写java程序注意事项" tabindex="-1"><a class="header-anchor" href="#_10-编写java程序注意事项" aria-hidden="true">#</a> 10. 编写Java程序注意事项</h3><blockquote><p>1.严格区分大小写</p><p>2.所有的括号成对出现</p><p>3.所有的标点符号都是英文的</p><p>4.注意合适的缩进(每遇到一个大括号另起一行 并且缩进一个tab键的距离)</p><p>5.public修饰的类 称之为公开类 要求类名必须与文件名保持一致</p><p><strong><code>main方法有固定的格式，千万不要写错，否则将无法正确执行</code></strong></p><p><strong><code>public static void main(String [] args){}</code></strong></p></blockquote><h3 id="_11-类的阐述" tabindex="-1"><a class="header-anchor" href="#_11-类的阐述" aria-hidden="true">#</a> 11. 类的阐述</h3><blockquote><p>同一个源文件中可以定义多个类。</p><p>编译后，每个类都会生成独立的 .class文件。</p><p>一个类中，只能有一个main方法，每个类都可以有自己的main方法</p><p>public修饰的类称为公开类，要求类名必须与文件名称完全相同，包括大小写。</p><p>一个源文件中，只能有一个公开类。</p></blockquote><h3 id="_12-notepad设置" tabindex="-1"><a class="header-anchor" href="#_12-notepad设置" aria-hidden="true">#</a> 12. Notepad设置</h3><p><img src="`+e+'" alt=""></p><p><img src="'+p+`" alt=""></p><h3 id="_13-关于记事本乱码问题" tabindex="-1"><a class="header-anchor" href="#_13-关于记事本乱码问题" aria-hidden="true">#</a> 13.关于记事本乱码问题</h3><blockquote><p>1.乱码产生的原因</p><p>因为记事本默认编码格式为UTF-8 而JVM文件默认编码格式为GBK 因为编码格式不统一导致的</p><p>2.解决方案</p><p>将记事本文件编码格式改为GBK即可</p><p>3.常见编码</p><p>UTF-8 万国码 记录了世界上大多数国家的语言</p><p>GB2312 国标标准版 记录了绝大多数中文 简体</p><p>GBK 国标扩展版 记录了绝大多数中文 简体 以及 繁体</p><p>ANSI 在不同的操作系统表示不同的编码 在中文操作系统表示GBK</p></blockquote><h3 id="_14-关键字" tabindex="-1"><a class="header-anchor" href="#_14-关键字" aria-hidden="true">#</a> 14. 关键字</h3><p><strong>关键字</strong>：Java语言中，被赋予特殊含义和用途的单词。</p><ul><li>HelloWorld案例中，出现的关键字有 <code>public </code> 、<code>class</code> 、 <code>static</code> 、 <code>void</code> 等，这些单词已经被Java定义好</li><li>关键字的特点：全部都是<code>小写字母</code>。</li><li>关键字比较多，不需要死记硬背，学到哪里记到哪里即可。</li></ul><h3 id="_15-注释" tabindex="-1"><a class="header-anchor" href="#_15-注释" aria-hidden="true">#</a> 15. 注释</h3><blockquote><p>单行注释</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token comment">// 单行注释 </span>
		<span class="token comment">// 以下代码用于打印输出两句话</span>
		<span class="token comment">// 我们可以使用println() 这个方法实现打印完之后换行  ln 为line的缩写 </span>
		<span class="token comment">// print()方法是没有换行效果的</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello world 世界你好1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在这里做解释说明</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello world 世界你好2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>多行注释</p><p>连续两次回车将跳出绿色背景编辑框</p><p>ctrl + 回车 将空一行</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token comment">/*
			多行注释
			吟诗一首
			床前明月光
			……
		*/</span>
		
		<span class="token comment">/*
			以下四条语句用于打印四次 hello world
		*/</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello world1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello world2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello world3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello world4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>文档注释 通常用来说明 某个类 或者 某个方法的作用</p><p>doc -- document 文档</p><p>命令： javadoc -d . 文件名.java</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 *	此类用于讲解文档注释 
 *  文档注释通常用来说明 某个类 或者 某个方法的作用
 *
 * 	API Application Programming Interface 应用程序接口 （帮助文档-使用说明书）
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test3</span><span class="token punctuation">{</span>
	
	<span class="token doc-comment comment">/**
	 *	main方法为程序的入口 有固定的格式 不能写错 
	 *  否则将无法执行 
	 */</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token comment">// 单行注释</span>
		
		<span class="token comment">/*
			多行注释
		*/</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello world 文档注释&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,40),i=[c];function l(u,d){return a(),s("div",null,i)}const k=n(o,[["render",l],["__file","day01 Java语言概述.html.vue"]]);export{k as default};
