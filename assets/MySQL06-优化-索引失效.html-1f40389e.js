import{_ as n,o as s,c as a,e}from"./app-8007fa1b.js";const p="/assets/image-20230620092010972-a20fec93.png",t="/assets/image-20230620092110251-507d378b.png",o="/assets/image-20230620092319354-6841d2f6.png",c="/assets/image-20230620092439215-51ecff12.png",l="/assets/image-20230620092927299-3b36c98f.png",i="/assets/image-20230620093124745-bb3d7e2d.png",d="/assets/image-20230620094648319-61fefc87.png",r="/assets/image-20230620100809929-141af367.png",k={},u=e(`<h1 id="一、数据准备" tabindex="-1"><a class="header-anchor" href="#一、数据准备" aria-hidden="true">#</a> 一、数据准备</h1><h2 id="_1、表结构说明" tabindex="-1"><a class="header-anchor" href="#_1、表结构说明" aria-hidden="true">#</a> 1、表结构说明</h2><p>在做优化之前，要准备大量数据。接下来创建两张表，并往员工表里插入50W数据，部门表中插入1W条数据。 怎么快速插入50w条数据呢?</p><p>1、使用jdbc程序</p><p>2、使用存储过程</p><p>怎么保证插入的数据不重复? 函数</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>dept<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>deptName<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>		<span class="token comment">-- 随机字符串，允许重复</span>
  <span class="token identifier"><span class="token punctuation">\`</span>address<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>		<span class="token comment">-- 随机字符串，允许重复</span>
  ceo <span class="token keyword">INT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>							<span class="token comment">-- 1-50w之间的任意数字</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>emp<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>empno<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>					<span class="token comment">-- 可以使用随机数字，或者从1开始的自增数字，不允许重复</span>
  <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  		<span class="token comment">-- 随机生成，允许姓名重复</span>
  <span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>				<span class="token comment">-- 区间随机数</span>
  <span class="token identifier"><span class="token punctuation">\`</span>deptId<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>			<span class="token comment">-- 1-1w之间随机数</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
  <span class="token comment">#CONSTRAINT \`fk_dept_id\` FOREIGN KEY (\`deptId\`) REFERENCES \`t_dept\` (\`id\`)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结： 需要产生随机字符串和区间随机数的函数。</p><h2 id="_2、随机函数" tabindex="-1"><a class="header-anchor" href="#_2、随机函数" aria-hidden="true">#</a> 2、随机函数</h2><p>在MySQL中提供了很多的随机数函数，如下所示：</p><p>1、rand()：rand()函数返回一个0到1之间的随机浮点数。</p><p>2、rand(n)：rand(n)函数接受一个种子值n，并返回一个0到1之间的随机浮点数。当使用相同的种子值n时，rand(n)将会生成相同的随机数序列。</p><p>3、uuid()：uuid()函数用于生成一个通用唯一标识符（Universally Unique Identifier），也就是一个随机的字符串。</p><p>使用方式如下所示：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> RAND<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 				<span class="token comment">-- 返回一个0到1之间的随机浮点数</span>
<span class="token keyword">SELECT</span> FLOOR<span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token comment">-- 返回一个0到9之间的随机整数</span>
<span class="token keyword">SELECT</span> UUID<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 				<span class="token comment">-- 返回一个随机的唯一标识符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义生成随机数的函数：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查看mysql是否允许创建函数：</span>
<span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">&#39;log_bin_trust_function_creators&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> log_bin_trust_function_creators<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> 				<span class="token comment">-- 命令开启：允许创建函数设置：（global-所有session都生效）</span>

<span class="token comment">-- 随机产生字符串</span>
<span class="token keyword">DELIMITER</span> $$  <span class="token comment">-- 将分隔符设置为&quot;$$&quot;，以便在自定义函数中使用多个语句。</span>
<span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> rand_string<span class="token punctuation">(</span>n <span class="token keyword">INT</span><span class="token punctuation">)</span> <span class="token keyword">RETURNS</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>  <span class="token comment">-- n表示的随机字符串的长度 </span>
<span class="token keyword">BEGIN</span>    
  <span class="token keyword">DECLARE</span> chars_str <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;abcdefghijklmnopqrstuvwxyzABCDEFJHIJKLMNOPQRSTUVWXYZ&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">DECLARE</span> return_str <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">DECLARE</span> i <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">WHILE</span> i <span class="token operator">&lt;</span> n <span class="token keyword">DO</span>  
    <span class="token keyword">SET</span> return_str <span class="token operator">=</span> CONCAT<span class="token punctuation">(</span>return_str<span class="token punctuation">,</span>SUBSTRING<span class="token punctuation">(</span>chars_str<span class="token punctuation">,</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">SET</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span>
  <span class="token keyword">RETURN</span> return_str<span class="token punctuation">;</span>
<span class="token keyword">END</span> $$

<span class="token comment">-- 假如要删除</span>
<span class="token comment">-- drop function rand_string;</span>


<span class="token comment">-- 用于随机产生区间数字</span>
<span class="token keyword">DELIMITER</span> $$
<span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> rand_num <span class="token punctuation">(</span>from_num <span class="token keyword">INT</span> <span class="token punctuation">,</span>to_num <span class="token keyword">INT</span><span class="token punctuation">)</span> <span class="token keyword">RETURNS</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>   
 <span class="token keyword">DECLARE</span> i <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span>  
 <span class="token keyword">SET</span> i <span class="token operator">=</span> FLOOR<span class="token punctuation">(</span>from_num <span class="token operator">+</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>to_num <span class="token operator">-</span> from_num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">RETURN</span> i<span class="token punctuation">;</span>  
<span class="token keyword">END</span>$$

<span class="token comment">-- 假如要删除</span>
<span class="token comment">-- drop function rand_num;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、存储过程" tabindex="-1"><a class="header-anchor" href="#_3、存储过程" aria-hidden="true">#</a> 3、存储过程</h2><h3 id="_1存储过程简介" tabindex="-1"><a class="header-anchor" href="#_1存储过程简介" aria-hidden="true">#</a> ①存储过程简介</h3><p>存储过程（Stored Procedure）是一组<strong>预编译的SQL语句集合</strong>，它们被命名并存储在数据库中，可以像调用函数一样被应用程序或其他存储过程调</p><p>用。存储过程通常用于<strong>执行特定的业务逻辑操作</strong>，并且可以接受参数、返回结果。</p><p>存储过程具有以下特点：</p><p>1、封装性：存储过程将一系列SQL语句封装在一个单独的代码块中，使得这些SQL语句可以作为一个整体进行管理和调用。</p><p>2、可重用性：存储过程可以被多个应用程序或其他存储过程调用，提高了代码的复用性。</p><p>3、安全性：存储过程可以设置访问权限，只允许授权用户或角色执行，从而保护数据的安全性。</p><p>4、性能优化：存储过程在数据库服务器端执行，减少了网络传输开销，提高了查询性能。</p><p>存储过程可以完成复杂的业务逻辑，包括数据处理、事务管理、错误处理等。它们还可以通过输入参数和输出参数与应用程序进行交互，实现更灵活</p><p>和可定制的数据操作。</p><h3 id="_2创建存储过程" tabindex="-1"><a class="header-anchor" href="#_2创建存储过程" aria-hidden="true">#</a> ②创建存储过程</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 插入员工数据</span>
<span class="token keyword">DELIMITER</span> $$			<span class="token comment">-- 将分隔符设置为&quot;$$&quot;，以便在存储过程中使用多个语句。</span>
<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> insert_emp<span class="token punctuation">(</span><span class="token keyword">START</span> <span class="token keyword">INT</span><span class="token punctuation">,</span> max_num <span class="token keyword">INT</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>  
  <span class="token keyword">DECLARE</span> i <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span>   
  <span class="token keyword">SET</span> autocommit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">-- 将自动提交事务的选项设置为0，即关闭自动提交。</span>
  <span class="token keyword">REPEAT</span>  				<span class="token comment">-- REPEAT ... END REPEAT; ：开始一个循环，循环结束条件是\`i = max_num\`，每次循环\`i\`递增1。</span>
    <span class="token keyword">SET</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  
    <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp <span class="token punctuation">(</span>empno<span class="token punctuation">,</span> NAME<span class="token punctuation">,</span> age<span class="token punctuation">,</span> deptid <span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">START</span><span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token punctuation">,</span>rand_string<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rand_num<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rand_num<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    UNTIL i <span class="token operator">=</span> max_num  
  <span class="token keyword">END</span> <span class="token keyword">REPEAT</span><span class="token punctuation">;</span>  
  <span class="token keyword">COMMIT</span><span class="token punctuation">;</span>  
<span class="token keyword">END</span>$$
 
<span class="token comment">-- 删除</span>
<span class="token comment">-- drop PROCEDURE insert_emp;</span>


<span class="token comment">-- 插入部门数据</span>
<span class="token keyword">DELIMITER</span> $$
<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> insert_dept<span class="token punctuation">(</span>max_num <span class="token keyword">INT</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>  
  <span class="token keyword">DECLARE</span> i <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span>   
  <span class="token keyword">SET</span> autocommit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    
  <span class="token keyword">REPEAT</span>  
    <span class="token keyword">SET</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  
    <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> dept <span class="token punctuation">(</span> deptname<span class="token punctuation">,</span>address<span class="token punctuation">,</span>ceo <span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>rand_string<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>rand_string<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>rand_num<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">500000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    UNTIL i <span class="token operator">=</span> max_num  
  <span class="token keyword">END</span> <span class="token keyword">REPEAT</span><span class="token punctuation">;</span>  
  <span class="token keyword">COMMIT</span><span class="token punctuation">;</span>  
<span class="token keyword">END</span>$$
 
<span class="token comment">-- 删除</span>
<span class="token comment">-- DELIMITER ;</span>
<span class="token comment">-- drop PROCEDURE insert_dept;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3调用存储过程" tabindex="-1"><a class="header-anchor" href="#_3调用存储过程" aria-hidden="true">#</a> ③调用存储过程</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 执行存储过程，往dept表添加1万条数据</span>
<span class="token keyword">CALL</span> insert_dept<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token comment">-- 执行存储过程，往emp表添加50万条数据，编号从100000开始</span>
<span class="token keyword">CALL</span> insert_emp<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">,</span><span class="token number">500000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4开启sql执行时间的显示" tabindex="-1"><a class="header-anchor" href="#_4开启sql执行时间的显示" aria-hidden="true">#</a> ④开启SQL执行时间的显示</h3><p>为了方便后面的测试中随时查看SQL运行的时间，测试索引优化后的效果，我们开启profiling</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 显示sql语句执行时间</span>
<span class="token keyword">SET</span> profiling <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">SHOW</span> VARIABLES  <span class="token operator">LIKE</span> <span class="token string">&#39;%profiling%&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">SHOW</span> PROFILES<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="二、单表索引失效案例" tabindex="-1"><a class="header-anchor" href="#二、单表索引失效案例" aria-hidden="true">#</a> 二、单表索引失效案例</h1><p>MySQL中提高性能的一个最有效的方式是对数据表<strong>设计合理的索引</strong>。索引提供了高效访问数据的方法，并且加快查询的速度，因此索引对查询的速度</p><p>有着至关重要的影响。</p><p>我们创建索引后，用不用索引，最终是优化器说了算。<strong>优化器会基于开销选择索引，怎么开销小就怎么来</strong>。不是基于规则，也不是基于语义。</p><p>另外SQL语句是否使用索引，和数据库的版本、数据量、数据选择度（查询中选择的列数）运行环境都有关系。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建索引</span>
<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_name <span class="token keyword">ON</span> emp<span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1、计算、函数导致索引失效" tabindex="-1"><a class="header-anchor" href="#_1、计算、函数导致索引失效" aria-hidden="true">#</a> 1、计算、函数导致索引失效</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 显示查询分析</span>
<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span>name  <span class="token operator">LIKE</span> <span class="token string">&#39;abc%&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> <span class="token keyword">LEFT</span><span class="token punctuation">(</span>emp<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">;</span> <span class="token comment">-- 索引失效</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果如下所示：</p><p><img src="`+p+`" alt="image-20230620092010972"></p><h2 id="_2、like以-开头索引失效" tabindex="-1"><a class="header-anchor" href="#_2、like以-开头索引失效" aria-hidden="true">#</a> 2、LIKE以%开头索引失效</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">&#39;%ab%&#39;</span><span class="token punctuation">;</span> <span class="token comment">-- 索引失效</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行结果如下所示：</p><p><img src="`+t+`" alt="image-20230620092110251"></p><p>注意：Alibaba《Java开发手册》【强制】页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。</p><h2 id="_3、不等于-或者-索引失效" tabindex="-1"><a class="header-anchor" href="#_3、不等于-或者-索引失效" aria-hidden="true">#</a> 3、不等于(!= 或者&lt;&gt;)索引失效</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span> <span class="token punctuation">;</span>
<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span>name <span class="token operator">&lt;&gt;</span> <span class="token string">&#39;abc&#39;</span> <span class="token punctuation">;</span> <span class="token comment">-- 索引失效</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果如下所示：</p><p><img src="`+o+`" alt="image-20230620092319354"></p><h2 id="_4、is-not-null-和-is-null" tabindex="-1"><a class="header-anchor" href="#_4、is-not-null-和-is-null" aria-hidden="true">#</a> 4、IS NOT NULL 和 IS NULL</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span>name <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span>name <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span> <span class="token comment">-- 索引失效</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果如下所示：</p><p><img src="`+c+`" alt="image-20230620092439215"></p><p><strong>注意：</strong> 当数据库中的数据的<strong>索引列的NULL值达到比较高的比例的时候</strong>，即使在IS NOT NULL 的情况下 MySQL的查询优化器会选择使用索引，</p><p>此时<strong>type的值是range（范围查询）</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 将 id&gt;20000 的数据的 name 值改为 NULL</span>
<span class="token keyword">UPDATE</span> emp <span class="token keyword">SET</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token operator">=</span> <span class="token boolean">NULL</span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token operator">&gt;</span> <span class="token number">20000</span><span class="token punctuation">;</span>

<span class="token comment">-- 执行查询分析，可以发现 IS NOT NULL 使用了索引</span>
<span class="token comment">-- 具体多少条记录的值为NULL可以使索引在IS NOT NULL的情况下生效，由查询优化器的算法决定</span>
<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span>name <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果如下所示：</p><p><img src="`+l+'" alt="image-20230620092927299"></p><p><strong>测试完将name的值改回来</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> emp <span class="token keyword">SET</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token operator">=</span> rand_string<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token operator">&gt;</span> <span class="token number">20000</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_5、类型转换导致索引失效" tabindex="-1"><a class="header-anchor" href="#_5、类型转换导致索引失效" aria-hidden="true">#</a> 5、类型转换导致索引失效</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> name<span class="token operator">=</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">;</span> \n<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> name<span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">-- 索引失效</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果如下所示：</p><p><img src="'+i+`" alt="image-20230620093124745"></p><h2 id="_6、全索引匹配效率最高" tabindex="-1"><a class="header-anchor" href="#_6、全索引匹配效率最高" aria-hidden="true">#</a> 6、全索引匹配效率最高</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 删除之前在emp表上的创建的索引</span>
<span class="token keyword">drop</span> <span class="token keyword">index</span> idx_name <span class="token keyword">on</span> emp <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>问题</strong>： 为以下查询语句创建哪种索引效率最高</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查询分析</span>
<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">and</span> deptid <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">AND</span> emp<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;abcd&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 执行SQL</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">and</span> deptid <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">AND</span> emp<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;abcd&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 查看执行时间</span>
<span class="token keyword">SHOW</span> PROFILES<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>创建索引并重新执行以上测试：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建索引：分别创建以下三种索引的一种，并分别进行以上查询分析</span>
<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_age <span class="token keyword">ON</span> emp<span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_age_deptid <span class="token keyword">ON</span> emp<span class="token punctuation">(</span>age<span class="token punctuation">,</span>deptid<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_age_deptid_name <span class="token keyword">ON</span> emp<span class="token punctuation">(</span>age<span class="token punctuation">,</span>deptid<span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结论： 可以发现最高效的查询应用了联合索引idx_age_deptid_name</p><p><img src="`+d+`" alt="image-20230620094648319"></p><h2 id="_7、违背了最佳左前缀法则" tabindex="-1"><a class="header-anchor" href="#_7、违背了最佳左前缀法则" aria-hidden="true">#</a> 7、违背了最佳左前缀法则</h2><p><strong>准备：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 首先删除之前创建的索引</span>
<span class="token keyword">drop</span> <span class="token keyword">index</span> idx_age <span class="token keyword">ON</span> emp <span class="token punctuation">;</span>
<span class="token keyword">drop</span> <span class="token keyword">index</span> idx_age_deptid <span class="token keyword">ON</span> emp <span class="token punctuation">;</span>
<span class="token keyword">drop</span> <span class="token keyword">index</span> idx_age_deptid_name <span class="token keyword">ON</span> emp <span class="token punctuation">;</span>

<span class="token comment">-- 创建索引</span>
<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_age_deptid_name <span class="token keyword">ON</span> emp<span class="token punctuation">(</span>age<span class="token punctuation">,</span>deptid<span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>问题： 以下这些SQL语句能否命中idx_age_deptid_name 索引，可以匹配多少个索引字段</p><p><strong>测试：</strong></p><p>1、如果索引了多列，要遵守最左前缀法则。即查询<strong>从索引的最左前列开始并且不跳过索引中的列</strong>。</p><p>2、过滤条件要使用索引，必须按照<strong>索引建立时的顺序，依次满足</strong>，一旦跳过某个字段，索引后面的字段都无法被使用。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">30</span> <span class="token operator">AND</span> emp<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;abcd&#39;</span> <span class="token punctuation">;</span>
<span class="token comment">-- EXPLAIN结果：</span>
<span class="token comment">-- key_len：5 只使用了age索引</span>
<span class="token comment">-- 索引查找的顺序为 age、deptid、name，查询条件中不包含deptid，无法使用deptid和name索引</span>

<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span>deptid<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">AND</span> emp<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;abcd&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- EXPLAIN结果：</span>
<span class="token comment">-- type： ALL， 执行了全表扫描</span>
<span class="token comment">-- key_len： NULL， 索引失效</span>
<span class="token comment">-- 索引查找的顺序为 age、deptid、name，查询条件中不包含age，无法使用整个索引</span>

<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">AND</span> emp<span class="token punctuation">.</span>deptid<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">AND</span> emp<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;abcd&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- EXPLAIN结果：</span>
<span class="token comment">-- 索引查找的顺序为 age、deptid、name，匹配所有索引字段</span>

<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span>deptid<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">AND</span> emp<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;abcd&#39;</span> <span class="token operator">AND</span> emp<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
<span class="token comment">-- EXPLAIN结果：</span>
<span class="token comment">-- 索引查找的顺序为 age、deptid、name，匹配所有索引字段</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8、索引中范围条件右边的列失效" tabindex="-1"><a class="header-anchor" href="#_8、索引中范围条件右边的列失效" aria-hidden="true">#</a> 8、索引中范围条件右边的列失效</h2><p><strong>准备：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 首先删除之前创建的索引</span>
<span class="token keyword">drop</span> <span class="token keyword">index</span> idx_age_deptid_name <span class="token keyword">ON</span> emp <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>问题：为以下查询语句创建哪种索引效率最高</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">30</span> <span class="token operator">AND</span> emp<span class="token punctuation">.</span>deptId <span class="token operator">&gt;</span> <span class="token number">1000</span> <span class="token operator">AND</span> emp<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>测试1：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建索引并执行以上SQL语句的EXPLAIN</span>
<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_age_deptid_name <span class="token keyword">ON</span> emp<span class="token punctuation">(</span>age<span class="token punctuation">,</span>deptid<span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- key_len：10， 只是用了 age 和 deptid索引，name失效</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试2</strong>：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建索引并执行以上SQL语句的EXPLAIN（将deptid索引的放在最后）</span>
<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_age_name_deptid <span class="token keyword">ON</span> emp<span class="token punctuation">(</span>age<span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">,</span>deptid<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 使用了完整的索引</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果如下所示：</p><p><img src="`+r+'" alt="image-20230620100809929"></p><p>补充：以上两个索引都存在的时候，MySQL优化器会自动选择最好的方案</p>',97),m=[u];function v(b,E){return s(),a("div",null,m)}const w=n(k,[["render",v],["__file","MySQL06-优化-索引失效.html.vue"]]);export{w as default};
