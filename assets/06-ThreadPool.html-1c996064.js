import{_ as n,o as s,c as a,e}from"./app-8007fa1b.js";const t="/assets/img042-a8270059.png",p="/assets/img043-5e553449.png",o="/assets/img044-2569fd66.png",c="/assets/img045-7c0e6c55.png",i="/assets/img046-40d3a022.png",l="/assets/img047-b1429e88.png",u="/assets/img048-bf46926d.png",r="/assets/img049-efd7ab94.png",d="/assets/img050-90e8bec0.png",k="/assets/img051-1e43ca4f.png",m={},v=e(`<h1 id="一、概述" tabindex="-1"><a class="header-anchor" href="#一、概述" aria-hidden="true">#</a> 一、概述</h1><h2 id="_1、线程池的意义" tabindex="-1"><a class="header-anchor" href="#_1、线程池的意义" aria-hidden="true">#</a> 1、线程池的意义</h2><p>复用：让线程对象能够实现复用</p><ul><li>不必反复执行线程对象的创建</li><li>不必反复执行线程对象的GC回收</li></ul><p>管理：避免无度、过多创建线程对象</p><br><h2 id="_2、大致结构" tabindex="-1"><a class="header-anchor" href="#_2、大致结构" aria-hidden="true">#</a> 2、大致结构</h2><ul><li>等待队列：有现在来不及处理的任务，就存放到这个等待队列中，将来有空闲的线程就到这里提取任务执行</li><li>核心线程</li><li>非核心线程</li><li>拒绝策略</li></ul><br><h2 id="_3、创建线程池对象" tabindex="-1"><a class="header-anchor" href="#_3、创建线程池对象" aria-hidden="true">#</a> 3、创建线程池对象</h2><p>创建线程池对象不要使用 Executors 工具类，而应该自己创建 ThreadPoolExecutor 类的对象，使用它七个参数的构造器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>
                          <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>
                          <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>
                          <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span>
                          <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> workQueue<span class="token punctuation">,</span>
                          <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">,</span>
                          <span class="token class-name">RejectedExecutionHandler</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>corePoolSize <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>
        maximumPoolSize <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span>
        maximumPoolSize <span class="token operator">&lt;</span> corePoolSize <span class="token operator">||</span>
        keepAliveTime <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>workQueue <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> threadFactory <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> handler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>corePoolSize <span class="token operator">=</span> corePoolSize<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>maximumPoolSize <span class="token operator">=</span> maximumPoolSize<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>workQueue <span class="token operator">=</span> workQueue<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>keepAliveTime <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>keepAliveTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>threadFactory <span class="token operator">=</span> threadFactory<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="_4、七个参数各自的含义" tabindex="-1"><a class="header-anchor" href="#_4、七个参数各自的含义" aria-hidden="true">#</a> 4、七个参数各自的含义</h2><ul><li>int corePoolSize 核心线程的数量</li><li>int maximumPoolSize 最大线程数</li><li>long keepAliveTime 非核心线程的最大空闲时间的数量（核心线程之外的线程，这些线程对象空闲时间达到keepAliveTime指定的值就会被释放）</li><li>TimeUnit unit 非核心线程的最大空闲时间的单位</li><li>BlockingQueue&lt;Runnable&gt; workQueue 等待队列</li><li>ThreadFactory threadFactory 创建线程对象的工厂</li><li>RejectedExecutionHandler handler 某一个具体的拒绝策略</li></ul><h1 id="二、工作机制" tabindex="-1"><a class="header-anchor" href="#二、工作机制" aria-hidden="true">#</a> 二、工作机制</h1><p>重要的事情说三遍——以下重要！以下重要！以下重要！我们对照的模型就是去银行网点办理业务，如果窗口所有工作人员都在忙碌，我们需要等叫号。那么线程池中和这个模型一致的就按照生活中的经验来理解和记忆即可。有和生活中不一样的地方，会标【<strong>反直觉</strong>】，请大家留意！</p><p>❤【<strong>反直觉</strong>】刚创建线程池时，线程池中的线程数为零。<br></p><p><img src="`+t+'" alt="img.png"></p><br><p>❤当调用execute()方法添加一个请求任务时，线程池会做出如下判断：<br> ❤如果正在运行的线程数量小于corePoolSize，那么马上创建线程运行这个任务；<br></p><p><img src="'+p+'" alt="img.png"></p><br><p><img src="'+o+'" alt="img.png"></p><br><p>❤【反直觉】如果正在运行的线程数量大于或等于corePoolSize，那么将这个任务放入队列；<br></p><p><img src="'+c+'" alt="img.png"></p><br><p><img src="'+i+'" alt="img.png"></p><br><p>❤【反直觉】如果这个时候队列满了且正在运行的线程数量还小于maximumPoolSize，那么还是要创建非核心线程立刻运行这个新增的任务而不是等待时间最长的任务；<br></p><p><img src="'+l+'" alt="img.png"></p><br><p>❤如果队列满了且正在运行的线程数量大于或等于maximumPoolSize，那么线程池会启动饱和拒绝策略来执行。<br></p><p><img src="'+u+'" alt="img.png"></p><p>❤当一个线程完成任务时，它会从队列中取下一个任务来执行。<br></p><p><img src="'+r+'" alt="img.png"></p><br><p>❤当一个线程空闲的时间超过keepAliveTime时，线程池会判断：<br> ❤当前运行线程数大于corePoolSize：空闲时间超时线程会被停掉<br></p><p><img src="'+d+'" alt="img.png"></p><br><p>❤当前运行线程数小于等于corePoolSize：无动作（所以线程池的所有任务完成后，它最终会收缩到corePoolSize的大小。）<br></p><p><img src="'+k+`" alt="img.png"></p><br><h1 id="三、阻塞队列" tabindex="-1"><a class="header-anchor" href="#三、阻塞队列" aria-hidden="true">#</a> 三、阻塞队列</h1><h2 id="_1、顶层接口" tabindex="-1"><a class="header-anchor" href="#_1、顶层接口" aria-hidden="true">#</a> 1、顶层接口</h2><p>java.util.concurrent.BlockingQueue</p><h2 id="_2、主要特征" tabindex="-1"><a class="header-anchor" href="#_2、主要特征" aria-hidden="true">#</a> 2、主要特征</h2><ul><li>take()：在队列为空时，可以在阻塞状态中等待，直到队列中有了元素</li><li>put()：在队列满时，可以在阻塞状态中等待，直到队列中有了空位置</li></ul><h2 id="_3、体验" tabindex="-1"><a class="header-anchor" href="#_3、体验" aria-hidden="true">#</a> 3、体验</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1、指定阻塞队列的容量</span>
<span class="token keyword">int</span> capacity <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

<span class="token comment">// 2、创建阻塞队列</span>
<span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> breadShop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 3、调用 take() 方法查看阻塞状态</span>
<span class="token comment">// System.out.println(&quot;顾客前来购买面包：&quot;);</span>
<span class="token comment">// String bread = breadShop.take();</span>
<span class="token comment">// System.out.println(&quot;bread = &quot; + bread);</span>

<span class="token comment">// 4、给阻塞队列中添加元素</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;面包 1 烤好了~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
breadShop<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;bread01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;面包 2 烤好了~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
breadShop<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;bread02&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;面包 3 烤好了~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
breadShop<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;bread03&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 5、阻塞队列满了，调用 put() 方法查看阻塞状态</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;面包 4 烤好了~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
breadShop<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;bread04&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;面包 4 存入了~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="四、创建线程池并测试拒绝策略" tabindex="-1"><a class="header-anchor" href="#四、创建线程池并测试拒绝策略" aria-hidden="true">#</a> 四、创建线程池并测试拒绝策略</h1><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1、准备创建线程池所需的数据</span>
<span class="token comment">// 核心线程数</span>
<span class="token keyword">int</span> corePoolSize <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

<span class="token comment">// 最大线程数</span>
<span class="token keyword">int</span> maximumPoolSize <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

<span class="token comment">// 最大空闲时间的数量</span>
<span class="token keyword">long</span> keepAliveTime <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

<span class="token comment">// 最大空闲时间的单位</span>
<span class="token class-name">TimeUnit</span> unit <span class="token operator">=</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">;</span>

<span class="token comment">// 阻塞队列的容量</span>
<span class="token keyword">int</span> capacity <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

<span class="token comment">// 阻塞队列</span>
<span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> workQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建线程对象的工厂</span>
<span class="token class-name">ThreadFactory</span> threadFactory <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 指定一个具体的拒绝策略</span>
<span class="token comment">// AbortPolicy：任务满了之后，通过抛异常的方式表示拒绝</span>
<span class="token comment">// CallerRunsPolicy：任务满了之后，把新增的任务返还给调用者</span>
<span class="token comment">// DiscardPolicy：任务满了之后，随机丢弃某个任务</span>
<span class="token comment">// DiscardOldestPolicy：任务满了之后，丢弃等待时间最长的任务</span>
<span class="token class-name">RejectedExecutionHandler</span> handler <span class="token operator">=</span>
        <span class="token comment">// new ThreadPoolExecutor.AbortPolicy();</span>
        <span class="token comment">// new ThreadPoolExecutor.CallerRunsPolicy();</span>
        <span class="token comment">// new ThreadPoolExecutor.DiscardPolicy();</span>
        <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>DiscardOldestPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2、创建线程池对象</span>
<span class="token class-name">ThreadPoolExecutor</span> threadPoolExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>
        corePoolSize<span class="token punctuation">,</span>
        maximumPoolSize<span class="token punctuation">,</span>
        keepAliveTime<span class="token punctuation">,</span>
        unit<span class="token punctuation">,</span>
        workQueue<span class="token punctuation">,</span>
        threadFactory<span class="token punctuation">,</span>
        handler<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 3、给线程池分配任务</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    threadPoolExecutor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; is working ...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h1 id="五、开发时线程池参数设置的建议" tabindex="-1"><a class="header-anchor" href="#五、开发时线程池参数设置的建议" aria-hidden="true">#</a> 五、开发时线程池参数设置的建议</h1><ul><li>核心线程数和最大线程数设置成一样的，避免非核心线程反复创建、释放</li><li>核心线程数参考CPU的核心数量，最好是CPU核心数量的整数倍</li></ul>`,56),b=[v];function h(g,y){return s(),a("div",null,b)}const _=n(m,[["render",h],["__file","06-ThreadPool.html.vue"]]);export{_ as default};
