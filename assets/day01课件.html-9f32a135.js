import{_ as s,o as n,c as a,e}from"./app-8007fa1b.js";const t="/assets/image-20230420092507794-6bed9f50.png",p="/assets/image-20230424094450310-5657e490.png",i="/assets/image-20230420094859066-3243a135.png",c="/assets/image-20230420095756720-fa6a9531.png",o="/assets/image-20230420095905091-e2bd95f9.png",l="/assets/image-20230420121241611-b17e86c0.png",r="/assets/image-20230420121750165-e046ef57.png",d="/assets/image-20230420122730477-5f63fd47.png",u="/assets/image-20230420122837102-7cb38d93.png",m="/assets/image-20230420123206715-43f5bb93.png",k="/assets/image-20230420123502268-16602bd9.png",v="/assets/image-20230420124240542-75b08b1c.png",b="/assets/image-20230420124650917-ce4e9e5a.png",g="/assets/image-20230420125707456-bafa5540.png",h="/assets/image-20230420125922757-3975c2fc.png",f="/assets/image-20230420130508216-62e33938.png",_="/assets/image-20230420145259169-46993ee6.png",y="/assets/image-20230420151836365-e702c85b.png",x="/assets/image-20230420152250969-c1a1f2e3.png",q="/assets/image-20230420170343281-ccf532f4.png",N="/assets/image-20230420170726620-0766bd59.png",E="/assets/image-20230420171135053-f7899cd0.png",T="/assets/image-20230420171305669-02f27a1a.png",A="/assets/image-20230420171535021-555b399c.png",R="/assets/image-20230420174124176-664e62d1.png",S="/assets/image-20230420174219226-c41db270.png",w="/assets/image-20230420174325520-7f88a730.png",D="/assets/image-20210304194927327-e0e493bd.png",O="/assets/image-20210304195150136-fa7d1186.png",I="/assets/image-20210304195512501-f49efe17.png",j="/assets/image-20230420174914650-778d7e2e.png",H="/assets/image-20230420175300245-baf660c7.png",M="/assets/image-20230424104219638-affb3062.png",L="/assets/image-20230424104409971-3ade76f5.png",P="/assets/image-20230424160221537-85635704.png",B="/assets/image-20230424164001006-f3ec06db.png",C="/assets/image-20230424165240085-2aa8fa81.png",U="/assets/image-20230424171918223-7c679801.png",J="/assets/image-20230424172715032-85bc61fa.png",V={},F=e('<h1 id="_1-docker初体验" tabindex="-1"><a class="header-anchor" href="#_1-docker初体验" aria-hidden="true">#</a> 1 docker初体验</h1><h2 id="_1-1-docker简介" tabindex="-1"><a class="header-anchor" href="#_1-1-docker简介" aria-hidden="true">#</a> 1.1 docker简介</h2><p>docker官网地址：https://www.docker.com/</p><p><img src="'+t+'" alt="image-20230420092507794"></p><p>docker 是一个开源的<strong>应用容器引擎</strong>，让开发者可以打包他们的应用(Redis、MySQL、Spring Boot程序、Centos...)以及依赖包到一个可移植的容器中,然后发布到任何流行的Linux或Windows操作系统的机器上。</p><h2 id="_1-2-docker的优势" tabindex="-1"><a class="header-anchor" href="#_1-2-docker的优势" aria-hidden="true">#</a> 1.2 docker的优势</h2><p>docker的优势包括：</p><p>1、可移植性：docker容器可以在任何支持docker的环境中运行，包括本地开发环境、测试环境和生产环境，从而提高了应用程序的可移植性。</p><p>2、可伸缩性：docker容器可以根据负载的变化进行快速扩展和收缩，从而更好地满足应用程序的需求。</p><p>3、隔离性：docker容器提供了隔离的运行环境，从而使得不同容器中运行的应用程序互相隔离，避免了应用程序之间的干扰。</p><h2 id="_1-3-docker和虚拟机的区别" tabindex="-1"><a class="header-anchor" href="#_1-3-docker和虚拟机的区别" aria-hidden="true">#</a> 1.3 docker和虚拟机的区别</h2><p>docker和虚拟机的区别如下图所示：</p><p><img src="'+p+'" alt="image-20230424094450310"></p><p><strong>隔离性</strong>：在于隔离性上面，由于vm对操作系统也进行了虚拟化，隔离的更加彻底。而docker共享宿主机的操作系统，隔离性较差。</p><p><strong>运行效率</strong>：由于vm的隔离操作，导致生成虚拟机的速率大大低于容器docker生成的速度，因为docker直接利用宿主机的系统内核。它们的启动速度</p><p>是在数量级上的差距。</p><p><strong>资源利用率</strong>：在资源利用率上虚拟机由于隔离更彻底，因此利用率也会相对较低。</p><p>经典名句：虚拟机已死，容器才是未来</p><h2 id="_1-4-docker架构" tabindex="-1"><a class="header-anchor" href="#_1-4-docker架构" aria-hidden="true">#</a> 1.4 docker架构</h2><p>docker的架构图如下所示：</p><p><img src="'+i+'" alt="image-20230420094859066"></p><p><strong>docker Client</strong>：docker的客户端，简单的来说就是docker所提供的一些命令。 docker的客户端负责与docker的守护进程进行通讯。</p><p><strong>docker主机</strong>：docker主机就是docker的服务端、在docker主机中存在一个守护进程。这个守护进行负责管理docker中常见的一些对象（比如：镜像、容器、数据卷...）。</p><p>1、docker镜像：是一种特殊的文件系统(<strong>软件包</strong>)。用于封装应用项目以及该项目所需要的软件环境。比如一个Redis的镜像中，就封装了Redis这个</p><p>软件，并且封装了这个Redis软件所需要的一些依赖环境。镜像是一个静态的概念，不包含任何动态数据，其内容在构建之后也不会被改变。</p><p>2、docker容器：容器是由镜像产生的<strong>运行实例</strong>，最终在服务器上运行的就是一个个容器。对于镜像和容器的关系，可以理解为Java中的类与对象的</p><p>关系。</p><p><strong>注册中心(Registry)</strong>：就是存储镜像的仓库。在创建容器的时候首先会检测本地是否存在这个容器所对应的镜像，如果不存在此时会从注册中心</p><p>上进行拉取镜像到本地，然后在进行使用。如果本地已经存在该镜像了，就不会再次进行拉取直接使用本地的镜像即可。然后默认的注册中心就是</p><p>docker Hub（https://hub.docker.com/），这个注册中心可以看做成是一个大的仓库，在这个大的仓库下有存在很多的子仓库，每一子仓库中</p><p>存储的就是同一类镜像。各个镜像之间是通过镜像的tag(标签：可以理解为就是镜像的版本)进行区分。</p><p>访问docker Hub搜索Redis镜像</p><p><img src="'+c+'" alt="image-20230420095756720"></p><p>一般都会选择官方的的子镜像仓库：</p><p><img src="'+o+`" alt="image-20230420095905091"></p><p>在子镜像仓库中会存在很多的版本的镜像。</p><h2 id="_1-5-docker的安装与卸载" tabindex="-1"><a class="header-anchor" href="#_1-5-docker的安装与卸载" aria-hidden="true">#</a> 1.5 docker的安装与卸载</h2><p>docker 从 17.03 版本之后分为 CE（Community Edition: 社区版） 和 EE（Enterprise Edition: 企业版），CE版本是免费的，EE版本是收费的。本次</p><p>我们用社区版就可以了。</p><p>docker的安装和卸载可以参考官方文档：https://docs.docker.com/engine/install/centos/</p><p>卸载命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum remove <span class="token function">docker</span> <span class="token punctuation">\\</span>
                  docker-client <span class="token punctuation">\\</span>
                  docker-client-latest <span class="token punctuation">\\</span>
                  docker-common <span class="token punctuation">\\</span>
                  docker-latest <span class="token punctuation">\\</span>
                  docker-latest-logrotate <span class="token punctuation">\\</span>
                  docker-logrotate <span class="token punctuation">\\</span>
                  docker-engine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装依赖</span>
<span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils

<span class="token comment"># 安装docker的下载源</span>
<span class="token function">sudo</span> yum-config-manager <span class="token punctuation">\\</span>
    --add-repo <span class="token punctuation">\\</span>
    https://download.docker.com/linux/centos/docker-ce.repo
    
<span class="token comment">#通过阿里源进行设置</span>
<span class="token function">sudo</span> yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
    
<span class="token comment"># 安装docker    </span>
<span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-6-docker服务相关命令" tabindex="-1"><a class="header-anchor" href="#_1-6-docker服务相关命令" aria-hidden="true">#</a> 1.6 docker服务相关命令</h2><p>docker服务操作的相关命令如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看docker服务的运行状态</span>
systemctl status <span class="token function">docker</span>

<span class="token comment"># 启动docker服务</span>
systemctl start <span class="token function">docker</span>

<span class="token comment"># 关闭docker服务</span>
systemctl stop <span class="token function">docker</span>

<span class="token comment"># 重启docker服务</span>
systemctl restart <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-7-阿里云镜像加速器" tabindex="-1"><a class="header-anchor" href="#_1-7-阿里云镜像加速器" aria-hidden="true">#</a> 1.7 阿里云镜像加速器</h2><p>docker的使用过程中，需要从远程仓库下载镜像，但是默认为国外网站，所以在下载时会出现下载连接超时导致下载失败，因此需要为其配置镜像加速器，以提高下载速度。目前使用的较多的就是阿里云镜像加速器。接下来就来给大家演示一下如何去给docker配置阿里云镜像加速器。</p><p>在配置阿里云镜像仓库之前，可以使用如下命令查看docker的详细信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> info
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>阿里云镜像加速器的使用步骤：</p><p>1、注册和登录</p><p>2、进入管理后台</p><p>3、搜索<strong>容器镜像服务</strong></p><p>4、查看示例代码进行配置即可</p><p><img src="`+l+`" alt="image-20230420121241611"></p><p>对应的配置代码如下所示</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 在etc目录下创建一个docker文件夹</span>
<span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/docker

<span class="token comment"># 在/etc/docker文件夹下创建一个daemon.json文件，然后写入如下内容</span>
<span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;-</span><span class="token string">&#39;EOF&#39;
{
  &quot;registry-mirrors&quot;: [&quot;https://phtv51hj.mirror.aliyuncs.com&quot;]
}
EOF</span>

<span class="token comment"># 重新加载docker的守护进程</span>
<span class="token function">sudo</span> systemctl daemon-reload

<span class="token comment"># 重启docker服务</span>
<span class="token function">sudo</span> systemctl restart <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_2-docker镜像操作" tabindex="-1"><a class="header-anchor" href="#_2-docker镜像操作" aria-hidden="true">#</a> 2 docker镜像操作</h1><h2 id="_2-1-搜索远程镜像" tabindex="-1"><a class="header-anchor" href="#_2-1-搜索远程镜像" aria-hidden="true">#</a> 2.1 搜索远程镜像</h2><p>相关命令如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>命令：docker search
格式：docker search 镜像关键字
示例：docker search redis								 <span class="token comment"># 搜索镜像名称中包含redis关键字的镜像</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行效果如下所示：</p><p><img src="`+r+`" alt="image-20230420121750165"></p><p>列介绍：</p><p>1、name： 镜像仓库源名称</p><p>2、description： 镜像的描述</p><p>3、official: 是否 docker 官方发布</p><p>4、stars: 镜像的收藏数，收藏数越多表示此镜像的受欢迎程度越高</p><p>5、automated: 是否自动构建</p><h2 id="_2-2-拉取镜像" tabindex="-1"><a class="header-anchor" href="#_2-2-拉取镜像" aria-hidden="true">#</a> 2.2 拉取镜像</h2><p>相关命令如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>命令: <span class="token function">docker</span> pull
格式: <span class="token function">docker</span> pull 镜像名称<span class="token punctuation">[</span>:tag<span class="token punctuation">]</span>		<span class="token comment"># tag表示的镜像的标签，也可以理解为就是镜像的版本</span>
示例1: <span class="token function">docker</span> pull redis			   <span class="token comment"># 默认拉取的是最新的redis镜像</span>
示例2: <span class="token function">docker</span> pull redis:7.0.10	   <span class="token comment"># 拉取redis7.0.10镜像，一个镜像到底存在哪些标签，需要上docker hub中进行查看</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行效果如下所示：</p><p><img src="`+d+`" alt="image-20230420122730477"></p><h2 id="_2-3-查看本地镜像" tabindex="-1"><a class="header-anchor" href="#_2-3-查看本地镜像" aria-hidden="true">#</a> 2.3 查看本地镜像</h2><p>相关命令如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>命令: <span class="token function">docker</span> images									
格式: <span class="token function">docker</span> images <span class="token punctuation">[</span>options<span class="token punctuation">]</span>							<span class="token comment"># 可以添加一些常见参数选项</span>
示例: <span class="token function">docker</span> images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行效果如下所示：</p><p><img src="`+u+`" alt="image-20230420122837102"></p><p>列介绍：</p><p>1、repository：镜像来源仓库名称</p><p>2、tag： 镜像标签</p><p>3、image id： 镜像id</p><p>4、created： 创建时间</p><p>5、size： 镜像的大小</p><p>常见的参数选项：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>-q, <span class="token parameter variable">--quiet</span>												<span class="token comment"># 查询镜像的id</span>
-f, <span class="token parameter variable">--filter</span> string								    	<span class="token comment"># 按照指定的过滤条件进行查询</span>
	常见的过滤条件选项：reference						  	  <span class="token comment"># 按照正在表达式进行过滤</span>
<span class="token parameter variable">--format</span> string											<span class="token comment"># 按照指定的格式化字符串进行结果格式化操作</span>
	常见的格式化字符串：.Repository<span class="token punctuation">(</span>镜像仓库<span class="token punctuation">)</span>、.Tag<span class="token punctuation">(</span>镜像标签<span class="token punctuation">)</span>        

示例1：docker images <span class="token parameter variable">-q</span>
示例2：docker images <span class="token parameter variable">--filter</span> <span class="token assign-left variable">reference</span><span class="token operator">=</span><span class="token string">&quot;redis:*&quot;</span>	  	  <span class="token comment"># 搜索镜像名称为redis，镜像标签是任意的所有镜像</span>
示例3：docker images <span class="token parameter variable">--format</span> <span class="token string">&quot;{{.Repository}}:{{.Tag}}&quot;</span> <span class="token comment"># 搜索结果中只包含仓库名称和标签名称</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行效果如下所示：</p><p><img src="`+m+`" alt="image-20230420123206715"></p><h2 id="_2-4-删除本地镜像" tabindex="-1"><a class="header-anchor" href="#_2-4-删除本地镜像" aria-hidden="true">#</a> 2.4 删除本地镜像</h2><p>相关命令如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>命令：docker rmi 										
格式：docker rmi 镜像名称<span class="token punctuation">[</span>:镜像标签<span class="token punctuation">]</span>/镜像的id	<span class="token comment"># 根据镜像的id或者镜像的名称进行删除，如果不添加镜像的标签删除的就是最新的镜像</span>
示例: <span class="token function">docker</span> rmi redis:7.0.10				<span class="token comment"># 删除redis:7.0.10镜像</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行效果如下所示：</p><p><img src="`+k+`" alt="image-20230420123502268"></p><p>注意：如果一个镜像存在对应的容器，此时这个镜像是无法进行删除的。</p><p>删除所有镜像：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> rmi <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> images <span class="token parameter variable">-q</span><span class="token variable">)</span></span>			<span class="token comment"># 慎用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-5-帮助文档使用" tabindex="-1"><a class="header-anchor" href="#_2-5-帮助文档使用" aria-hidden="true">#</a> 2.5 帮助文档使用</h2><p>docker中提供了很多命令，每一个命令也可以加很多的参数选项。把一个命令以及对应的参数选项都记住很显然是不太现实的。可以通过查看docker</p><p>帮助文档来学习docker的常用命令以及参数选项的使用。</p><p>帮助文档的使用如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查询docker可以使用到的命令</span>
<span class="token function">docker</span> <span class="token parameter variable">--help</span>

<span class="token comment"># 查询images命令的使用文档</span>
<span class="token function">docker</span> images <span class="token parameter variable">--help</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行效果如下所示：</p><p><img src="`+v+`" alt="image-20230420124240542"></p><h1 id="_3-docker容器操作" tabindex="-1"><a class="header-anchor" href="#_3-docker容器操作" aria-hidden="true">#</a> 3 docker容器操作</h1><h2 id="_3-1-查询容器" tabindex="-1"><a class="header-anchor" href="#_3-1-查询容器" aria-hidden="true">#</a> 3.1 查询容器</h2><p>相关命令如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>命令：docker <span class="token function">ps</span> 
格式：docker <span class="token function">ps</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span>	<span class="token comment"># 可以添加一些参数选项，如果不添加表示查询本地所有正在运行的容器</span>
示例: <span class="token function">docker</span> <span class="token function">ps</span> 			<span class="token comment"># 查看本地正在运行的容器</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行效果如下所示：</p><p><img src="`+b+`" alt="image-20230420124650917"></p><p>列介绍：</p><p>1、container id： 容器名称</p><p>2、image: 镜像名称</p><p>3、command： 容器启动时所执行的命令</p><p>4、created： 创建时间</p><p>5、status： 容器状态</p><p>6、ports： 端口映射情况</p><p>7、names： 容器的名称</p><p>常见参数选项：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>-a,--all															<span class="token comment"># 查询所有的镜像，包含未运行的容器</span>
-q,--quiet															<span class="token comment"># 查询容器的id</span>

示例1：docker <span class="token function">ps</span> <span class="token parameter variable">-a</span>												  <span class="token comment"># 查询所有的容器包含未运行的容器</span>
示例2：docker <span class="token function">ps</span> <span class="token parameter variable">-q</span>												  <span class="token comment"># 查询容器的id	</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-2-创建容器" tabindex="-1"><a class="header-anchor" href="#_3-2-创建容器" aria-hidden="true">#</a> 3.2 创建容器</h2><h3 id="_3-2-1-容器创建入门" tabindex="-1"><a class="header-anchor" href="#_3-2-1-容器创建入门" aria-hidden="true">#</a> 3.2.1 容器创建入门</h3><p>容器分类：</p><p>1、交互型容器：具有和用户交互的输入和输出终端，容器创建后自动进入容器中，退出容器后，容器自动关闭。</p><p>2、守护型容器：没有和用户交互终端，需要使用docker exec进入容器，退出后，容器不会关闭。</p><p>命令介绍：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>命令:  <span class="token function">docker</span> run
格式： <span class="token function">docker</span> run <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> 镜像的名称:镜像标签/镜像id <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> <span class="token punctuation">[</span>ARG<span class="token punctuation">..</span>.<span class="token punctuation">]</span>

类型参数选项：
-d,--detach								<span class="token comment"># 以后台的模式执行命令</span>
-t, <span class="token parameter variable">--tty</span>								<span class="token comment"># 分配一个虚拟终端，通常和-i参数一起使用</span>
-i,--interactive						<span class="token comment"># 把交互界面一直保留，通常和-t参数一起使用</span>

示例1：docker run <span class="token parameter variable">-it</span> redis:7.0.10       <span class="token comment"># 创建一个交互型容器，容器在启动的时候打开一个shell窗口，并且让这个窗口一直保留</span>
示例2：docker run <span class="token parameter variable">-d</span>  redis:7.0.10       <span class="token comment"># 创建一个守护型容器，容器以后台的方式运行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行效果如下所示：</p><p>效果1：</p><p><img src="`+g+'" alt="image-20230420125707456"></p><p>交互型容器创建好了以后，直接进入到容器的内部了。</p><p>效果2：</p><p><img src="'+h+`" alt="image-20230420125922757"></p><p>守护型容器创建好了以后，容器就是以后台的方式进行运行。</p><h3 id="_3-2-2-常见参数选项" tabindex="-1"><a class="header-anchor" href="#_3-2-2-常见参数选项" aria-hidden="true">#</a> 3.2.2 常见参数选项</h3><h4 id="name" tabindex="-1"><a class="header-anchor" href="#name" aria-hidden="true">#</a> --name</h4><p>--name参数可以给创建的容器设置名称。如果没有加该参数，那么此时docker会为容器随机分配一个名字。</p><p>使用方式如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> redis01 redis:7.0.10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行效果如下所示：</p><p><img src="`+f+'" alt="image-20230420130508216"></p><h4 id="p" tabindex="-1"><a class="header-anchor" href="#p" aria-hidden="true">#</a> -p</h4><p>注意：docker容器内部所运行的进程是无法被外部机器(windows)直接访问的, 如果外部机器向访问容器内的进程，那么在创建容器的时候就需要在</p><p>linux宿主机上开一个端口号，并且需要建立这个端口号和容器内进程端口号之间的映射关系，这样外部机器就可以通过宿主机的端口号访问到容器内</p><p>的进程了。</p><p>如下图所示：</p><p><img src="'+_+`" alt="image-20230420145259169"></p><p>要实现端口映射关系的指定就需要使用-p参数。</p><p>使用方式如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> redis01 <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 redis:7.0.10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3-3-容器服务管理" tabindex="-1"><a class="header-anchor" href="#_3-3-容器服务管理" aria-hidden="true">#</a> 3.3 容器服务管理</h2><p>容器管理的相关命令如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stop 容器名称/容器id											<span class="token comment"># 关闭容器</span>
<span class="token function">docker</span> start  容器名称/容器id											<span class="token comment"># 启动容器</span>
<span class="token function">docker</span> restart 容器名称/容器id										<span class="token comment"># 重启容器</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-4-删除容器" tabindex="-1"><a class="header-anchor" href="#_3-4-删除容器" aria-hidden="true">#</a> 3.4 删除容器</h2><p>删除容器的常见命令如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>命令: <span class="token function">docker</span> <span class="token function">rm</span>
格式：docker <span class="token function">rm</span> 容器名称/容器的id							<span class="token comment">#  删除容器</span>
示例：docker <span class="token function">rm</span> angry_lamport							 <span class="token comment">#  删除angry_lamport容器</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：上述的命令只能删除已经关闭的容器，如果想删除正在运行的容器，可以通过添加-f参数进行实现。</p><p>删除所有的容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">rm</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-aq</span><span class="token variable">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3-5-进入容器" tabindex="-1"><a class="header-anchor" href="#_3-5-进入容器" aria-hidden="true">#</a> 3.5 进入容器</h2><p>思考问题：检查容器是否可以和linux宿主机之间进行通讯，怎么实现？</p><p>实现思路：进入到容器内部通过ping命令检测</p><p>进入容器命令如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>命令：docker <span class="token builtin class-name">exec</span>
格式：docker <span class="token builtin class-name">exec</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER COMMAND <span class="token punctuation">[</span>ARG<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
常见的参数选项：												  
-t, <span class="token parameter variable">--tty</span>														<span class="token comment"># 分配一个虚拟终端，通常和-i参数一起使用</span>
-i,--interactive												<span class="token comment"># 把交互界面一直保留，通常和-t参数一起使用</span>

示例1：docker <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> redis01 /bin/bash					 	  <span class="token comment"># 进入到容器中同时打开一个shell窗口</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行效果如下所示：</p><p><img src="`+y+`" alt="image-20230420151836365"></p><p>docker exec命令也可以在容器中执行一个命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> redis01 <span class="token builtin class-name">echo</span> atguigu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3-6-其他命令" tabindex="-1"><a class="header-anchor" href="#_3-6-其他命令" aria-hidden="true">#</a> 3.6 其他命令</h2><p>如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs <span class="token parameter variable">-f</span> 容器名称/容器的id						<span class="token comment"># 查询容器内进程日志，-f参数表示实时监控日志信息</span>
<span class="token function">docker</span> inspect 容器名称/容器的id						<span class="token comment"># 查看容器的详情信息</span>
<span class="token function">docker</span> <span class="token function">cp</span> 											 <span class="token comment"># 完成容器和宿主机之间的文件copy</span>

示例1: <span class="token function">docker</span> logs <span class="token parameter variable">-f</span> redis01				   <span class="token comment"># 实时查看redis01这个容器中的日志信息</span>
示例2: <span class="token function">docker</span> inspect redis01				   <span class="token comment"># 查看容器的详情信息，主要就是：目录映射情况、端口映射情况、ip地址</span>
示例3: <span class="token function">docker</span> <span class="token function">cp</span> a.txt redis01:/root		   <span class="token comment"># 把宿主机中a.txt文件拷贝到redis01的root目录中</span>
示例4: <span class="token function">docker</span> <span class="token function">cp</span> redis01:/root/a.txt <span class="token builtin class-name">.</span>       <span class="token comment"># 把容器中的root目录下的a.txt文件拷贝到宿主机中当前目录中</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-7-备份与迁移" tabindex="-1"><a class="header-anchor" href="#_3-7-备份与迁移" aria-hidden="true">#</a> 3.7 备份与迁移</h2><p>对某一个容器修改完毕以后，我们可以把最新的容器部署到其他的环境中。具体的流程操作如下所示：</p><p><img src="`+x+`" alt="image-20230420152250969"></p><p>涉及的docker命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> commit 容器名称/容器的id 镜像名称			  <span class="token comment"># 把docker容器保存成一个镜像</span>
<span class="token function">docker</span> save <span class="token parameter variable">-o</span> 镜像tar文件名称 镜像名称/镜像id		 <span class="token comment"># 把镜像保存为tar文件</span>
<span class="token function">docker</span> load <span class="token parameter variable">-i</span> 镜像名称							  <span class="token comment"># 把tar文件恢复成为一个镜像</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例代码：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> commit redis01 myredis				     <span class="token comment"># 将redis01容器保存为一个镜像</span>
<span class="token function">docker</span> save <span class="token parameter variable">-o</span> myredis.tar myredis 				 <span class="token comment"># 将myredis镜像保存为一个tar文件</span>
<span class="token function">docker</span> rmi myredis								 <span class="token comment"># 删除之前的myredis镜像</span>
<span class="token function">docker</span> load <span class="token parameter variable">-i</span> myredis.tar 						 <span class="token comment"># 将myredis.tar恢复成一个镜像</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_4-docker数据卷操作" tabindex="-1"><a class="header-anchor" href="#_4-docker数据卷操作" aria-hidden="true">#</a> 4 docker数据卷操作</h1><h2 id="_4-1-数据卷概述" tabindex="-1"><a class="header-anchor" href="#_4-1-数据卷概述" aria-hidden="true">#</a> 4.1 数据卷概述</h2><p>思考问题：在Redis容器中存储的数据，如果Redis容器被删除了，数据是否还存在?</p><p>解决方案：将数据存储到Linux宿主机的磁盘目录中</p><p>数据卷概述：数据卷是docker所提供的一个虚拟目录，这个虚拟目录会对应宿主机的一个真实目录。在创建容器的时候就可以将这个数据卷挂载到容</p><p>器中的某一个目录下，那么此时在该目录下所产生的数据就会存储到宿主机的目录下，实现了容器和宿主机之间的文件共享。</p><p>如下图所示：</p><p><img src="`+q+`" alt="image-20230420170343281"></p><h2 id="_4-2-常见命令" tabindex="-1"><a class="header-anchor" href="#_4-2-常见命令" aria-hidden="true">#</a> 4.2 常见命令</h2><h3 id="_4-2-1-查看数据卷" tabindex="-1"><a class="header-anchor" href="#_4-2-1-查看数据卷" aria-hidden="true">#</a> 4.2.1 查看数据卷</h3><p>命令如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume <span class="token function">ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行效果如下所示：</p><p><img src="`+N+`" alt="image-20230420170726620"></p><h3 id="_4-2-2-创建数据卷" tabindex="-1"><a class="header-anchor" href="#_4-2-2-创建数据卷" aria-hidden="true">#</a> 4.2.2 创建数据卷</h3><p>命令如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume create 数据卷名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行效果如下所示：</p><p><img src="`+E+`" alt="image-20230420171135053"></p><h3 id="_4-2-3-查询数据卷详情" tabindex="-1"><a class="header-anchor" href="#_4-2-3-查询数据卷详情" aria-hidden="true">#</a> 4.2.3 查询数据卷详情</h3><p>命令如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume inspect 数据卷名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行效果如下所示：</p><p><img src="`+T+`" alt="image-20230420171305669"></p><h3 id="_4-2-4-删除数据卷" tabindex="-1"><a class="header-anchor" href="#_4-2-4-删除数据卷" aria-hidden="true">#</a> 4.2.4 删除数据卷</h3><p>命令如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume <span class="token function">rm</span> 数据卷名称  <span class="token comment"># 删除指定的数据卷</span>
<span class="token function">docker</span> volume prune 		<span class="token comment"># 删除未使用的数据卷</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行效果如下所示：</p><p><img src="`+A+`" alt="image-20230420171535021"></p><h2 id="_4-3-数据卷挂载" tabindex="-1"><a class="header-anchor" href="#_4-3-数据卷挂载" aria-hidden="true">#</a> 4.3 数据卷挂载</h2><p>数据卷创建好了以后，在创建容器的时候就可以通过-v参数，将创建好的数据卷挂载到容器中的某一个目录下。</p><p>命令如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>格式: <span class="token parameter variable">-v</span> 数据卷名称:容器目录
示例：docker run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> redis02 <span class="token parameter variable">-p</span> <span class="token number">6380</span>:6379 <span class="token parameter variable">-v</span> redis-data:/data redis:7.0.10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意事项：</p><p>1、如果数据卷没有提前创建好，那么在创建容器的时候会自动创建对应的数据卷</p><p>2、数据卷挂载的时候数据卷名称前面<strong>没有/</strong></p><p>3、容器目录不存在会自动创建</p><p>4、数据卷目录如果不为空，此时会使用数据卷目录内容覆盖容器目录内容</p><p>5、数据卷目录如果为空，容器目录不为空，此时就会使用容器目录内容覆盖数据卷目录</p><h2 id="_4-4-目录挂载" tabindex="-1"><a class="header-anchor" href="#_4-4-目录挂载" aria-hidden="true">#</a> 4.4 目录挂载</h2><p>通过-v参数也可以将宿主机上的某一个目录挂载到容器中的某一个目录下。</p><p>命令如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>格式: <span class="token parameter variable">-v</span> 宿主机目录:容器目录
示例：docker run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> redis03 <span class="token parameter variable">-p</span> <span class="token number">6381</span>:6379 <span class="token parameter variable">-v</span> /redis-data:/data redis:7.0.10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意事项：</p><p>1、如果宿主机目录没有提前创建好，那么在创建容器的时候会自动创建对应的宿主机目录</p><p>2、宿主机目录挂载的时候宿主机目录名称前面<strong>有/</strong></p><p>3、容器目录不存在会自动创建</p><p>4、宿主机目录如果不为空，此时会使用宿主机目录内容覆盖容器目录内容</p><p>5、宿主机目录如果为空，容器目录不为空，此时就会使用容器目录内容清空掉</p><h1 id="_5-portainer工具" tabindex="-1"><a class="header-anchor" href="#_5-portainer工具" aria-hidden="true">#</a> 5 Portainer工具</h1><h2 id="_5-1-安装与启动" tabindex="-1"><a class="header-anchor" href="#_5-1-安装与启动" aria-hidden="true">#</a> 5.1 安装与启动</h2><p>上述对容器和镜像的管理都是基于docker客户端的命令来完成，不太方便。为了方便的对docker中的一些对象(镜像、容器、数据卷...)来进行管理，</p><p>可以使用Portainer来完成。Portainer是一个<strong>可视化</strong>的容器镜像的图形管理<strong>工具</strong>，利用Portainer可以轻松构建，管理和维护docker环境。</p><p>Portainer安装：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 搜索portainer</span>
<span class="token function">docker</span> search portainer

<span class="token comment"># 拉取镜像</span>
<span class="token function">docker</span> pull portainer/portainer

<span class="token comment">#创建并启动容器,注意需要做一个docker.sock文件的映射，后期portainer会通过这个文件和docker的守护进程进行通讯，管理docker的相关对象</span>
<span class="token comment"># --restart=always: 表示随着docker服务的启动而启动</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">9000</span>:9000 <span class="token parameter variable">--name</span><span class="token operator">=</span>portainer <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock portainer/portainer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问：ip:9000 第一次登陆需要设置登陆密码，密码不得少于8位</p><p><img src="`+R+'" alt="image-20230420174124176"></p><p>选择portainer需要管理的环境（本地还是远程）</p><p><img src="'+S+'" alt="image-20230420174219226"></p><p>Portainer的首页</p><p><img src="'+w+'" alt="image-20230420174325520"></p><h2 id="_5-2-镜像管理" tabindex="-1"><a class="header-anchor" href="#_5-2-镜像管理" aria-hidden="true">#</a> 5.2 镜像管理</h2><p>选择docker服务，进入到如下页面</p><p><img src="'+D+'" alt="image-20210304194927327"></p><p>点击镜像页签，对镜像进行相关管理</p><p><img src="'+O+'" alt="image-20210304195150136"></p><h2 id="_5-3-容器管理" tabindex="-1"><a class="header-anchor" href="#_5-3-容器管理" aria-hidden="true">#</a> 5.3 容器管理</h2><p>在首页选择docker服务，进入到如下页面</p><p><img src="'+I+'" alt="image-20210304195512501"></p><p>点击容器页签，对容器进行相关管理</p><p><img src="'+j+'" alt="image-20230420174914650"></p><p>创建容器</p><p><img src="'+H+`" alt="image-20230420175300245"></p><p>数据卷挂载：需要先创建数据卷，然后在下方选择volumes完成数据卷的挂载。</p><h1 id="_6-spring-boot项目部署" tabindex="-1"><a class="header-anchor" href="#_6-spring-boot项目部署" aria-hidden="true">#</a> 6 Spring Boot项目部署</h1><p>本章节主要讲解的就是如何把一个Spring Boot项目使用docker进行部署，以减少整个项目的维护成本。</p><h2 id="_6-1-dockerfile" tabindex="-1"><a class="header-anchor" href="#_6-1-dockerfile" aria-hidden="true">#</a> 6.1 dockerfile</h2><h3 id="_6-1-1-dockerfile简介" tabindex="-1"><a class="header-anchor" href="#_6-1-1-dockerfile简介" aria-hidden="true">#</a> 6.1.1 dockerfile简介</h3><p>前面我们所使用的镜像都是别人构建好的，但是别人构建好的镜像不一定能满足我们的需求。为了满足我们自己的某一些需求，此时我们就需要构建自</p><p>己的镜像，怎么构建？使用dockerfile。</p><p>dockerfile就是一个<strong>文本文件</strong>，在这个文本文件中可以使用docker所提供的一些指令来指定我们构建镜像的细节，后期就可以使用这个dockerfile文</p><p>件来构建自己的镜像。</p><p>dockerfile文件内容一般分为4部分：</p><p>1、基础镜像信息(必选)</p><p>2、维护者信息(可选)</p><p>3、镜像操作指令(可选)</p><p>4、容器启动时执行的指令(可选)</p><p>常用命令</p><table><thead><tr><th style="text-align:center;">指令</th><th style="text-align:left;">用法</th><th style="text-align:left;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">FROM</td><td style="text-align:left;">FROM image_name:tag</td><td style="text-align:left;">指定一个构建镜像的基础源镜像，如果本地没有就会从公共库中拉取，没有指定镜像的标签会使用默认的latest标签，可以出现多次，如果需要在一个dockerfile中构建多个镜像。</td></tr><tr><td style="text-align:center;">MAINTAINER</td><td style="text-align:left;">MAINTAINER user_name</td><td style="text-align:left;">描述镜像的创建者，名称和邮箱</td></tr><tr><td style="text-align:center;">RUN</td><td style="text-align:left;">RUN &quot;command&quot; &quot;param1&quot; &quot;param2&quot;</td><td style="text-align:left;">用来执行一些命令，可以写多条</td></tr><tr><td style="text-align:center;">ENV</td><td style="text-align:left;">ENV key value</td><td style="text-align:left;">设置容器的环境变量，可以写多条。</td></tr><tr><td style="text-align:center;">ADD</td><td style="text-align:left;">ADD source_dir/file</td><td style="text-align:left;">将宿主机的文件复制到容器内，如果是压缩文件，则复制后自动解压</td></tr><tr><td style="text-align:center;">ENTRYPOINT</td><td style="text-align:left;">ENTRYPOINT &quot;command&quot; &quot;param1&quot; &quot;param2&quot;</td><td style="text-align:left;">用来指定容器启动时所执行的命令</td></tr></tbody></table><h3 id="_6-1-2-入门案例" tabindex="-1"><a class="header-anchor" href="#_6-1-2-入门案例" aria-hidden="true">#</a> 6.1.2 入门案例</h3><p>需求：使用dockerfile来构建一个包含Jdk17的centos7镜像</p><p>分析：</p><p>1、基础的镜像的应该选择centos:7</p><p>2、在自己所构建的镜像中需要包含Jdk17，就需要把Jdk17添加到centos:7的基础镜像中</p><p>3、为了方便的去使用自己构建的镜像中的Jdk17，就需要去配置环境变量</p><p>4、因为Jdk17仅仅是一个开发工具，并不是一个服务进程，因此在启动容器的时候可以不指定任何的执行命令</p><p>实现步骤：</p><p>1、将Jdk17的安装包上传到linux服务器的指定目录下</p><p>2、在Jdk17所在的目录下创建一个dockerfile文件</p><p>3、使用docker build命令构建镜像</p><p>4、使用docker images查看镜像构建情况</p><p>5、使用自己所构建的镜像创建容器，测试Jdk17的安装情况</p><p>代码实现</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 1、创建目录</span>
<span class="token function">mkdir</span> –p /usr/local/dockerfilejdk17
<span class="token builtin class-name">cd</span> /usr/local/dockerfilejdk17
  
<span class="token comment"># 2、下载jdk-17_linux-x64_bin.tar.gz并上传到服务器（虚拟机）中的/usr/local/dockerfilejdk17目录</span>
<span class="token comment"># 3、在/usr/local/dockerfilejdk17目录下创建dockerfile文件，文件内容如下：</span>
<span class="token function">vi</span> dockerfile

FROM centos:7
MAINTAINER atguigu
RUN <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/local/java
ADD jdk-17_linux-x64_bin.tar.gz /usr/local/java/
ENV <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/local/java/jdk-17.0.8
ENV <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/bin

<span class="token comment"># 4、执行命令构建镜像；不要忘了后面的那个 .</span>
<span class="token function">docker</span> build <span class="token parameter variable">-t</span> centos7-jdk17 <span class="token builtin class-name">.</span>

<span class="token comment"># 5、查看镜像是否建立完成</span>
<span class="token function">docker</span> images

<span class="token comment"># 6、创建容器</span>
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> atguigu-centos centos7-jdk17 /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-2-案例介绍与需求分析" tabindex="-1"><a class="header-anchor" href="#_6-2-案例介绍与需求分析" aria-hidden="true">#</a> 6.2 案例介绍与需求分析</h2><p>需求：将提供的Spring Boot项目使用容器化进行部署</p><p>分析：</p><p>1、Spring Boot项目中使用到了Mysql环境，因此需要先使用docker部署mysql环境</p><p>2、要将Spring Boot项目使用docker容器进行部署，就需要将Spring Boot项目构建成一个docker镜像</p><p>实现步骤：</p><p>1、使用docker部署mysql</p><p>2、使用dockerfile构建Spring Boot镜像</p><ul><li>将Spring Boot打包成一个Jar包</li><li>把Jar包上传到Linux服务器上</li><li>编写dockerfile文件</li><li>构建Spring Boot镜像</li></ul><p>3、创建容器进行测试</p><h2 id="_6-3-docker部署mysql" tabindex="-1"><a class="header-anchor" href="#_6-3-docker部署mysql" aria-hidden="true">#</a> 6.3 docker部署Mysql</h2><p>使用docker部署Mysql步骤如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建容器。 -e: 设置环境变量	--privileged=true 开启root用户权限</span>
<span class="token function">docker</span> run <span class="token parameter variable">-di</span> <span class="token parameter variable">--name</span> mysql <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">-v</span> mysql_data:/var/lib/mysql <span class="token parameter variable">-v</span> mysql_conf:/etc/mysql <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">1234</span>

<span class="token comment"># 进入容器</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mysql /bin/bash
mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span>								<span class="token comment"># 登录mysql</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用Navicat连接mysql，并创建对一个的数据库和数据库表</p><p>创建数据库：docker</p><p>创建表：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>tb_school<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>address<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加测试数据</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">\`</span>tb_school<span class="token punctuation">\`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;尚硅谷-北京校区&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;北京市昌平区宏福科技园2号楼3层&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">\`</span>tb_school<span class="token punctuation">\`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;尚硅谷-上海校区&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;上海市松江区谷阳北路166号大江商厦3层&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">\`</span>tb_school<span class="token punctuation">\`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;尚硅谷-深圳校区&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;深圳市宝安区西部硅谷大厦B座C区一层&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">\`</span>tb_school<span class="token punctuation">\`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;尚硅谷-西安校区&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;西安市雁塔区和发智能大厦B座3层&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">\`</span>tb_school<span class="token punctuation">\`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&#39;尚硅谷-成都校区&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;成都市成华区北辰星拱青创园综合楼3层&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">\`</span>tb_school<span class="token punctuation">\`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&#39;尚硅谷-武汉校区&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;武汉市东湖高新区东湖网谷6号楼4层&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-4-dockerfile构建镜像" tabindex="-1"><a class="header-anchor" href="#_6-4-dockerfile构建镜像" aria-hidden="true">#</a> 6.4 dockerfile构建镜像</h2><h3 id="_6-4-1-项目打包" tabindex="-1"><a class="header-anchor" href="#_6-4-1-项目打包" aria-hidden="true">#</a> 6.4.1 项目打包</h3><p>具体步骤：</p><p>1、在idea中部署资料\\基础项目\\ebuy-docker项目，并启动项目访问：http://localhost:8081/</p><p>2、执行mvn package命令进行项目打包</p><p>3、上传jar包到linux服务器上</p><h3 id="_6-4-2-dockerfile文件" tabindex="-1"><a class="header-anchor" href="#_6-4-2-dockerfile文件" aria-hidden="true">#</a> 6.4.2 dockerfile文件</h3><p>dockerfile文件的内容如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>FROM centos7-jdk17
MAINTAINER atguigu

<span class="token comment"># 声明容器内主进程所对应的端口</span>
EXPOSE <span class="token number">8081</span>
ADD ebuy-docker-1.0-SNAPSHOT.jar /ebuy-docker-1.0-SNAPSHOT.jar

<span class="token comment"># 相当于windows中的cd命令</span>
WORKDIR /      
ENTRYPOINT <span class="token punctuation">[</span><span class="token string">&quot;java&quot;</span> , <span class="token string">&quot;-jar&quot;</span> , <span class="token string">&quot;ebuy-docker-1.0-SNAPSHOT.jar&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>目录结构如下所示：</p><p><img src="`+M+`" alt="image-20230424104219638"></p><h3 id="_6-4-3-构建镜像" tabindex="-1"><a class="header-anchor" href="#_6-4-3-构建镜像" aria-hidden="true">#</a> 6.4.3 构建镜像</h3><p>命令如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> ebuy-docker:v1.0 <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行效果如下所示：</p><p><img src="`+L+`" alt="image-20230424104409971"></p><h2 id="_6-5-创建容器" tabindex="-1"><a class="header-anchor" href="#_6-5-创建容器" aria-hidden="true">#</a> 6.5 创建容器</h2><p>命令如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> ebuy-docker <span class="token parameter variable">-p</span> <span class="token number">8081</span>:8081 ebuy-docker:v1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>访问测试: http://192.168.136.142:8081</p><h1 id="_7-maven的docker插件" tabindex="-1"><a class="header-anchor" href="#_7-maven的docker插件" aria-hidden="true">#</a> 7 Maven的docker插件</h1><p>刚才的构建过程是手动镜像构建的过程。使用Maven的docker插件可以实现镜像的自动化部署。</p><p>步骤：</p><p>1、在pom.xml文件中添加Maven的docker插件</p><p>2、开启docker服务端的远程访问</p><p>3、在工程的根目录下创建dockerfile文件</p><p>4、使用maven的打包命令进行打包</p><p>5、创建容器并访问</p><p>实操：</p><p>1、在pom.xml文件中添加Maven的docker插件</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
                
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.spotify<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>docker-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!--将插件绑定在某个phase执行--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>build-image<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!--将插件绑定在package这个phase(阶段)上。也就是说，用户只需执行mvn package，就会自动执行mvn docker:build--&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">&gt;</span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>build<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>

        <span class="token comment">&lt;!--指定生成的镜像名--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>imageName</span><span class="token punctuation">&gt;</span></span>\${project.artifactId}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>imageName</span><span class="token punctuation">&gt;</span></span>

        <span class="token comment">&lt;!--指定标签,也就是版本号,可以自定义--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>imageTags</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>imageTag</span><span class="token punctuation">&gt;</span></span>v2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>imageTag</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>imageTags</span><span class="token punctuation">&gt;</span></span>
        
        <span class="token comment">&lt;!--指定远程 docker api地址 也就是服务器ip+docker的端口号--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dockerHost</span><span class="token punctuation">&gt;</span></span>http://192.168.136.142:2375<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dockerHost</span><span class="token punctuation">&gt;</span></span>

        <span class="token comment">&lt;!-- 指定 dockerfile 路径--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dockerDirectory</span><span class="token punctuation">&gt;</span></span>\${project.basedir}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dockerDirectory</span><span class="token punctuation">&gt;</span></span>
        
        <span class="token comment">&lt;!-- 是否跳过docker构建 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>skipDockerBuild</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>skipDockerBuild</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、docker服务端开启远程访问</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#修改该文件</span>
<span class="token function">vim</span> /lib/systemd/system/docker.service

<span class="token comment">#找到ExecStart行，修改成如下内容</span>
<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/dockerd <span class="token parameter variable">-H</span> tcp://0.0.0.0:2375 <span class="token parameter variable">-H</span> fd:// <span class="token parameter variable">--containerd</span><span class="token operator">=</span>/run/containerd/containerd.sock

systemctl daemon-reload				<span class="token comment">#重启守护进程</span>
systemctl restart <span class="token function">docker</span>			<span class="token comment">#重启docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、编写dockerfile文件</p><p>注意：</p><p>1、该文件的位置必须是和pom.xml处于同一个目录</p><p>2、关闭防火墙</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>FROM centos7-jdk17
MAINTAINER atguigu
EXPOSE <span class="token number">8081</span>
ADD target/ebuy-docker-1.0-SNAPSHOT.jar /ebuy-docker-1.0-SNAPSHOT.jar

WORKDIR /
ENTRYPOINT <span class="token punctuation">[</span><span class="token string">&quot;java&quot;</span> , <span class="token string">&quot;-jar&quot;</span> , <span class="token string">&quot;ebuy-docker-1.0-SNAPSHOT.jar&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、执行maven的打包命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mvn clean package <span class="token parameter variable">-DskipTests</span>								<span class="token comment"># 打包跳过测试</span>
mvn clean package <span class="token parameter variable">-DskipTests</span> <span class="token parameter variable">-DskipdockerBuild</span>				<span class="token comment"># 打包跳过测试的同时跳过构建</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>5、创建容器并进行访问</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> ebuy-docker <span class="token parameter variable">-p</span> <span class="token number">8082</span>:8081 ebuy-docker:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="_8-docker-compose" tabindex="-1"><a class="header-anchor" href="#_8-docker-compose" aria-hidden="true">#</a> 8 docker compose</h1><h2 id="_8-1-docker-compose简介" tabindex="-1"><a class="header-anchor" href="#_8-1-docker-compose简介" aria-hidden="true">#</a> 8.1 docker compose简介</h2><p>1、Docker Compose是一个工具，用于定义和运行多容器应用程序的工具；</p><p>2、Docker Compose通过yml文件定义多容器的docker应用；</p><p>3、Docker Compose通过一条命令根据yml文件的定义去创建或管理多容器；</p><p>如下图所示：</p><p><img src="`+P+`" alt="image-20230424160221537"></p><p>Docker Compose 是用来做Docker 的多容器控制，有了 Docker Compose 你可以把所有繁复的 Docker 操作全都一条命令，自动化的完成。</p><p>官网地址：https://docs.docker.com/compose/install/linux/</p><h2 id="_8-2-下载与安装" tabindex="-1"><a class="header-anchor" href="#_8-2-下载与安装" aria-hidden="true">#</a> 8.2 下载与安装</h2><p>下载与安装：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建指定目录存储docker compose</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/local/lib/docker/cli-plugins

<span class="token comment"># 下载并移动</span>
<span class="token function">curl</span> <span class="token parameter variable">-SL</span> https://github.com/docker/compose/releases/download/v2.14.2/docker-compose-linux-x86_64 <span class="token parameter variable">-o</span> /usr/local/lib/docker/cli-plugins/docker-compose

<span class="token comment"># 给docker-compose文件赋予可执行权限</span>
<span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/lib/docker/cli-plugins/docker-compose

<span class="token comment"># 查看docker compose的版本</span>
<span class="token function">docker</span> compose version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-3-入门案例" tabindex="-1"><a class="header-anchor" href="#_8-3-入门案例" aria-hidden="true">#</a> 8.3 入门案例</h2><p>需求：使用docker compose部署redis</p><p>docker-compose.yml文件的内容如下所示：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>7.0.10
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;6379:6379&quot;</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> redis<span class="token punctuation">-</span>data<span class="token punctuation">:</span>/data
<span class="token key atrule">volumes</span><span class="token punctuation">:</span>
  <span class="token key atrule">redis-data</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>docker compose相关命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 启动容器(如果不存在容器就创建、存在则修改)</span>
<span class="token function">docker</span> compose <span class="token parameter variable">-f</span> docker-compose.yml up <span class="token parameter variable">-d</span>

<span class="token comment"># 删除所有容器</span>
<span class="token function">docker</span> compose <span class="token parameter variable">-f</span> docker-compose.yml down

<span class="token comment"># 停止所有容器</span>
<span class="token function">docker</span> compose <span class="token parameter variable">-f</span> docker-compose.yml stop

<span class="token comment"># 启动所有容器</span>
<span class="token function">docker</span> compose <span class="token parameter variable">-f</span> docker-compose.yml start

<span class="token comment"># 重启所有容器</span>
<span class="token function">docker</span> compose <span class="token parameter variable">-f</span> docker-compose.yml restart
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>docker compose文件中其他的常见指令参考官方文档：https://docs.docker.com/compose/compose-file/05-services/</p><h2 id="_8-4-编排spring-boot项目" tabindex="-1"><a class="header-anchor" href="#_8-4-编排spring-boot项目" aria-hidden="true">#</a> 8.4 编排Spring Boot项目</h2><p>需求：使用docker compose部署第六章的spring boot项目</p><p>docker-compose.yml文件的内容如下所示：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token comment"># 部署mysql</span>
  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql
    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span>8.0.29
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;3306:3306&quot;</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> mysql_data<span class="token punctuation">:</span>/var/lib/mysql
      <span class="token punctuation">-</span> mysql_conf<span class="token punctuation">:</span>/etc/mysql
    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;MYSQL_ROOT_PASSWORD=1234&quot;</span>
  <span class="token comment"># 部署spring boot项目</span>
  <span class="token key atrule">ebuy</span><span class="token punctuation">:</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> ebuy
    <span class="token key atrule">image</span><span class="token punctuation">:</span> ebuy<span class="token punctuation">-</span>docker
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;8081:8081&quot;</span>
<span class="token key atrule">volumes</span><span class="token punctuation">:</span>
  <span class="token key atrule">mysql_data</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token key atrule">mysql_conf</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_9-docker镜像仓库" tabindex="-1"><a class="header-anchor" href="#_9-docker镜像仓库" aria-hidden="true">#</a> 9 docker镜像仓库</h1><h2 id="_9-1-镜像仓库简介" tabindex="-1"><a class="header-anchor" href="#_9-1-镜像仓库简介" aria-hidden="true">#</a> 9.1 镜像仓库简介</h2><p>镜像仓库作用：存储镜像，可以通过镜像仓库实现镜像的共享</p><p>镜像仓库的使用流程：</p><p><img src="`+B+'" alt="image-20230424164001006"></p><p>镜像仓库分类：</p><p>1、公有镜像仓库：可以理解成云仓库、公有仓库，是由某个组织、公司维护的仓库，对互联网开放，所有人共享。如官方的仓库docker hub。</p><p>2、私有镜像仓库：不对外开放。一般情况下只在公司内网中使用，用于加快镜像拉取速度、维护公司资产。</p><p>私有镜像仓库种类：</p><p>1、Registry是Docker自带的镜像仓库，部署运行非常简洁，非常适合在测试时使用。</p><p>2、Harbor</p><h2 id="_9-2-harbor简介" tabindex="-1"><a class="header-anchor" href="#_9-2-harbor简介" aria-hidden="true">#</a> 9.2 Harbor简介</h2><p>Harbor是VMware公司开源的企业级DockerRegistry项目，其目标是帮助用户迅速搭建一个企业级的Dockerregistry服务。它以Docker公司开</p><p>源的registry为基础，提供了管理UI，基于角色的访问控制(Role Based Access Control)，AD/LDAP集成、以及审计日志(Auditlogging) 等企业</p><p>用户需求的功能，同时还原生支持中文。</p><h2 id="_9-3-下载与安装" tabindex="-1"><a class="header-anchor" href="#_9-3-下载与安装" aria-hidden="true">#</a> 9.3 下载与安装</h2><p>Harbor被部署为多个Docker容器，因此可以部署在任何支持Docker的Linux服务器上，且需要Docker和Docker Compose才能安装。</p><h3 id="_9-3-1-下载" tabindex="-1"><a class="header-anchor" href="#_9-3-1-下载" aria-hidden="true">#</a> 9.3.1 下载</h3><p>下载地址：https://github.com/goharbor/harbor/releases</p><p><img src="'+C+`" alt="image-20230424165240085"></p><p>这里我们下载在线安装包：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>wget https://github.com/goharbor/harbor/releases/download/v2.8.0/harbor-online-installer-v2.8.0.tgz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_9-3-2-安装" tabindex="-1"><a class="header-anchor" href="#_9-3-2-安装" aria-hidden="true">#</a> 9.3.2 安装</h3><p>具体步骤如下所示：</p><p><strong>1、解压并修改配置文件</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>tar -zxvf harbor-online-installer-v2.8.0.tgz     # 解压tgz包
cp harbor.yml.tmpl harbor.yml                    # 创建一个配置文件
vim harbor.yml                                   # 修改配置文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置的文件的修改如下所示：</p><p><img src="https://docimg4.docs.qq.com/image/2So0-CcvLTNpJMM1meUkDw.png?w=1280&amp;h=360.02826855123675" alt="img"></p><p><strong>2、启动Harbor</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 1、 进入到Harbor的解压目录</span>
<span class="token comment"># 2、执行安装脚本</span>
<span class="token function">sh</span> install.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：如果安装的时候报错了，可以给docker配置多个镜像地址：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// 编辑文件</span>
vim /etc/docker/daemon.json

<span class="token comment">// 文件内容</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;registry-mirrors&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;https://registry.docker-cn.com&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;http://hub-mirror.c.163.com&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;http://f1361db2.m.daocloud.io&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;https://mirror.ccs.tencentyun.com&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;https://phtv51hj.mirror.aliyuncs.com&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3、启动关闭命令</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker compose -f docker-compose.yml up -d            启动 Harbor
docker compose -f docker-compose.yml stop             关闭 Harbor
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4、访问Harbor</strong></p><p>访问地址：http://192.168.136.131/</p><p>用户名/密码：admin/Harbor12345</p><h2 id="_9-4-harbor使用" tabindex="-1"><a class="header-anchor" href="#_9-4-harbor使用" aria-hidden="true">#</a> 9.4 Harbor使用</h2><h3 id="_9-4-1-上传镜像" tabindex="-1"><a class="header-anchor" href="#_9-4-1-上传镜像" aria-hidden="true">#</a> 9.4.1 上传镜像</h3><p>需求：将本地的ebuy-docker镜像上传到Harbor中</p><p>实现步骤：</p><p>1、在Harbor上创建一个项目</p><p><img src="`+U+`" alt="image-20230424171918223"></p><p>2、docker添加安全访问权限</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 编辑/etc/docker/daemon.json文件</span>
<span class="token function">vim</span> /etc/docker/daemon.json

<span class="token comment"># 添加安全访问权限</span>
<span class="token punctuation">{</span>
  <span class="token string">&quot;insecure-registries&quot;</span>:<span class="token punctuation">[</span><span class="token string">&quot;http://192.168.136.142&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment"># 重启Docker</span>
systemctl restart <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、推送docker镜像到该项目中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> login <span class="token parameter variable">-u</span> admin <span class="token parameter variable">-p</span> Harbor12345 <span class="token number">192.168</span>.136.142         			 <span class="token comment"># 登录到Harbor</span>
<span class="token function">docker</span> tag ebuy-docker <span class="token number">192.168</span>.136.142/ebuy-docker/ebuy-docker:latest    <span class="token comment"># 给镜像重新打一个标签</span>
<span class="token function">docker</span> push <span class="token number">192.168</span>.136.142/ebuy-docker/ebuy-docker:latest               <span class="token comment"># 推送镜像到Harbor中</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>推送完毕以后，在ebuy-docker项目中会自动创建一个ebuy-docker的镜像仓库：</p><p><img src="`+J+`" alt="image-20230424172715032"></p><h3 id="_9-4-2-拉取镜像" tabindex="-1"><a class="header-anchor" href="#_9-4-2-拉取镜像" aria-hidden="true">#</a> 9.4.2 拉取镜像</h3><p>命令操作如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> login <span class="token parameter variable">-u</span> admin <span class="token parameter variable">-p</span> Harbor12345 <span class="token number">192.168</span>.136.142         <span class="token comment"># 登录到Harbor</span>
<span class="token function">docker</span> pull <span class="token number">192.168</span>.136.142/ebuy-docker/ebuy-docker:latest   <span class="token comment"># 拉取镜像</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,420),Y=[F];function z($,W){return n(),a("div",null,Y)}const K=s(V,[["render",z],["__file","day01课件.html.vue"]]);export{K as default};
