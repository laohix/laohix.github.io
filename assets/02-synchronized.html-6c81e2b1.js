import{_ as n,o as s,c as a,e as t}from"./app-8007fa1b.js";const e="/assets/img013-457ab6a1.png",p="/assets/img014-6a2e7e56.png",c="/assets/img020-04b21e22.png",o="/assets/img019-470c513d.png",i="/assets/img018-699d00a0.png",l="/assets/img017-4f15e175.png",u="/assets/img016-df5d09fc.png",d="/assets/img015-31f065eb.png",r="/assets/img021-e106295d.png",k={},m=t(`<h1 id="一、概述" tabindex="-1"><a class="header-anchor" href="#一、概述" aria-hidden="true">#</a> 一、概述</h1><p>synchronized 实现加锁、解锁操作的底层逻辑：</p><ul><li>从前我以为：用钥匙开锁</li><li>但是实际上：小狗撒尿，哪只小狗留下了痕迹，这块地盘就属于谁 <ul><li>监视器对象：小狗留下痕迹的地方</li><li>申请锁的线程：小狗</li><li>锁对象：线程通过锁对象找到监视器对象</li></ul></li></ul><br><h1 id="二、锁膨胀机制" tabindex="-1"><a class="header-anchor" href="#二、锁膨胀机制" aria-hidden="true">#</a> 二、锁膨胀机制</h1><h2 id="_1、初衷" tabindex="-1"><a class="header-anchor" href="#_1、初衷" aria-hidden="true">#</a> 1、初衷</h2><p>锁膨胀机制是 JDK1.6 引入的，在引入之前，线程申请锁都必须严格执行加锁、解锁这样的操作<br></p><p>但是其实，如果来申请锁的只有一个线程，那么没必要严格执行加锁、解锁<br></p><p>因为此时没有竞争，此时不执行加锁、解锁的操作就可以节约操作时间<br></p><h2 id="_2、锁膨胀机制的过程" tabindex="-1"><a class="header-anchor" href="#_2、锁膨胀机制的过程" aria-hidden="true">#</a> 2、锁膨胀机制的过程</h2><ul><li>无锁状态：没有线程来申请锁</li><li>偏向锁状态：只有一个线程来申请锁，<span style="color:blue;font-weight:bold;">没有竞争</span>，不需要做加锁、解锁的操作 <ul><li>从无锁状态到当前状态，每次来申请锁的都是这同一个线程，中间没有别的线程来申请过</li></ul></li><li>轻量级锁状态：只有一个线程来申请锁，<span style="color:blue;font-weight:bold;">没有竞争</span>，不需要做加锁、解锁的操作 <ul><li>从上一个状态到现在状态，锁对象被不同线程申请过，只不过每次都是只有一个线程来申请</li></ul></li><li>重量级锁状态：同时有多个线程来申请锁，<span style="color:blue;font-weight:bold;">有竞争</span>，需要做加锁、解锁的操作</li></ul><br><h2 id="_3、通过程序查看锁膨胀过程" tabindex="-1"><a class="header-anchor" href="#_3、通过程序查看锁膨胀过程" aria-hidden="true">#</a> 3、通过程序查看锁膨胀过程</h2><h3 id="_1导入依赖" tabindex="-1"><a class="header-anchor" href="#_1导入依赖" aria-hidden="true">#</a> ①导入依赖</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.openjdk.jol<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jol-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_2开启偏向锁功能" tabindex="-1"><a class="header-anchor" href="#_2开启偏向锁功能" aria-hidden="true">#</a> ②开启偏向锁功能</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-XX:+UseBiasedLocking
-XX:BiasedLockingStartupDelay=0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3测试代码" tabindex="-1"><a class="header-anchor" href="#_3测试代码" aria-hidden="true">#</a> ③测试代码</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// non-biasable：不可偏向，意思是当前 JVM 没有开启偏向锁功能</span>
<span class="token comment">// biasable：可偏向，意思是当前 JVM 开启了偏向锁功能</span>
<span class="token comment">// biased：偏向锁</span>
<span class="token comment">// thin lock：轻量级锁</span>
<span class="token comment">// fat lock：重量级锁</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01LockPangPang</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>

        <span class="token comment">// 1、创建一个对象作为锁对象</span>
        <span class="token class-name">Object</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 2、没有线程申请锁</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 3、main 线程申请锁</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 4、创建两个线程申请锁</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;thread-a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;thread-b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="_4、锁膨胀不可逆" tabindex="-1"><a class="header-anchor" href="#_4、锁膨胀不可逆" aria-hidden="true">#</a> 4、锁膨胀不可逆</h2><ul><li>从当前状态不能回到上一个状态</li><li>但是，如果重量级锁释放之后，又回到没有竞争的状态，那么锁状态也会直接回到最初</li></ul><br><h2 id="_5、锁自旋" tabindex="-1"><a class="header-anchor" href="#_5、锁自旋" aria-hidden="true">#</a> 5、锁自旋</h2><h3 id="_1发生的场景" tabindex="-1"><a class="header-anchor" href="#_1发生的场景" aria-hidden="true">#</a> ①发生的场景</h3><p>在轻量级锁状态下，A 线程正在执行同步代码，B 线程来申请同步锁<br> 按说这个时候，锁应该升级到重量级锁，但是考虑到升级到重量级锁会导致以后的操作都需要加锁、解锁，所以就考虑能不能再想想办法，能不升级尽量不升<br></p><h3 id="_2锁自旋机制" tabindex="-1"><a class="header-anchor" href="#_2锁自旋机制" aria-hidden="true">#</a> ②锁自旋机制</h3><p>锁对象还是保持在轻量级锁状态下，B 线程不进入阻塞(BLOCKED)，保持在 RUNNABLE 状态执行一些无意义的代码<br> B 线程自旋一会儿之后，再看 A 线程是否执行完了同步代码：</p><ul><li>执行完啦：B 线程去执行同步代码，锁对象仍然保持在轻量级锁状态</li><li>没执行完：B 线程阻塞，锁对象升级到重量级锁状态</li></ul><br><h3 id="_3自适应自旋" tabindex="-1"><a class="header-anchor" href="#_3自适应自旋" aria-hidden="true">#</a> ③自适应自旋</h3><p>自旋时无意义代码循环执行的次数，参考上一次自旋成功时，循环的次数，以增大自旋成功的几率<br></p><h3 id="_4评价" tabindex="-1"><a class="header-anchor" href="#_4评价" aria-hidden="true">#</a> ④评价</h3><ul><li>自旋成功率高：总体上节约了性能</li><li>自旋成功率低：自旋操作本身浪费了CPU性能</li></ul><p>所以锁自旋机制适合用于同步代码执行时间相对固定的场景</p><br><h2 id="_6、性能验证" tabindex="-1"><a class="header-anchor" href="#_6、性能验证" aria-hidden="true">#</a> 6、性能验证</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    number<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">situation1</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">Demo02LockSpeed</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo02LockSpeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">long</span> beginTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 一个线程不加同步锁，执行 1000 万次累加（11ms）</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        demo<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> usedTime <span class="token operator">=</span> endTime <span class="token operator">-</span> beginTime<span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;usedTime = &quot;</span> <span class="token operator">+</span> usedTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">situation2</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Demo02LockSpeed</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo02LockSpeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">long</span> beginTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 一个线程加了同步锁，执行 1000 万次累加（364ms）</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        demo<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> usedTime <span class="token operator">=</span> endTime <span class="token operator">-</span> beginTime<span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;usedTime = &quot;</span> <span class="token operator">+</span> usedTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Demo02LockSpeed</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo02LockSpeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 两个个线程加了同步锁，各自执行 1000 万次累加（404ms、424ms）</span>
    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
        <span class="token keyword">long</span> beginTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            demo<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> usedTime <span class="token operator">=</span> endTime <span class="token operator">-</span> beginTime<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;usedTime = &quot;</span> <span class="token operator">+</span> usedTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;thread-a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
        <span class="token keyword">long</span> beginTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            demo<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> usedTime <span class="token operator">=</span> endTime <span class="token operator">-</span> beginTime<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;usedTime = &quot;</span> <span class="token operator">+</span> usedTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;thread-b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h1 id="三、对象存储结构" tabindex="-1"><a class="header-anchor" href="#三、对象存储结构" aria-hidden="true">#</a> 三、对象存储结构</h1><p>为了了解从锁对象出发，是如何一步一步找到监视器对象的，所以来学习对象存储结构<br></p><h2 id="_1、总体结构" tabindex="-1"><a class="header-anchor" href="#_1、总体结构" aria-hidden="true">#</a> 1、总体结构</h2><p>现在我们都知道了对象（包括数组）都是放在堆内存中，那么对象在堆内存中保存时的数据结构是什么样子的呢？<br></p><p><img src="`+e+'" alt="img.png"></p><h3 id="_1对象头" tabindex="-1"><a class="header-anchor" href="#_1对象头" aria-hidden="true">#</a> ①对象头</h3><ul><li>非数组对象 <ul><li>Mark Word</li><li>类型指针</li></ul></li><li>数组 <ul><li>Mark Word</li><li>类型指针</li><li>数组长度</li></ul></li></ul><p><img src="'+p+'" alt="img.png"></p><br><h3 id="_2对象体" tabindex="-1"><a class="header-anchor" href="#_2对象体" aria-hidden="true">#</a> ②对象体</h3><p>这一部分也称为：实例数据。也就是对象中实际包含的属性数据。</p><h3 id="_3对齐字节" tabindex="-1"><a class="header-anchor" href="#_3对齐字节" aria-hidden="true">#</a> ③对齐字节</h3><p>为了寻址方便，JVM 要求每一个对象起始地址必须是 8 字节的整数倍，也就是要求每一个对象的存储空间都是 8 字节的整数倍。所以对于占空间不满足这一要求的对象会进行填充。所以这一部分是不一定存在的。</p><h2 id="_2、mark-word" tabindex="-1"><a class="header-anchor" href="#_2、mark-word" aria-hidden="true">#</a> 2、Mark Word</h2><p>Mark Word 部分用于存储对象自身运行时数据，如哈希码、GC分代年龄等，这部分数据的长度在 32 位和 64 位的虚拟机中分别为 32 位和 64 位。<br> 由于对象头的信息是与对象自身定义的数据没有关系的额外存储成本，因此考虑到 JVM 的空间效率，Mark Word 被设计成为一个非固定的数据结构，<br> 以便存储更多有效的数据，它会根据对象本身的状态复用自己的存储空间。<br> 在 Mark Word 各种状态下的数据结构中，我们首先要关注一个数据：锁标识位。下面表格需要大家记住：<br></p><table><thead><tr><th>锁标识位数值</th><th>是否偏向</th><th>锁标识位含义</th></tr></thead><tbody><tr><td>01</td><td>0</td><td>无锁状态</td></tr><tr><td>01</td><td>1</td><td>偏向锁状态</td></tr><tr><td>00</td><td>——</td><td>轻量级锁状态</td></tr><tr><td>10</td><td>——</td><td>重量级锁状态</td></tr><tr><td>11</td><td>——</td><td>GC状态</td></tr></tbody></table><blockquote><p>Mark Word 的存储结构对应五种状态。同一时刻它只可能是五种状态中的其中一种，所以没有必要把 Mark Word 分成五份儿分别保存这五种状态。<br> Mark Word 在每一个时刻只需要保存当前状态的数据即可。<br> 每一种状态保存的数据结构不同。</p></blockquote><p>所以 Mark Word 这同一块存储空间，在不同的状态下，有不同数据结构。</p><h3 id="_1无锁状态" tabindex="-1"><a class="header-anchor" href="#_1无锁状态" aria-hidden="true">#</a> ①无锁状态</h3><p><img src="'+c+'" alt="img.png"></p><br><h3 id="_2偏向锁状态" tabindex="-1"><a class="header-anchor" href="#_2偏向锁状态" aria-hidden="true">#</a> ②偏向锁状态</h3><p><img src="'+o+'" alt="img.png"></p><br><h3 id="_3轻量级锁状态" tabindex="-1"><a class="header-anchor" href="#_3轻量级锁状态" aria-hidden="true">#</a> ③轻量级锁状态</h3><p><img src="'+i+'" alt="img.png"></p><br><h3 id="_4重量级锁状态" tabindex="-1"><a class="header-anchor" href="#_4重量级锁状态" aria-hidden="true">#</a> ④重量级锁状态</h3><p>这里我们看到了下一个非常重要的数据：指向对象监视器的指针。当前对象是由哪一个线程所锁定就是由这个对象监视器来记录的。</p><p><img src="'+l+'" alt="img.png"></p><br><h3 id="_5gc-状态" tabindex="-1"><a class="header-anchor" href="#_5gc-状态" aria-hidden="true">#</a> ⑤GC 状态</h3><p><img src="'+u+`" alt="img.png"></p><h2 id="_3、监视器对象" tabindex="-1"><a class="header-anchor" href="#_3、监视器对象" aria-hidden="true">#</a> 3、监视器对象</h2><p>监视器对象是 C/C++ 开发的，Java 环境下看不到，类名称是：ObjectMonitor</p><div class="language-C line-numbers-mode" data-ext="C"><pre class="language-C"><code>ObjectMonitor() {
    _header       = NULL;
    _count        = 0;  // 锁计数器
    _waiters      = 0;
    _recursions   = 0; // 锁的重入次数
    _object       = NULL;
    _owner        = NULL; // 指向持有 ObjectMonitor 对象的线程
    _WaitSet      = NULL; // 处于 wait 状态的线程，会被加入到 _WaitSet（等待队列）
    _WaitSetLock  = 0 ;
    _Responsible  = NULL ;
    _succ         = NULL ;
    _cxq          = NULL ;
    FreeNext      = NULL ;
    _EntryList    = NULL ; // 处于等待锁 block 状态的线程，会被加入到该列表（阻塞队列）
    _SpinFreq     = 0 ;
    _SpinClock    = 0 ;
    OwnerIsThread = 0 ;
  }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>锁对象和监视器对象的关系：<br></p><p><img src="`+d+`" alt="img.png"></p><h1 id="四、锁重入机制" tabindex="-1"><a class="header-anchor" href="#四、锁重入机制" aria-hidden="true">#</a> 四、锁重入机制</h1><h2 id="_1、概念" tabindex="-1"><a class="header-anchor" href="#_1、概念" aria-hidden="true">#</a> 1、概念</h2><p>同步锁发生了多层的嵌套：<br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>synchroinized <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    synchroinized <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="_2、举例证明存在的意义" tabindex="-1"><a class="header-anchor" href="#_2、举例证明存在的意义" aria-hidden="true">#</a> 2、举例证明存在的意义</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 包含同步代码块的方法调用另一个包含同步代码块的方法，导致同步代码块简介嵌套</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">method02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果根据业务的需要，当前方法确实需要加 synchronized，那么就不应该去掉</span>
        <span class="token comment">// 因为外界调用当前方法未必会提供 synchronized 保证</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">method02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、为什么要支持锁重入" tabindex="-1"><a class="header-anchor" href="#_3、为什么要支持锁重入" aria-hidden="true">#</a> 3、为什么要支持锁重入？</h2><p>同一个线程，在外层synchronized得到锁之后，执行同步代码的过程中，又遇到了同一个锁对象的synchronized，<br> 此时系统必须允许这个线程继续得到锁，否则程序无法继续执行</p><br><h1 id="五、synchronized-字节码指令" tabindex="-1"><a class="header-anchor" href="#五、synchronized-字节码指令" aria-hidden="true">#</a> 五、synchronized 字节码指令</h1><h2 id="_1、java-代码" tabindex="-1"><a class="header-anchor" href="#_1、java-代码" aria-hidden="true">#</a> 1、Java 代码</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04SyncByteCode</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Demo04SyncByteCode</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="_2、执行字节码指令分析" tabindex="-1"><a class="header-anchor" href="#_2、执行字节码指令分析" aria-hidden="true">#</a> 2、执行字节码指令分析</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入字节码文件所在目录，运行下面命令：</span>
javap <span class="token parameter variable">-c</span> 字节码文件文件名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="_3、结论" tabindex="-1"><a class="header-anchor" href="#_3、结论" aria-hidden="true">#</a> 3、结论</h2><ul><li>加锁操作对应的字节码指令：monitorenter</li><li>解锁操在对应的字节码指令：monitorexit</li></ul><br><h1 id="六、加锁解锁流程" tabindex="-1"><a class="header-anchor" href="#六、加锁解锁流程" aria-hidden="true">#</a> 六、加锁解锁流程</h1><p><img src="`+r+'" alt="img.png"></p>',100),v=[m];function b(h,g){return s(),a("div",null,v)}const _=n(k,[["render",b],["__file","02-synchronized.html.vue"]]);export{_ as default};
