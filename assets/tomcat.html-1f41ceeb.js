import{_ as a,o as l,c as i,e as n}from"./app-8007fa1b.js";const t="/assets/img001-23e944c4.png",e="/assets/img002-1e748a6b.png",s={},c=n('<h1 id="一、tomcat" tabindex="-1"><a class="header-anchor" href="#一、tomcat" aria-hidden="true">#</a> 一、Tomcat</h1><h2 id="_1、解压" tabindex="-1"><a class="header-anchor" href="#_1、解压" aria-hidden="true">#</a> 1、解压</h2><p>解压到已非中文没有空格的目录。<br><br></p><h2 id="_2、环境要求" tabindex="-1"><a class="header-anchor" href="#_2、环境要求" aria-hidden="true">#</a> 2、环境要求</h2><p>要求正确安装JDK并且正确配置JAVA_HOME。<br> 请使用java -version方式来测试是否正确。<br><br> ※特别提示：当初栋哥带我们装了两个版本的JDK，一个JDK8，一个JDK17。<br> 现在Tomcat10要求使用JDK17。<br> 此时要求JAVA_HOME环境变量一定要指向JDK17的安装目录（bin目录的上一级）。<br> 这里要注意：Tomcat是不看PATH环境变量的，它只看JAVA_HOME。<br><br></p><h2 id="_3、启动tomcat" tabindex="-1"><a class="header-anchor" href="#_3、启动tomcat" aria-hidden="true">#</a> 3、启动Tomcat</h2><ul><li>❤打开命令行窗口</li><li>❤进入Tomcat的bin目录</li><li>❤运行catalina run <br></li></ul><h2 id="_4、停止tomcat" tabindex="-1"><a class="header-anchor" href="#_4、停止tomcat" aria-hidden="true">#</a> 4、停止Tomcat</h2><ul><li>❤办法一：在启动Tomcat的窗口按Ctrl+c</li><li>❤办法二：运行shutdown.bat脚本 <br></li></ul><h2 id="_5、解决乱码问题" tabindex="-1"><a class="header-anchor" href="#_5、解决乱码问题" aria-hidden="true">#</a> 5、解决乱码问题</h2><ul><li>❤找到安装目录下\\apache-tomcat-10.1.7\\conf\\logging.properties文件</li><li>❤用文本编辑器打开这个文件</li><li>❤把所有UTF-8替换为GBK</li><li>❤Tomcat需要重新启动才能让配置生效</li></ul><h2 id="_6、打开tomcat自己的首页" tabindex="-1"><a class="header-anchor" href="#_6、打开tomcat自己的首页" aria-hidden="true">#</a> 6、打开Tomcat自己的首页</h2><p>http://localhost:8080<br><br> http表示当前使用的协议。<br> localhost这个部分是IP地址，写IP地址是为了在网络上找到服务器所在的电脑。<br> localhost本身表示本机。<br> 8080是在找到服务器所在电脑之后，找到Tomcat对应的进程。<br> 8080是Tomcat进程监听的端口号。<br><br> 所以http://localhost:8080这个地址整体就是帮我们找到Tomcat服务器的根目录。<br></p><h2 id="_7、在tomcat上部署web应用" tabindex="-1"><a class="header-anchor" href="#_7、在tomcat上部署web应用" aria-hidden="true">#</a> 7、在Tomcat上部署Web应用</h2><h3 id="_1-web应用的目录结构" tabindex="-1"><a class="header-anchor" href="#_1-web应用的目录结构" aria-hidden="true">#</a> [1]Web应用的目录结构</h3><p>在Web应用根目录下可以存放各种静态资源。</p><ul><li>HTML页面</li><li>CSS文件</li><li>JavaScript文件</li><li>图片文件 为了让很多资源便于管理，通常会创建对应的目录。</li><li>专门存放HTML页面的目录。</li><li>专门存放CSS文件的目录。</li><li>专门存放JavaScript文件的目录。</li><li>专门存放图片文件的目录。</li><li>…… WEB-INF目录是必须有的，而且目录名必须是WEB-INF，一个字符都不能错。<br> WEB-INF目录下：</li><li>.xml：是整个Web应用的核心配置文件。将来我们和Tomcat交互的Java程序都必须在web.xml中配置。 <ul><li>web.xml也被称为『部署描述符』，英文叫：deployment descriptor</li></ul></li><li>sses目录：这个目录就是我们常说的『类路径』 <ul><li>会放入类路径的资源一：src目录下的资源，通常是Java源程序。</li><li>会放入类路径的资源二：被标记为Resources Root的目录（通常存放配置文件）下的配置文件</li></ul></li><li>目录：存放当前Web应用所需的第三方jar包。 <br></li></ul><h3 id="_2-部署web应用" tabindex="-1"><a class="header-anchor" href="#_2-部署web应用" aria-hidden="true">#</a> [2]部署Web应用</h3><p>把一个符合Web应用目录结构要求的目录放入Tomcat解压目录/webapps目录下。<br><br></p><h3 id="_3-通过路径访问刚刚部署的web应用" tabindex="-1"><a class="header-anchor" href="#_3-通过路径访问刚刚部署的web应用" aria-hidden="true">#</a> [3]通过路径访问刚刚部署的Web应用</h3><ul><li>❤通过localhost:8080进入Tomcat服务器根目录</li><li>❤Tomcat服务器根目录映射到硬盘上，对应的就是webapps目录</li><li>❤在浏览器地址栏上想要在localhost:8080下面找到具体的Web应用，就相当于在webapps目录下找到Web应用的目录。</li><li>❤此时访问http://localhost:8080/demo/地址就进入了Web应用根目录。</li><li>❤此时访问http://localhost:8080/demo/index.html地址就是到Web应用根目录下找index.html这个具体的资源</li><li>❤此时访问http://localhost:8080/demo/static/tank.jpg地址就是Web应用根目录下再进入static目录，然后在static目录下再找到tank.jpg这个具体资源。 <br></li></ul><h2 id="_8、在idea创建tomcat镜像" tabindex="-1"><a class="header-anchor" href="#_8、在idea创建tomcat镜像" aria-hidden="true">#</a> 8、在IDEA创建Tomcat镜像</h2><p>https://gitee.com/heavy_code_industry/note-whole2023/blob/master/part03-FrontEnd/04_%E7%AC%AC%E5%9B%9B%E7%AB%A0%20XML_Tomcat_HTTP.md</p><h2 id="_9、浏览器访问web应用路径和部署目录关系" tabindex="-1"><a class="header-anchor" href="#_9、浏览器访问web应用路径和部署目录关系" aria-hidden="true">#</a> 9、浏览器访问Web应用路径和部署目录关系</h2><p><img src="'+t+'" alt="images"></p><br><h2 id="_10、部署目录和module目录关系" tabindex="-1"><a class="header-anchor" href="#_10、部署目录和module目录关系" aria-hidden="true">#</a> 10、部署目录和module目录关系</h2><p><img src="'+e+`" alt="images"></p><br><h1 id="二、http" tabindex="-1"><a class="header-anchor" href="#二、http" aria-hidden="true">#</a> 二、HTTP</h1><h2 id="_1、概述" tabindex="-1"><a class="header-anchor" href="#_1、概述" aria-hidden="true">#</a> 1、概述</h2><ul><li>HTTP：Hyper Text Transfer Protocol 超文本传输协议</li><li>HTTP交互方式： <ul><li>建立连接</li><li>发送请求</li><li>返回响应</li><li>关闭连接</li></ul></li><li>HTTP1.0和1.1区别 <ul><li>1.0每个请求建立一个连接，效率较低</li><li>1.1下载网页、下载网页中的图片等资源使用的是同一个连接</li></ul></li></ul><h2 id="_2、请求报文格式" tabindex="-1"><a class="header-anchor" href="#_2、请求报文格式" aria-hidden="true">#</a> 2、请求报文格式</h2><h3 id="_1总体格式说明" tabindex="-1"><a class="header-anchor" href="#_1总体格式说明" aria-hidden="true">#</a> ①总体格式说明</h3><ul><li>报文首部：对当前请求和报文主体进行相关说明</li><li>空行：表示下面即将开始报文的正文</li><li>报文主体：当前请求主要要发送给服务器的部分</li></ul><h3 id="_2报文首部" tabindex="-1"><a class="header-anchor" href="#_2报文首部" aria-hidden="true">#</a> ②报文首部</h3><ul><li>请求行：对当前请求进行简要说明 <ul><li>请求方式：GET或POST</li><li>请求地址：比如/module03_web_war_exploded/index.jsp</li><li>协议名称和版本：HTTP/1.1</li></ul></li><li>请求消息头：对当前请求、请求体进行详细说明 <ul><li>格式都是键值对，键和值之间用冒号分开的</li><li>常用需要留意的请求消息头： <ul><li>Cookie：当前请求携带的Cookie信息</li><li>Referer：表示当前页面是从哪个页面来的</li><li>Content-Type：对请求体的数据类型进行说明</li></ul></li></ul></li></ul><h3 id="_3get请求和post请求的区别" tabindex="-1"><a class="header-anchor" href="#_3get请求和post请求的区别" aria-hidden="true">#</a> ③GET请求和POST请求的区别</h3><ul><li>GET请求没有请求体，POST请求有请求体</li><li>因为没有请求体，所以GET请求只能把请求参数附着在URL地址后面</li><li>因为附着在URL地址的后面 <ul><li>URL地址后面能够附着请求参数的数量是有限的</li><li>敏感信息也会明文显示出来，不安全</li></ul></li><li>POST请求把请求参数放在请求体中，浏览器地址栏看不到 <ul><li>请求体没有容量限制</li><li>请求体不会被直接看到，更安全</li></ul></li><li>表单建议使用POST方式提交</li><li>文件上传操作：必须使用POST请求，不能使用GET请求</li></ul><br><h2 id="_3、响应报文" tabindex="-1"><a class="header-anchor" href="#_3、响应报文" aria-hidden="true">#</a> 3、响应报文</h2><h3 id="_1总体格式说明-1" tabindex="-1"><a class="header-anchor" href="#_1总体格式说明-1" aria-hidden="true">#</a> ①总体格式说明</h3><ul><li>报文首部：对当前响应和报文主体进行相关说明</li><li>空行：表示下面即将开始报文的正文</li><li>报文主体：当前响应主要要返回给浏览器的部分</li></ul><h3 id="_2响应状态行" tabindex="-1"><a class="header-anchor" href="#_2响应状态行" aria-hidden="true">#</a> ②响应状态行</h3><ul><li>协议名称和版本号：HTTP/1.1</li><li>响应状态码：有很多，每一个码都有特定的含义 <ul><li>比如：200表示请求处理成功，能够返回有效响应</li></ul></li><li>响应状态码的说明信息 <ul><li>比如：OK通常是对200进行说明</li></ul></li></ul><h3 id="_3响应消息头" tabindex="-1"><a class="header-anchor" href="#_3响应消息头" aria-hidden="true">#</a> ③响应消息头</h3><ul><li>总体格式和请求头一样，都是键值对格式，键和值之间用冒号分开</li><li>Content-Type：说明响应体的内容类型</li><li>Set-Cookie：服务器端给浏览器端返回Cookie信息</li></ul><h3 id="_4响应体" tabindex="-1"><a class="header-anchor" href="#_4响应体" aria-hidden="true">#</a> ④响应体</h3><p>浏览器拿到响应体就是要在浏览器窗口中显示的。例如：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>目标页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>目标页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5响应状态码" tabindex="-1"><a class="header-anchor" href="#_5响应状态码" aria-hidden="true">#</a> ⑤响应状态码</h3><ul><li>200： 请求成功，浏览器会把响应体内容（通常是html）显示在浏览器中；</li><li>404： 请求的资源没有找到，说明客户端错误的请求了不存在的资源；</li><li>405： 请求的方式不允许</li><li>500： 请求资源找到了，但服务器内部出现了错误；</li><li>302： 重定向，当响应码为302时，表示服务器要求浏览器重新再发一个请求，服务器会发送一个响应头Location指定新请求的URL地址；</li><li>304： 使用了本地缓存</li></ul><h3 id="_6404问题解决" tabindex="-1"><a class="header-anchor" href="#_6404问题解决" aria-hidden="true">#</a> ⑥404问题解决</h3><ul><li>请求路径不正确，根据请求路径无法找到目标资源。</li><li>访问了WEB-INF目录下的资源</li><li>Web应用启动时就抛出了异常，整个Web应用不可用，即使是正确的路径访问资源也是404</li><li>如果上面的方向都检查过了，没有问题，那么可能部署目录下不是按最新的代码运行的。此时重新构建、重新部署试试。 <ul><li>把Tomcat停止</li><li>到Edit Configurations...这里把Tomcat上现在部署的应用去掉</li><li>到Build菜单下点Rebuild Project</li><li>重新部署应用</li></ul></li></ul><h1 id="三、总结" tabindex="-1"><a class="header-anchor" href="#三、总结" aria-hidden="true">#</a> 三、总结</h1><p>以下几点大家一定要做到：</p><ul><li>Tomcat解压、启动、访问操作</li><li>在IDEA中关联Tomcat</li><li>在IDEA中创建Web形式的module</li><li>把Web形式的module部署到IDEA关联的Tomcat上运行</li></ul><br><p>理论的部分结合以后的学习慢慢理解：</p><ul><li>Web应用的结构</li><li>通过浏览器访问Web应用时路径对照部署目录的目录结构来写</li><li>部署目录和开发时module的目录结构对应关系</li><li>HTTP协议的结构 <ul><li>请求报文 <ul><li>报文首部 <ul><li>请求行：请求方式 请求地址 协议名和版本</li><li>请求消息头：键值对</li></ul></li><li>空行</li><li>报文主体：只有POST请求才有请求体</li></ul></li><li>响应报文 <ul><li>报文首部 <ul><li>响应状态行：协议名称和版本 响应状态码 响应状态码说明</li><li>响应消息头：键值对</li></ul></li><li>空行</li><li>报文主体：给浏览器显示用的信息</li><li>响应状态码：200、302、404、405、500</li></ul></li><li>GET请求和POST请求的区别</li></ul></li></ul>`,60),o=[c];function r(d,p){return l(),i("div",null,o)}const u=a(s,[["render",r],["__file","tomcat.html.vue"]]);export{u as default};
