const l=JSON.parse('{"key":"v-dd1677ba","path":"/interview/03.Java%E9%AB%98%E7%BA%A7/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html","title":"设计模式","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1 什么是设计模式？有什么好处？","slug":"_1-什么是设计模式-有什么好处","link":"#_1-什么是设计模式-有什么好处","children":[]},{"level":2,"title":"2 设计模式的7大基本原则有哪些？","slug":"_2-设计模式的7大基本原则有哪些","link":"#_2-设计模式的7大基本原则有哪些","children":[]},{"level":2,"title":"3 使用哪种设计模式可以提高代码可维护性？","slug":"_3-使用哪种设计模式可以提高代码可维护性","link":"#_3-使用哪种设计模式可以提高代码可维护性","children":[]},{"level":2,"title":"4 使用哪种设计模式可以提高代码的复用性？","slug":"_4-使用哪种设计模式可以提高代码的复用性","link":"#_4-使用哪种设计模式可以提高代码的复用性","children":[]},{"level":2,"title":"5 你在工作中是如何使用设计模式的？","slug":"_5-你在工作中是如何使用设计模式的","link":"#_5-你在工作中是如何使用设计模式的","children":[]},{"level":2,"title":"6 单例模式的多种写法","slug":"_6-单例模式的多种写法","link":"#_6-单例模式的多种写法","children":[]},{"level":2,"title":"7 如何破坏单例模式？","slug":"_7-如何破坏单例模式","link":"#_7-如何破坏单例模式","children":[]},{"level":2,"title":"8 为什么说枚举是实现单例最好的方式？","slug":"_8-为什么说枚举是实现单例最好的方式","link":"#_8-为什么说枚举是实现单例最好的方式","children":[]},{"level":2,"title":"9 不使用锁如何实现线程安全的单例？","slug":"_9-不使用锁如何实现线程安全的单例","link":"#_9-不使用锁如何实现线程安全的单例","children":[]},{"level":2,"title":"10 什么是享元模式，有哪些具体应用？","slug":"_10-什么是享元模式-有哪些具体应用","link":"#_10-什么是享元模式-有哪些具体应用","children":[]}],"git":{"updatedTime":1716198854000,"contributors":[{"name":"laohai","email":"1409117198@qq.com","commits":1}]},"filePathRelative":"interview/03.Java高级/03.设计模式/设计模式.md","excerpt":""}');export{l as data};
