import{_ as n,o as s,c as a,e as t}from"./app-8007fa1b.js";const e={},p=t(`<h1 id="一、helloworld" tabindex="-1"><a class="header-anchor" href="#一、helloworld" aria-hidden="true">#</a> 一、HelloWorld</h1><h2 id="_1、目标" tabindex="-1"><a class="header-anchor" href="#_1、目标" aria-hidden="true">#</a> 1、目标</h2><p>用户点击一个按钮，点击之后弹出一个警告框，警告框里显示HelloWorld。</p><h2 id="_2、代码" tabindex="-1"><a class="header-anchor" href="#_2、代码" aria-hidden="true">#</a> 2、代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>

    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">&quot;btn&quot;</span><span class="token operator">&gt;</span>点我，有本事你点我！<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 为什么放在 body 标签后面？ <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 因为浏览器按顺序加载<span class="token constant">HTML</span>标签，如果script标签在button标签前面， <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 那么script标签中JavaScript代码执行时，就无法加载button标签对应的元素对象。 <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;text/javascript&quot;</span><span class="token operator">&gt;</span>
    <span class="token comment">// 1、查找按钮对象</span>
    <span class="token keyword">var</span> btnEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;btn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// ※在浏览器的控制台打印 btnEle 变量的值</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;btnEle=&quot;</span><span class="token operator">+</span>btnEle<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2、声明一个函数，函数每次执行时都弹出一个alert()警告框</span>
    <span class="token keyword">function</span> <span class="token function">showAlert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ※alert()是系统内置的函数，可以直接调用</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;HelloWorld&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 3、给按钮对象绑定单击事件响应函数</span>
    <span class="token comment">// ※语法格式：元素对象.事件属性 = 响应函数的引用</span>
    <span class="token comment">// ※注意：函数的名称就是函数的引用，后面千万不要加括号</span>
    <span class="token comment">// ※函数名（或函数引用）后面加括号表示调用、执行这个函数</span>
    btnEle<span class="token punctuation">.</span>onclick <span class="token operator">=</span> showAlert<span class="token punctuation">;</span>

<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="二、基本语法" tabindex="-1"><a class="header-anchor" href="#二、基本语法" aria-hidden="true">#</a> 二、基本语法</h1><h2 id="_1、数据类型" tabindex="-1"><a class="header-anchor" href="#_1、数据类型" aria-hidden="true">#</a> 1、数据类型</h2><h3 id="_1基本数据类型" tabindex="-1"><a class="header-anchor" href="#_1基本数据类型" aria-hidden="true">#</a> ①基本数据类型</h3><ul><li>字符串：JavaScript中不区分字符和字符串，单引号、双引号定义的都是字符串。</li><li>数值类型：JavaScript中不区分整数和小数。</li><li>布尔类型：true和false</li></ul><h3 id="_2引用类型" tabindex="-1"><a class="header-anchor" href="#_2引用类型" aria-hidden="true">#</a> ②引用类型</h3><ul><li>对象</li><li>数组</li><li>函数：JavaScript中函数也是一种特殊的对象</li><li>正则表达式</li></ul><h3 id="_3类型之间的转换" tabindex="-1"><a class="header-anchor" href="#_3类型之间的转换" aria-hidden="true">#</a> ③类型之间的转换</h3><ul><li>字符串转换为布尔类型的规则是：非空字符串转换为true，空字符串转换为false</li><li>数值类型转换为布尔类型：非零的数值（哪怕是负数）：转换为true，为零的数值：转换为false</li><li>字符串可以自动转换为数值：在数学运算中转换 <ul><li>但是注意：+号和字符串在一起会被理解为字符串连接</li></ul></li></ul><h3 id="_4两个特殊值" tabindex="-1"><a class="header-anchor" href="#_4两个特殊值" aria-hidden="true">#</a> ④两个特殊值</h3><ul><li>NaN：not a number，意思是“非数字”，用来表示当前计算结果不是数字。</li><li>undefined：未定义。</li></ul><h2 id="_2、变量" tabindex="-1"><a class="header-anchor" href="#_2、变量" aria-hidden="true">#</a> 2、变量</h2><ul><li>ES6之前的语法规则中，使用var关键词声明变量。</li><li>ES6开始的语法规则中，除了var，还可以使用let关键词声明变量。</li><li>一个变量声明之后，可以赋值任何类型。</li><li>一个变量在使用过程中，仍然可以赋值各种不同的类型。</li><li>JavaScript中标识符严格区分大小写。</li><li>在声明变量之前打印变量不会报错，只是返回undefined。</li></ul><br><p>建议：我们继续延续我们Java中开发的编码习惯即可。</p><br><h2 id="_3、分支结构" tabindex="-1"><a class="header-anchor" href="#_3、分支结构" aria-hidden="true">#</a> 3、分支结构</h2><p>注意：其它数据类型可以转回为布尔类型，例如：&quot;false&quot;坑。<br></p><h2 id="_4、循环结构" tabindex="-1"><a class="header-anchor" href="#_4、循环结构" aria-hidden="true">#</a> 4、循环结构</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 通过 for ... in 循环结构获取数组的各个下标</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> index <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 根据下标从数组中读取对应的值</span>
    <span class="token keyword">var</span> value <span class="token operator">=</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;for in value=&quot;</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;===============&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>objId <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>objName <span class="token operator">=</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>objAge <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

<span class="token comment">// 通过 for ... in 循环结构获取对象中每一个属性名</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> propName <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 根据属性名从对象中读取对应的属性值</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>propName <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span> <span class="token operator">+</span> obj<span class="token punctuation">[</span>propName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="二、函数" tabindex="-1"><a class="header-anchor" href="#二、函数" aria-hidden="true">#</a> 二、函数</h1><h2 id="_1、系统内置函数" tabindex="-1"><a class="header-anchor" href="#_1、系统内置函数" aria-hidden="true">#</a> 1、系统内置函数</h2><ul><li>alert()：弹出一个警告框。</li><li>confirm()：弹出一个确认框。</li><li>prompt()：弹出输入框</li><li>isNaN()：判断传入的参数是否是非数字</li></ul><h2 id="_2、用户自定义函数" tabindex="-1"><a class="header-anchor" href="#_2、用户自定义函数" aria-hidden="true">#</a> 2、用户自定义函数</h2><h3 id="_1基本用法" tabindex="-1"><a class="header-anchor" href="#_1基本用法" aria-hidden="true">#</a> ①基本用法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1、声明函数</span>
<span class="token comment">// 形参列表只需要指定变量名，不需要写类型或var关键词</span>
<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> j</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> i<span class="token operator">+</span>j<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 2、调用函数</span>
<span class="token keyword">var</span> sumResult <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;sumResult=&quot;</span><span class="token operator">+</span>sumResult<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 3、以另一种方式声明函数</span>
<span class="token comment">// 函数引用赋值给一个变量，此时函数本身不需要命名</span>
<span class="token comment">// 没有起名字的函数，我们叫匿名函数</span>
<span class="token keyword">var</span> <span class="token function-variable function">showMessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;I am a message.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 4、调用函数：变量名就相当于函数名</span>
<span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2神经病用法" tabindex="-1"><a class="header-anchor" href="#_2神经病用法" aria-hidden="true">#</a> ②神经病用法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 5、把函数名赋值给另一个变量</span>
<span class="token keyword">var</span> printMessage <span class="token operator">=</span> showMessage<span class="token punctuation">;</span>

<span class="token comment">// 6、继续使用变量名作为函数名调用函数</span>
<span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 7、把变量名作为另一个函数的参数传进去</span>
<span class="token keyword">function</span> <span class="token function">doPrintMessage</span><span class="token punctuation">(</span><span class="token parameter">funName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在函数名（或者说函数的引用）后面加括号表示调用函数</span>
    <span class="token function">funName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 8、把指向函数对象的变量作为参数传入doPrintMessage(funName)函数</span>
<span class="token function">doPrintMessage</span><span class="token punctuation">(</span>printMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 9、声明一个函数，函数的返回值也是一个函数</span>
<span class="token keyword">function</span> <span class="token function">returnFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;I am a very good message.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 10、调用函数返回的函数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">returnFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">returnFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 11、原地调用一个匿名函数</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;我已经疯了！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、this关键字" tabindex="-1"><a class="header-anchor" href="#_3、this关键字" aria-hidden="true">#</a> 3、this关键字</h2><p>函数中的this关键字指向调用函数的那个对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 12、声明一个函数测试this关键字</span>
<span class="token keyword">function</span> <span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stuName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> stu01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stu01<span class="token punctuation">.</span>stuName <span class="token operator">=</span> <span class="token string">&quot;peter&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> stu02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stu02<span class="token punctuation">.</span>stuName <span class="token operator">=</span> <span class="token string">&quot;mary&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 函数的引用赋值给对象的属性</span>
stu01<span class="token punctuation">.</span>showName <span class="token operator">=</span> showName<span class="token punctuation">;</span>
stu02<span class="token punctuation">.</span>showName <span class="token operator">=</span> showName<span class="token punctuation">;</span>

<span class="token comment">// 调用函数</span>
stu01<span class="token punctuation">.</span><span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stu02<span class="token punctuation">.</span><span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="三、对象" tabindex="-1"><a class="header-anchor" href="#三、对象" aria-hidden="true">#</a> 三、对象</h1><h2 id="_1、创建对象" tabindex="-1"><a class="header-anchor" href="#_1、创建对象" aria-hidden="true">#</a> 1、创建对象</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1、创建对象方式一</span>
<span class="token keyword">var</span> obj01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 3、创建对象方式二</span>
<span class="token keyword">var</span> obj02 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;weaponId&quot;</span><span class="token operator">:</span><span class="token number">666</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;weaponName&quot;</span><span class="token operator">:</span><span class="token string">&quot;大狙&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;weaponPrice&quot;</span><span class="token operator">:</span><span class="token number">1000.22</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、给对象属性赋值" tabindex="-1"><a class="header-anchor" href="#_2、给对象属性赋值" aria-hidden="true">#</a> 2、给对象属性赋值</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 2、给对象属性赋值就直接操作即可</span>
obj01<span class="token punctuation">.</span>soldierId <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
obj01<span class="token punctuation">.</span>soldierName <span class="token operator">=</span> <span class="token string">&quot;Jack&quot;</span><span class="token punctuation">;</span>
obj01<span class="token punctuation">.</span>soldierJob <span class="token operator">=</span> <span class="token string">&quot;cooker&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="四、数组" tabindex="-1"><a class="header-anchor" href="#四、数组" aria-hidden="true">#</a> 四、数组</h1><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1、创建数组方式一</span>
<span class="token keyword">var</span> arr01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr01<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2、创建数组方式二</span>
<span class="token keyword">var</span> arr02 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bbb&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ccc&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr02<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 3、调用push()方法向数组存入元素（相当于堆栈操作中的压栈）</span>
arr01<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arr01<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arr01<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr01<span class="token punctuation">)</span><span class="token punctuation">;</span>

arr02<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;ddd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arr02<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;eee&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arr02<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;fff&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr02<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 4、和压栈对应的操作是弹栈</span>
<span class="token keyword">var</span> popValue <span class="token operator">=</span> arr02<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>popValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr02<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 5、调用reverse()方法把数组元素倒序排列</span>
arr02<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr02<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 6、把数组元素连成字符串</span>
<span class="token keyword">var</span> arr02Str <span class="token operator">=</span> arr02<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr02Str<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 7、把字符串根据指定的符号拆分为数组</span>
arr02 <span class="token operator">=</span> arr02Str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr02<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 8、在指定索引位置删除指定个数的数组元素</span>
arr02<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr02<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 9、数组切片</span>
arr02<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;uuu&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;vvv&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;www&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;xxx&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;yyy&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;zzz&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr02<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 从 start 参数指定的索引开始，到 end 参数指定的索引结束</span>
<span class="token comment">// 选取半闭半开区间进行切片（也就是说不包括end索引指向的元素）</span>
<span class="token keyword">var</span> arr03 <span class="token operator">=</span> arr02<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr03<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="五、json格式" tabindex="-1"><a class="header-anchor" href="#五、json格式" aria-hidden="true">#</a> 五、JSON格式</h1><h2 id="_1、语法" tabindex="-1"><a class="header-anchor" href="#_1、语法" aria-hidden="true">#</a> 1、语法</h2><ul><li>JSON格式边界的符号只有两种： <ul><li>{}表示这个JSON数据是一个JSON对象</li><li>[]表示这个JSON数据是一个JSON数组</li></ul></li><li>JSON对象的语法 <ul><li>{}中是由多组key:value对组成的</li><li>key:value对之间用逗号分开</li><li>key和value之间用冒号分开</li><li>key固定就是字符串类型</li></ul></li><li>JSON数组的语法 <ul><li>[]中是由多组value组成的</li><li>value之间用逗号分开</li></ul></li><li>value的类型：不管在JSON对象还是JSON数组中，value类型都适用下面的规则 <ul><li>value可以是基本数据类型</li><li>value可以是引用数据类型 <ul><li>JSON对象</li><li>JSON数组</li></ul></li></ul></li></ul><br><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code># JSON对象
<span class="token punctuation">{</span><span class="token property">&quot;stuId&quot;</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token property">&quot;stuName&quot;</span><span class="token operator">:</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">}</span>
# JSON数组
<span class="token punctuation">[</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bbb&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ccc&quot;</span><span class="token punctuation">]</span>
# 嵌套的JSON对象
<span class="token punctuation">{</span>
    <span class="token property">&quot;stuId&quot;</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span> 
    <span class="token property">&quot;stuName&quot;</span><span class="token operator">:</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;school&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;schoolName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;atguigu&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;schoolAge&quot;</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
        <span class="token property">&quot;subjectArr&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Java&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;H5&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Big Data&quot;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
# 嵌套的JSON数组
<span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;shenzhen&quot;</span><span class="token operator">:</span><span class="token string">&quot;number one&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;wuhan&quot;</span><span class="token operator">:</span><span class="token string">&quot;number two&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;shanghai&quot;</span><span class="token operator">:</span><span class="token string">&quot;number three&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、json对象转字符串" tabindex="-1"><a class="header-anchor" href="#_2、json对象转字符串" aria-hidden="true">#</a> 2、JSON对象转字符串</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3、字符串转json对象" tabindex="-1"><a class="header-anchor" href="#_3、字符串转json对象" aria-hidden="true">#</a> 3、字符串转JSON对象</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="六、引入方式" tabindex="-1"><a class="header-anchor" href="#六、引入方式" aria-hidden="true">#</a> 六、引入方式</h1><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>JavaScript引入方式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 通常不建议使用，因为这种方式意味着结构和行为耦合。 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;Hello!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>引入方式一：内嵌到HTML标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- JavaScript 代码仅限于当前页面使用。 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn01<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>引入方式二：内嵌到script标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- JavaScript 代码不局限于当前页面使用。 --&gt;</span>
    <span class="token comment">&lt;!-- 或引入其它JavaScript库或框架。 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn02<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>引入方式三：引入外部JS文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;btn01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;HelloWorld!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 使用 src 属性指定外部 JS 文件的路径 --&gt;</span>
<span class="token comment">&lt;!-- 如果script标签是用来引入外部 JS 文件，那么script标签内部什么代码都不要写 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>script/work.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;我是来捣乱的！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 如果script标签是用来引入外部 JS 文件，那么script标签不要当作单标签结束 --&gt;</span>
<span class="token comment">&lt;!-- &lt;script src=&quot;script/work.js&quot;/&gt; --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="七、bom" tabindex="-1"><a class="header-anchor" href="#七、bom" aria-hidden="true">#</a> 七、BOM</h1><h2 id="_1、概念" tabindex="-1"><a class="header-anchor" href="#_1、概念" aria-hidden="true">#</a> 1、概念</h2><p>BOM：Browser Object Model浏览器对象模型。这是为了方便我们在JavaScript程序中操作浏览器的特定功能而封装的一系列对象。 <br></p><h2 id="_2、思想" tabindex="-1"><a class="header-anchor" href="#_2、思想" aria-hidden="true">#</a> 2、思想</h2><p>现实世界的事物要体现到IT系统中，就需要把现实世界的事物进行抽象，抽取现实事物的主要特征，然后在IT系统中创建一个模型来对应。模型在代码中通过对象来体现。<br> 比如：现实世界中的一个人，我们开发员工档案管理系统就只关注这个人作为员工的这方面。<br> 在员工信息中，我们提取下面数据到程序中：</p><ul><li>员工编号</li><li>员工姓名</li><li>员工籍贯</li><li>员工所在部门</li></ul><br><p>有了这些信息就可以声明一个类来代表现实世界的员工。</p><br><p>总结：现实世界事物 --&gt; 抽象出模型 --&gt; 封装为对象 --&gt; 通过对象操作数据</p><h2 id="_3、操作举例" tabindex="-1"><a class="header-anchor" href="#_3、操作举例" aria-hidden="true">#</a> 3、操作举例</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>

    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">&quot;btn01&quot;</span><span class="token operator">&gt;</span>点我去尚硅谷学习！<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">&quot;btn02&quot;</span><span class="token operator">&gt;</span>点我去尚硅谷学习！<span class="token punctuation">[</span>省略了href属性<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
    <span class="token comment">// 1、系统内置了window对象代表浏览器窗口，可以直接使用</span>
    <span class="token comment">// 2、读操作</span>
    <span class="token comment">// window.location.href返回浏览器地址栏当前的 URL 地址</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3、写操作</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;btn01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">&quot;http://www.atguigu.com&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;btn02&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        window<span class="token punctuation">.</span>location<span class="token operator">=</span><span class="token string">&quot;http://www.atguigu.com&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="八、dom-重点" tabindex="-1"><a class="header-anchor" href="#八、dom-重点" aria-hidden="true">#</a> 八、DOM [重点]</h1><h2 id="_1、概念-1" tabindex="-1"><a class="header-anchor" href="#_1、概念-1" aria-hidden="true">#</a> 1、概念</h2><p>DOM：Document Object Model文档对象模型。<br></p><ul><li>模型：把整个HTML文档作为一个模型</li><li>对象：用window.document对象来代表HTML文档</li><li>浏览器加载机制：浏览器把HTML文档加载到内存的过程中，每读取一个HTML标签就创建一个元素对象，这个元素对象会存入document对象中。</li></ul><h2 id="_2、节点" tabindex="-1"><a class="header-anchor" href="#_2、节点" aria-hidden="true">#</a> 2、节点</h2><p>HTML文档中所有对象都被看作节点（Node）。节点在进一步细分：</p><ul><li>元素节点（Element）：对应HTML标签</li><li>属性节点（Attr）：对应HTML标签中的属性</li><li>文本节点（Text）：对应文本标签体</li></ul><br><blockquote><p>这几个类型之间是父子关系。Element、Attr、Text都可以看做是Node的子类。<br> 这个说法是帮助我们理解，实际上JavaScript这门语言中没有“类”的概念。</p></blockquote><br><h2 id="_3、dom树" tabindex="-1"><a class="header-anchor" href="#_3、dom树" aria-hidden="true">#</a> 3、DOM树</h2><h3 id="_1元素之间的关系" tabindex="-1"><a class="header-anchor" href="#_1元素之间的关系" aria-hidden="true">#</a> ①元素之间的关系</h3><ul><li>纵向： <ul><li>父子关系</li><li>先辈和后代的关系</li></ul></li><li>横向：兄弟关系</li></ul><br><h3 id="_2元素和属性的关系" tabindex="-1"><a class="header-anchor" href="#_2元素和属性的关系" aria-hidden="true">#</a> ②元素和属性的关系</h3><p>把HTML标签封装为元素对象，HTML标签的属性就是元素对象的属性。<br></p><h3 id="_3元素和文本的关系" tabindex="-1"><a class="header-anchor" href="#_3元素和文本的关系" aria-hidden="true">#</a> ③元素和文本的关系</h3><p>元素对象和它里面的文本节点对象也是父子关系。<br></p><h2 id="_4、元素查找" tabindex="-1"><a class="header-anchor" href="#_4、元素查找" aria-hidden="true">#</a> 4、元素查找</h2><h3 id="_1整个文档范围内查找" tabindex="-1"><a class="header-anchor" href="#_1整个文档范围内查找" aria-hidden="true">#</a> ①整个文档范围内查找</h3><p>使用document对象调用getElementByXxx()方法就是在整个文档范围内查找。</p><ul><li>document.getElementById(&quot;id值&quot;) 返回id值对应的单个对象。</li><li>document.getElementsByTagName(&quot;标签名&quot;) 返回标签名对应的多个对象。</li><li>document.getElementsByName(&quot;表单标签的name属性值&quot;) 根据表单标签的name属性值查询对象。</li></ul><br><h3 id="_2指定元素范围内查找" tabindex="-1"><a class="header-anchor" href="#_2指定元素范围内查找" aria-hidden="true">#</a> ②指定元素范围内查找</h3><ul><li>全部子节点：元素对象.childNodes</li><li>全部子元素：元素对象.children</li><li>第一个子元素：元素对象.firstElementChild</li><li>最后一个子元素：元素对象.lastElementChild</li></ul><br><h3 id="_3查找元素的父元素" tabindex="-1"><a class="header-anchor" href="#_3查找元素的父元素" aria-hidden="true">#</a> ③查找元素的父元素</h3><ul><li>方式一：parentElement</li><li>方式二：parentNode</li></ul><h3 id="_4查找元素的兄弟元素" tabindex="-1"><a class="header-anchor" href="#_4查找元素的兄弟元素" aria-hidden="true">#</a> ④查找元素的兄弟元素</h3><ul><li>前一个兄弟元素：previousElementSibling</li><li>后一个兄弟元素：nextElementSibling</li></ul><h2 id="_5、读写元素属性" tabindex="-1"><a class="header-anchor" href="#_5、读写元素属性" aria-hidden="true">#</a> 5、读写元素属性</h2><ul><li>读操作：元素对象.属性名</li><li>写操作：元素对象.属性名=新属性值</li></ul><h2 id="_6、读写文本标签体" tabindex="-1"><a class="header-anchor" href="#_6、读写文本标签体" aria-hidden="true">#</a> 6、读写文本标签体</h2><h3 id="_1innertext属性" tabindex="-1"><a class="header-anchor" href="#_1innertext属性" aria-hidden="true">#</a> ①innerText属性</h3><ul><li>读操作：元素对象.innerText</li><li>写操作：元素对象.innerText=新文本值 注意：新文本值中如果包含HTML标签代码，不会被解析</li></ul><h3 id="_2innerhtml属性" tabindex="-1"><a class="header-anchor" href="#_2innerhtml属性" aria-hidden="true">#</a> ②innerHTML属性</h3><ul><li>读操作：元素对象.innerHTML</li><li>写操作：元素对象.innerHTML=新文本值 注意：新文本值中如果包含HTML标签代码，能够被解析</li></ul><h1 id="九、事件驱动-重点" tabindex="-1"><a class="header-anchor" href="#九、事件驱动-重点" aria-hidden="true">#</a> 九、事件驱动 [重点]</h1><h2 id="_1、类比" tabindex="-1"><a class="header-anchor" href="#_1、类比" aria-hidden="true">#</a> 1、类比</h2><table><thead><tr><th>生活中的例子</th><th>事件驱动</th></tr></thead><tbody><tr><td>地雷</td><td>事件响应函数</td></tr><tr><td>兵工厂生产地雷</td><td>声明事件响应函数</td></tr><tr><td>找到埋地雷的位置</td><td>把绑定事件响应函数的元素对象给查出来</td></tr><tr><td>埋地雷</td><td>把事件响应函数绑定到元素上</td></tr><tr><td>触发引信</td><td>用户在浏览器窗口进行操作的时候触发了事件</td></tr><tr><td>地雷爆炸</td><td>事件响应函数执行</td></tr></tbody></table><h2 id="_2、事件类型" tabindex="-1"><a class="header-anchor" href="#_2、事件类型" aria-hidden="true">#</a> 2、事件类型</h2><h3 id="_1文本框值改变事件" tabindex="-1"><a class="header-anchor" href="#_1文本框值改变事件" aria-hidden="true">#</a> ①文本框值改变事件</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1、查找文本框元素对象</span>
<span class="token keyword">var</span> inputEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 2、声明事件响应函数</span>
<span class="token keyword">function</span> <span class="token function">showUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 我们希望在这个函数中获取到用户输入的新值</span>
    <span class="token comment">// this 在事件响应函数中代表触发事件的元素对象</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;用户输入的新数据：&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 3、事件绑定</span>
<span class="token comment">// 事件类型：值改变</span>
<span class="token comment">// ※特殊说明：值改变事件要触发需要满足两个条件</span>
<span class="token comment">// 条件1：当前控件失去焦点</span>
<span class="token comment">// 条件2：值确实发生了改变</span>
inputEle<span class="token punctuation">.</span>onchange <span class="token operator">=</span> showUsername<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2失去焦点" tabindex="-1"><a class="header-anchor" href="#_2失去焦点" aria-hidden="true">#</a> ②失去焦点</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 事件类型：失去焦点</span>
inputEle<span class="token punctuation">.</span><span class="token function-variable function">onblur</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;文本框失去了焦点。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3鼠标移动事件" tabindex="-1"><a class="header-anchor" href="#_3鼠标移动事件" aria-hidden="true">#</a> ③鼠标移动事件</h3><p>HTML设置：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dongGe<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>images/wanghaodong.jpg<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><p>CSS样式设置：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">img</span> <span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p>JavaScript代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1、获取div元素对象</span>
<span class="token keyword">var</span> divEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;swimmingPool&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> imgEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;dongGe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2、绑定事件响应函数</span>
divEle<span class="token punctuation">.</span><span class="token function-variable function">onmousemove</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 3、打印事件对象</span>
    <span class="token comment">// console.log(event);</span>

    <span class="token comment">// 4、通过事件对象获取鼠标的坐标</span>
    <span class="token comment">// console.log(event.clientX + &quot; &quot; + event.clientY);</span>

    <span class="token comment">// 5、把鼠标坐标信息写入div中，作为它的文本值</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> event<span class="token punctuation">.</span>clientX <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> event<span class="token punctuation">.</span>clientY<span class="token punctuation">;</span>

    <span class="token comment">// 6、让图片显示</span>
    imgEle<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token string">&quot;display:block;position:absolute;top:&quot;</span><span class="token operator">+</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>clientY<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;px;left:&quot;</span><span class="token operator">+</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>clientX<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;px;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、取消控件默认行为" tabindex="-1"><a class="header-anchor" href="#_3、取消控件默认行为" aria-hidden="true">#</a> 3、取消控件默认行为</h2><h3 id="_1提出问题" tabindex="-1"><a class="header-anchor" href="#_1提出问题" aria-hidden="true">#</a> ①提出问题</h3><ul><li>删除记录的超链接：点击后我们希望弹出确认框，用户如果点击取消，则不跳转页面。</li><li>表单验证：点击提交按钮之后，执行表单验证，表单验证如果通不过，那么就不提交表单。</li></ul><h3 id="_2默认行为" tabindex="-1"><a class="header-anchor" href="#_2默认行为" aria-hidden="true">#</a> ②默认行为</h3><ul><li>超链接点击之后会跳转页面</li><li>表单的提交按钮点击之后会提交表单</li></ul><h3 id="_3取消默认行为实现方式" tabindex="-1"><a class="header-anchor" href="#_3取消默认行为实现方式" aria-hidden="true">#</a> ③取消默认行为实现方式</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 调用事件对象的方法</span>
event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4、取消事件冒泡" tabindex="-1"><a class="header-anchor" href="#_4、取消事件冒泡" aria-hidden="true">#</a> 4、取消事件冒泡</h2><h3 id="_1概念" tabindex="-1"><a class="header-anchor" href="#_1概念" aria-hidden="true">#</a> ①概念</h3><p>每一个元素处理完事件（事件响应函数执行完）之后，默认会把事件向上传递给自己的父元素，父元素如果没有绑定对应类型的事件响应函数，那么就什么都不会发生。如果父元素绑定了对应的事件响应函数，就会导致父元素再处理一遍这个事件</p><h3 id="_2阻止的方式" tabindex="-1"><a class="header-anchor" href="#_2阻止的方式" aria-hidden="true">#</a> ②阻止的方式</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_5、回调函数" tabindex="-1"><a class="header-anchor" href="#_5、回调函数" aria-hidden="true">#</a> 5、回调函数</h2><h3 id="_1普通函数" tabindex="-1"><a class="header-anchor" href="#_1普通函数" aria-hidden="true">#</a> ①普通函数</h3><p>我们自己声明一个函数，我们自己调用。<br></p><h3 id="_2回调函数" tabindex="-1"><a class="header-anchor" href="#_2回调函数" aria-hidden="true">#</a> ②回调函数</h3><p>我们自己声明一个函数，交给系统来调用。<br></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 这里我们声明的函数，仅仅只是声明了，我们自己并没有在后面的代码中去调用它。</span>
<span class="token comment">// 函数的引用赋值给onclick属性之后，我们就没有再管它了</span>
<span class="token comment">// 浏览器在监听到用户单击的事件之后，才调用这个函数</span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;outerDiv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;你点击了【外层】div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_3java中的回调函数" tabindex="-1"><a class="header-anchor" href="#_3java中的回调函数" aria-hidden="true">#</a> ③Java中的回调函数</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RunnableTest</span><span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

            <span class="token comment">// 我们声明了这个方法，但是真正调用的时候是系统来调用的</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment">// 调用 start() 方法启动线程</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h1 id="十、正则表达式" tabindex="-1"><a class="header-anchor" href="#十、正则表达式" aria-hidden="true">#</a> 十、正则表达式</h1><h2 id="_1、概念-2" tabindex="-1"><a class="header-anchor" href="#_1、概念-2" aria-hidden="true">#</a> 1、概念</h2><p>根据功能的需求，在原始字符串数据中，把我们想要的匹配出来。</p><h2 id="_2、应用场景" tabindex="-1"><a class="header-anchor" href="#_2、应用场景" aria-hidden="true">#</a> 2、应用场景</h2><ul><li>模式验证：用正则表达式规定一个格式，检查字符串是否满足这个格式。比如：检查手机号、邮箱、身份证号……</li><li>匹配读取：在原始字符串数据中，把我们需要的字符串读取出来。</li><li>匹配替换：在原始字符串数据中，把匹配固定模式的字符串替换成指定的数据。</li></ul><h2 id="_3、创建正则表达式" tabindex="-1"><a class="header-anchor" href="#_3、创建正则表达式" aria-hidden="true">#</a> 3、创建正则表达式</h2><h3 id="_1对象形式" tabindex="-1"><a class="header-anchor" href="#_1对象形式" aria-hidden="true">#</a> ①对象形式</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> source <span class="token operator">=</span> <span class="token string">&quot;Hello tom,good afternoon.&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 1、创建正则表达式对象</span>
<span class="token comment">// 方式一：对象方式</span>
<span class="token comment">// reg 是 regular 的缩写，意思是正规的、常规的</span>
<span class="token comment">// exp 是 expression 的缩写，意思是表达式</span>
<span class="token comment">// 在 RegExp 构造器中传入正则表达式本身</span>
<span class="token comment">// &quot;a&quot; 正则表达式表示：被检测的字符串，有a这个字符就匹配，否则不匹配</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> checkResult <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;checkResult = &quot;</span> <span class="token operator">+</span> checkResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2直接量形式" tabindex="-1"><a class="header-anchor" href="#_2直接量形式" aria-hidden="true">#</a> ②直接量形式</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方式二：直接量方式</span>
<span class="token comment">// 类似的，JSON 对象、JSON 数组也相当于是用直接量的方式创建</span>
<span class="token comment">// {&quot;userName&quot;:&quot;tom&quot;} [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span>
reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">w</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
checkResult <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;checkResult = &quot;</span> <span class="token operator">+</span> checkResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4、正则表达式语法" tabindex="-1"><a class="header-anchor" href="#_4、正则表达式语法" aria-hidden="true">#</a> 4、正则表达式语法</h2><h3 id="_1正则表达式的组成" tabindex="-1"><a class="header-anchor" href="#_1正则表达式的组成" aria-hidden="true">#</a> ①正则表达式的组成</h3><h4 id="_1-普通字符" tabindex="-1"><a class="header-anchor" href="#_1-普通字符" aria-hidden="true">#</a> [1]普通字符</h4><p>用字符本身进行匹配。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Hello</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
checkResult <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;checkResult = &quot;</span> <span class="token operator">+</span> checkResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-元字符" tabindex="-1"><a class="header-anchor" href="#_2-元字符" aria-hidden="true">#</a> [2]元字符</h4><p>使用一些在正则表达式中有特定含义的字符，来检测字符串</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ^ 表示：要求目标字符串以指定内容开头</span>
<span class="token comment">// ^T 表示：要求目标字符串以T开头</span>
reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^T</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
checkResult <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;checkResult = &quot;</span> <span class="token operator">+</span> checkResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>匹配除换行字符以外的任意字符。</td></tr><tr><td>\\w</td><td>匹配字母或数字或下划线等价于[a-zA-Z0-9 _]</td></tr><tr><td>\\W</td><td>匹配任何非单词字符。等价于[^A-Za-z0-9 _]</td></tr><tr><td>\\s</td><td>匹配任意的空白符，包括空格、制表符、换页符等等。等价于[\\f\\n\\r\\t\\v]。</td></tr><tr><td>\\S</td><td>匹配任何非空白字符。等价于[^\\f\\n\\r\\t\\v]。</td></tr><tr><td>\\d</td><td>匹配数字。等价于[0-9]。</td></tr><tr><td>\\D</td><td>匹配一个非数字字符。等价于[^0-9]</td></tr><tr><td>\\b</td><td>匹配单词的开始或结束</td></tr><tr><td>^</td><td>匹配字符串的开始，但在[]中使用表示取反</td></tr><tr><td>$</td><td>匹配字符串的结束</td></tr></tbody></table><h3 id="_2字符集合" tabindex="-1"><a class="header-anchor" href="#_2字符集合" aria-hidden="true">#</a> ②字符集合</h3><p>如果我们想要设定的规则，是一组字符中的某一个，那么就可以使用字符集合来设置。字符集合用[]定义。</p><h4 id="_1-匹配列表中任何一个" tabindex="-1"><a class="header-anchor" href="#_1-匹配列表中任何一个" aria-hidden="true">#</a> [1]匹配列表中任何一个</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[oda]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
checkResult <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;checkResult = &quot;</span> <span class="token operator">+</span> checkResult<span class="token punctuation">)</span><span class="token punctuation">;</span>

reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[xyz]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
checkResult <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;checkResult = &quot;</span> <span class="token operator">+</span> checkResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-匹配列表外任何一个" tabindex="-1"><a class="header-anchor" href="#_2-匹配列表外任何一个" aria-hidden="true">#</a> [2]匹配列表外任何一个</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// [^oda]表示：目标字符串不能包含o、d、a中的任何一个</span>
reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^oda]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
checkResult <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;checkResult = &quot;</span> <span class="token operator">+</span> checkResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-用字符范围定义集合" tabindex="-1"><a class="header-anchor" href="#_3-用字符范围定义集合" aria-hidden="true">#</a> [3]用字符范围定义集合</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// [A-Z]表示：包含大写字母中的任何一个即可</span>
<span class="token comment">// [a-z]表示：包含小写字母中的任何一个即可</span>
<span class="token comment">// [0-9]表示：包含数字中的任何一个即可</span>
<span class="token comment">// [A-Za-z]表示：包含字母中的任何一个即可</span>
<span class="token comment">// [A-Za-z0-9]表示：包含字母、数字中的任何一个即可</span>
reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
checkResult <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;checkResult = &quot;</span> <span class="token operator">+</span> checkResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3字符出现次数" tabindex="-1"><a class="header-anchor" href="#_3字符出现次数" aria-hidden="true">#</a> ③字符出现次数</h3><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>出现零次或多次</td></tr><tr><td>+</td><td>出现一次或多次</td></tr><tr><td>?</td><td>出现零次或一次</td></tr><tr><td>{n}</td><td>出现n次</td></tr><tr><td>{n,}</td><td>出现n次或多次</td></tr><tr><td>{n,m}</td><td>出现n到m次</td></tr></tbody></table><h2 id="_5、举例" tabindex="-1"><a class="header-anchor" href="#_5、举例" aria-hidden="true">#</a> 5、举例</h2><h3 id="_1格式验证" tabindex="-1"><a class="header-anchor" href="#_1格式验证" aria-hidden="true">#</a> ①格式验证</h3><p>注意：此时是使用正则表达式对象调用方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> source <span class="token operator">=</span> <span class="token string">&quot;Hello tom!Good morning!&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">W</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> checkResult <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;checkResult = &quot;</span> <span class="token operator">+</span> checkResult<span class="token punctuation">)</span><span class="token punctuation">;</span>

reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">G</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
checkResult <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;checkResult = &quot;</span> <span class="token operator">+</span> checkResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2匹配读取" tabindex="-1"><a class="header-anchor" href="#_2匹配读取" aria-hidden="true">#</a> ②匹配读取</h3><p>注意：此时是使用字符串对象调用方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> matchArray <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matchArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3替换" tabindex="-1"><a class="header-anchor" href="#_3替换" aria-hidden="true">#</a> ③替换</h3><p>注意：此时是使用字符串对象调用方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">o</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> replaceResult <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>replaceResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4全文查找" tabindex="-1"><a class="header-anchor" href="#_4全文查找" aria-hidden="true">#</a> ④全文查找</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
matchArray <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matchArray<span class="token punctuation">)</span><span class="token punctuation">;</span>

reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">o</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
replaceResult <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>replaceResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5忽略大小写" tabindex="-1"><a class="header-anchor" href="#_5忽略大小写" aria-hidden="true">#</a> ⑤忽略大小写</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">;</span>
matchArray <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matchArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6使用元字符" tabindex="-1"><a class="header-anchor" href="#_6使用元字符" aria-hidden="true">#</a> ⑥使用元字符</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^H</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
checkResult <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;checkResult = &quot;</span> <span class="token operator">+</span> checkResult<span class="token punctuation">)</span><span class="token punctuation">;</span>

reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^U</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
checkResult <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;checkResult = &quot;</span> <span class="token operator">+</span> checkResult<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ^H\\.$表示要求目标字符串以H开头，以点结尾。</span>
<span class="token comment">// ^符号必须写在前面，$符号必须写在后面</span>
<span class="token comment">// \\.表示对.进行转义，因为.本身是匹配任意一个字符</span>
<span class="token comment">// .*表示任意字符可以出现零次或多次</span>
reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^H.*\\.$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
checkResult <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;checkResult = &quot;</span> <span class="token operator">+</span> checkResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7使用字符集合" tabindex="-1"><a class="header-anchor" href="#_7使用字符集合" aria-hidden="true">#</a> ⑦使用字符集合</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> splitArr <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-z].*[a-z]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> splitArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> value <span class="token operator">=</span> splitArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;value = &quot;</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,188),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","03-javascript.html.vue"]]);export{r as default};
