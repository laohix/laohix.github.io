import{_ as n,o as s,c as a,e as t}from"./app-8007fa1b.js";const e="/assets/img001-491b2d16.png",p="/assets/img002-f344663a.png",o="/assets/img003-1bf8ad3b.png",c="/assets/img0047-5d71724e.png",l="/assets/img0048-e761a96c.png",i="/assets/img0049-f1b7afa8.png",u="/assets/img0050-d5356a90.png",r="/assets/img0010-4d142b68.webp",d={},k=t(`<h1 id="今日目标" tabindex="-1"><a class="header-anchor" href="#今日目标" aria-hidden="true">#</a> 今日目标</h1><ul><li>关于页面渲染的简单说明</li><li>request对象的使用：获取请求参数（重点）</li><li>request对象的使用：获取请求相关信息</li><li>request对象的使用：请求转发（重点）</li><li>request对象的使用：请求域（重点）</li><li>response对象的使用：PrintWriter</li><li>response对象的使用：设置响应消息头</li><li>response对象的使用：请求重定向（重点）</li><li>字符乱码问题</li><li>请求路径问题（重点）</li><li>会话控制概述</li></ul><h1 id="一、关于页面渲染的简单说明" tabindex="-1"><a class="header-anchor" href="#一、关于页面渲染的简单说明" aria-hidden="true">#</a> 一、关于页面渲染的简单说明</h1><h2 id="_1、提出问题" tabindex="-1"><a class="header-anchor" href="#_1、提出问题" aria-hidden="true">#</a> 1、提出问题</h2><p>目前我们只能通过下面方式给浏览器返回响应：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;This is doPost method response.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><p>如果我们希望返回一个HTML页面：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>  
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>  
    <span class="token comment">// 1、假设我们从数据库查询到了员工的总人数  </span>
    <span class="token keyword">int</span> empCount <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>  
  
    <span class="token comment">// 2、通过响应对象获取字符输出流  </span>
    <span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
    <span class="token comment">// 3、拼响应结果  </span>
    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;!DOCTYPE html&gt;                   \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;html lang=&#39;en&#39;&gt;                  \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;head&gt;                            \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;    &lt;meta charset=&#39;UTF-8&#39;&gt;        \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;    &lt;title&gt;显示数据&lt;/title&gt;       \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;/head&gt;                           \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;body&gt;                            \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;                                  \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;    &lt;p style=&#39;color:blue;&#39;&gt;员工总人数：&quot;</span><span class="token operator">+</span>empCount<span class="token operator">+</span><span class="token string">&quot;&lt;/p&gt;        \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;                                  \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;/body&gt;                           \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;/html&gt;                           \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p>这么做的缺陷：控制器和视图发生了耦合。</p><h2 id="_2、mvc" tabindex="-1"><a class="header-anchor" href="#_2、mvc" aria-hidden="true">#</a> 2、MVC</h2><h3 id="_1概念" tabindex="-1"><a class="header-anchor" href="#_1概念" aria-hidden="true">#</a> ①概念</h3><p>MVC：Model View Controller</p><ul><li>Model：模型（实体类Employee、Student、User、Book……）</li><li>View：视图（能够给用户展示操作界面的技术：HTML、JSP、Thymeleaf……）</li><li>Controller：控制器（XxxServlet）</li></ul><br><p>MVC是Web层项目开发所建议使用的程序的结构。但是MVC并不是二十三种设计模式中的一种。</p><br><h3 id="_2含义" tabindex="-1"><a class="header-anchor" href="#_2含义" aria-hidden="true">#</a> ②含义</h3><p>MVC这种设计理念主张在Web应用开发时，把模型、视图、控制器分开，基于组件化开发的思路，把Web应用拆分为各个不同组件，再把组件组装起来构成一个完整的Web应用。<br><br></p><p>本质上还是体现了『高内聚、低耦合』的思维。<br></p><p><img src="`+e+'" alt="images"><br></p><p>组件化开发的好处：</p><ul><li>开发过程：把一个很大、很复杂的功能拆分到各个组件中，每个组件独立开发，逻辑就简单多了。</li><li>维护过程：每个组件有它各自的功能，比较容易定位问题、解决问题。</li></ul><br><h2 id="_3、页面渲染" tabindex="-1"><a class="header-anchor" href="#_3、页面渲染" aria-hidden="true">#</a> 3、页面渲染</h2><h3 id="_1页面不能写死的数据" tabindex="-1"><a class="header-anchor" href="#_1页面不能写死的数据" aria-hidden="true">#</a> ①页面不能写死的数据</h3><p><img src="'+p+'" alt="images"></p><h3 id="_2不能写死咋办" tabindex="-1"><a class="header-anchor" href="#_2不能写死咋办" aria-hidden="true">#</a> ②不能写死咋办？</h3><p>要想让这些动态获取数据的地方真的实现数据的动态获取，那么就必须在这些位置写表达式。不管具体渲染的技术是什么。<br></p><br><p>页面渲染：页面上不能写死、需要动态获取数据的地方写表达式。到程序真正执行的时候，通过执行表达式背后的代码（Java或JavaScript代码）计算出这里具体要显示什么数据。用实际的数据替换表达式的过程，就称为页面渲染。<br></p><p><img src="'+o+`" alt="images"><br></p><h3 id="_3页面渲染的技术" tabindex="-1"><a class="header-anchor" href="#_3页面渲染的技术" aria-hidden="true">#</a> ③页面渲染的技术</h3><ul><li>前端渲染 <ul><li>使用axios这个Ajax框架从Servlet这获取数据</li><li>使用JavaScript的框架Vue在页面上渲染</li></ul></li><li>后端渲染 <ul><li>JSP</li><li>Velocity</li><li>Freemarker</li><li>Thymeleaf（后面学）</li><li>……</li></ul></li></ul><br><h1 id="二、请求-获取请求参数-重点" tabindex="-1"><a class="header-anchor" href="#二、请求-获取请求参数-重点" aria-hidden="true">#</a> 二、请求：获取请求参数（重点）</h1><h2 id="_1、请求参数发送的形式" tabindex="-1"><a class="header-anchor" href="#_1、请求参数发送的形式" aria-hidden="true">#</a> 1、请求参数发送的形式</h2><ul><li>写在 URL 地址后面： <ul><li>手动在浏览器地址中包含的地址后面手写</li><li>写在超链接href属性中地址后面</li></ul></li><li>表单</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/demo/param?stuId=5&amp;stuName=tom&amp;subject=Java&amp;subject=MySQL<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>通过超链接发送请求参数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/demo/param<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    学生编号：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stuId<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>66<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
    学生姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stuName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jerry<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
    学生科目：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>subject<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>PHP<span class="token punctuation">&quot;</span></span> <span class="token attr-name">checked</span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>subject<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>C++<span class="token punctuation">&quot;</span></span> <span class="token attr-name">checked</span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>保存数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、请求参数接收的形式" tabindex="-1"><a class="header-anchor" href="#_2、请求参数接收的形式" aria-hidden="true">#</a> 2、请求参数接收的形式</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1、服务器端请求参数的保存的格式是：Map&lt;String, String[]&gt;</span>
<span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> parameterMap <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2、遍历 Map 获取所有请求参数</span>
<span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span> entries <span class="token operator">=</span> parameterMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> entry <span class="token operator">:</span> entries<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> paramName <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> entryValueArr <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>paramName <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>entryValueArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-------------------------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 3、直接获取请求参数名对应的一个值</span>
<span class="token class-name">String</span> stuId <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;stuId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;stuId = &quot;</span> <span class="token operator">+</span> stuId<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> stuName <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;stuName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;stuName = &quot;</span> <span class="token operator">+</span> stuName<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 4、直接获取请求参数名对应的多个值</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> subjects <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterValues</span><span class="token punctuation">(</span><span class="token string">&quot;subject&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;subjects = &quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>subjects<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 5、请求参数名对应多个值，但是我用 getParameter() 方法获取</span>
<span class="token comment">// ※此时只返回数组中的第一个值，实际开发时要注意，谨防数据遗漏</span>
<span class="token class-name">String</span> subjectSingle <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;subject&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;subjectSingle = &quot;</span> <span class="token operator">+</span> subjectSingle<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、api" tabindex="-1"><a class="header-anchor" href="#_3、api" aria-hidden="true">#</a> 3、API</h2><p>和请求方式无关：</p><ul><li>获取全部请求参数：request.getParameterMap()</li><li>获取请求参数名对应的一个值：request.getParameter(&quot;stuId&quot;)</li><li>获取请求参数名对应的多个值：request.getParameterValues(&quot;subject&quot;)</li></ul><h1 id="三、请求-获取请求相关信息" tabindex="-1"><a class="header-anchor" href="#三、请求-获取请求相关信息" aria-hidden="true">#</a> 三、请求：获取请求相关信息</h1><ul><li>获取上下文路径（重点）：request.getContextPath()</li><li>获取端口号：request.getServerPort()</li><li>获取主机名称：request.getServerName()</li><li>获取协议名：request.getScheme()</li><li>读取指定请求消息头：request.getHeader(&quot;User-Agent&quot;)</li></ul><h1 id="四、请求-请求的转发-重点" tabindex="-1"><a class="header-anchor" href="#四、请求-请求的转发-重点" aria-hidden="true">#</a> 四、请求：请求的转发[重点]</h1><h2 id="_1、概念" tabindex="-1"><a class="header-anchor" href="#_1、概念" aria-hidden="true">#</a> 1、概念</h2><p>Servlet处理请求之后，再把请求转交给另一个资源继续处理。整个过程发生在服务器端，浏览器感知不到。<br></p><p><img src="`+c+`" alt="images"></p><br><p>应用场景举例：</p><ul><li>Servlet先处理请求：调用Service执行业务运算，返回查询结果数据</li><li>Servlet把查询结果数据存入请求域</li><li>把请求转发给pages/list.jsp页面</li><li>list.jsp页面从请求域把数据取出来显示（渲染视图）</li></ul><br><h2 id="_2、实现方式" tabindex="-1"><a class="header-anchor" href="#_2、实现方式" aria-hidden="true">#</a> 2、实现方式</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletOne</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ServletOne 执行了。☆☆☆&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 1、获取转发器对象，指定目标地址</span>
        <span class="token class-name">RequestDispatcher</span> requestDispatcher <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;/servletTwo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 2、调用转发器对象的 forward() 方法前往目标资源</span>
        requestDispatcher<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletTwo</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ServletTwo 执行了。☆☆☆&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 当前 Servlet 负责返回响应</span>
        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html;charset=UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;来自ServletTwo的响应结果。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、请求转发的特点" tabindex="-1"><a class="header-anchor" href="#_3、请求转发的特点" aria-hidden="true">#</a> 3、请求转发的特点</h2><ul><li>在请求转发的整个过程中，浏览器只发送了一个请求</li><li>转发的过程是在服务器端内部完成的，浏览器感知不到</li><li>请求完成之后，浏览器地址栏仍然保持着第一个资源（Servlet）的访问地址</li><li>因为从头到尾都是同一个请求，所以request对象也是同一个</li><li>转发的目标资源只能是当前Web应用内部的资源，不能转发到Web应用外部</li></ul><br><blockquote><p>举例：请求转发用借钱来打个比方。<br> 你找栋哥借钱。<br> 但是栋哥自己没有，但是也没有拒绝你。<br> 然后栋哥找别人借了钱，转交给你。</p></blockquote><br><h2 id="_4、相关问题" tabindex="-1"><a class="header-anchor" href="#_4、相关问题" aria-hidden="true">#</a> 4、相关问题</h2><p>WEB-INF目录下的资源不允许浏览器直接访问，如果访问会看到404。<br> 请求转发的方式可以访问。<br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;/WEB-INF/test.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="五、请求-向请求域保存数据-重点" tabindex="-1"><a class="header-anchor" href="#五、请求-向请求域保存数据-重点" aria-hidden="true">#</a> 五、请求：向请求域保存数据[重点]</h1><h2 id="_1、读写操作" tabindex="-1"><a class="header-anchor" href="#_1、读写操作" aria-hidden="true">#</a> 1、读写操作</h2><p>读写操作必须使用同一个属性名，否则读取不到：</p><ul><li>将数据存入请求域：request.setAttribute(属性名,属性值);</li><li>从请求域读取数据：request.getAttribute(属性名);</li></ul><h2 id="_2、代码举例" tabindex="-1"><a class="header-anchor" href="#_2、代码举例" aria-hidden="true">#</a> 2、代码举例</h2><h3 id="_1第一个servlet存入数据" tabindex="-1"><a class="header-anchor" href="#_1第一个servlet存入数据" aria-hidden="true">#</a> ①第一个Servlet存入数据</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletReqAttr</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1、把数据存入请求域</span>
        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;attrReqName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;attrReqValueAtguigu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 2、转发到下一个 Servlet</span>
        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;/ServletReqAttrGet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2第二个servlet读取数据" tabindex="-1"><a class="header-anchor" href="#_2第二个servlet读取数据" aria-hidden="true">#</a> ②第二个Servlet读取数据</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletReqAttrGet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1、从请求域读取数据</span>
        <span class="token class-name">Object</span> attrReqValue <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;attrReqName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 2、打印到页面上</span>
        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>attrReqValue<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h1 id="六、响应-printwriter" tabindex="-1"><a class="header-anchor" href="#六、响应-printwriter" aria-hidden="true">#</a> 六、响应：PrintWriter</h1><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1、获取 PrintWriter 对象</span>
    <span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2、写入响应数据</span>
    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;html&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;body&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;p&gt;hello&lt;/p&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;/body&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;/html&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h1 id="七、响应-如何设置响应消息头" tabindex="-1"><a class="header-anchor" href="#七、响应-如何设置响应消息头" aria-hidden="true">#</a> 七、响应：如何设置响应消息头</h1><ul><li>响应消息头相当于对本次响应和响应体进行说明</li></ul><br><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletResponseHeader</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 调用经过封装的方法，设置响应体内容类型</span>
        <span class="token comment">// response.setContentType(&quot;text/html;charset=UTF-8&quot;);</span>

        <span class="token comment">// 通过响应消息头形式设置：传入两个参数</span>
        <span class="token comment">// 参数1：响应消息头属性名</span>
        <span class="token comment">// 参数2：响应消息头属性值</span>
        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/html;charset=UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;你好！二姑！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h1 id="八、响应-请求的重定向-重点" tabindex="-1"><a class="header-anchor" href="#八、响应-请求的重定向-重点" aria-hidden="true">#</a> 八、响应：请求的重定向(重点)</h1><h2 id="_1、概念-1" tabindex="-1"><a class="header-anchor" href="#_1、概念-1" aria-hidden="true">#</a> 1、概念</h2><p>服务器端给浏览器返回一个特殊响应，告诉浏览器去访问另一个资源</p><p><img src="`+l+`" alt="images"></p><blockquote><p>用借钱来举例：<br> 小明找栋哥借钱<br> 栋哥说：我也没钱。但是我可以告诉你，谁有钱，你去找他就行。<br> 然后小明就按栋哥说的，找另外那个人借到了钱。</p></blockquote><br><h2 id="_2、实现" tabindex="-1"><a class="header-anchor" href="#_2、实现" aria-hidden="true">#</a> 2、实现</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// response.sendRedirect(&quot;告诉浏览器需要继续访问的资源&quot;);</span>
response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">&quot;/demo/target/target.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、重定向的特点" tabindex="-1"><a class="header-anchor" href="#_3、重定向的特点" aria-hidden="true">#</a> 3、重定向的特点</h2><ul><li>整个过程浏览器会发送两个请求</li><li>服务器端通过两个设置告诉浏览器发生了重定向 <ul><li>响应状态码：302</li><li>响应消息头：Location设置为重定向的目标资源地址</li></ul></li><li>浏览器参与了重定向的过程，所以能够感知到一共请求了两个资源</li><li>浏览器地址栏会变成第二个资源的地址</li><li>重定向的目标资源可以是Web应用外部的资源</li></ul><h2 id="_4、重定向不能传递请求域" tabindex="-1"><a class="header-anchor" href="#_4、重定向不能传递请求域" aria-hidden="true">#</a> 4、重定向不能传递请求域</h2><p>整个重定向过程涉及到两个请求，在服务器端是两个不同的请求对象，所以把数据存入第一个请求对象的属性域，无法在第二个请求中获取。</p><h1 id="九、字符编码问题" tabindex="-1"><a class="header-anchor" href="#九、字符编码问题" aria-hidden="true">#</a> 九、字符编码问题</h1><h2 id="_1、编码和解码" tabindex="-1"><a class="header-anchor" href="#_1、编码和解码" aria-hidden="true">#</a> 1、编码和解码</h2><p>一个字符，我们看到的是字符本身：&#39;a&#39;，但是在计算机底层实际是二进制的方式存储。</p><ul><li>编码：把字符转换成对应的二进制数据就是编码。</li><li>解码：把二进制数据恢复为对应的字符就是解码。</li></ul><p>乱码的原因就是：编码和解码用的不是同一个字符集。</p><ul><li>编码：GBK（&#39;中&#39;：2233）</li><li>解码：UTF-8（2233：&#39;大&#39;）</li></ul><h2 id="_2、请求参数" tabindex="-1"><a class="header-anchor" href="#_2、请求参数" aria-hidden="true">#</a> 2、请求参数</h2><h3 id="_1get请求" tabindex="-1"><a class="header-anchor" href="#_1get请求" aria-hidden="true">#</a> ①GET请求</h3><p>Tomcat版本≤7，需要修改配置。修改方式：在conf/server.xml配置文件中找到第一个Connector，新增属性：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">URIEncoding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token attr-name">...</span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对GET请求来说，设置一次一劳永逸。</p><h3 id="_2post请求" tabindex="-1"><a class="header-anchor" href="#_2post请求" aria-hidden="true">#</a> ②POST请求</h3><p>在获取请求参数前，设置请求体解码字符集为：UTF-8。每一个请求需要单独设置，做不到一劳永逸。Tomcat10不需要设置。<br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 设置请求体解码字符集为：UTF-8</span>
request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> yourName <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;yourName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、返回响应" tabindex="-1"><a class="header-anchor" href="#_3、返回响应" aria-hidden="true">#</a> 3、返回响应</h2><p>注意：如果Tomcat版本较低（比如Tomcat7），必须先设置响应体内容类型，然后再获取PrintWriter！<br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 设置响应体的编码字符集，但是并没有告诉浏览器用什么字符集解码</span>
<span class="token comment">// response.setCharacterEncoding(&quot;UTF-8&quot;);</span>

<span class="token comment">// 设置响应体内容类型，告诉浏览器使用 UTF-8 来解码</span>
<span class="token comment">// 底层隐含的，服务器会自动使用相同字符集编码</span>
response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html;charset=UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;大西瓜，圆又圆。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="十、请求路径问题" tabindex="-1"><a class="header-anchor" href="#十、请求路径问题" aria-hidden="true">#</a> 十、请求路径问题</h1><blockquote><p>路径总共有三种： ❤相对路径：在有Servlet请求转发的因素存在时，相对路径会出错。以后不建议使用。<br> ❤绝对路径：建议使用的路径写法。<br> ❤物理路径：不同部署环境下，物理路径大概率不同，会导致项目没有可迁移性，所以项目中不能使用。<br></p></blockquote><br><h2 id="_1、故障演示" tabindex="-1"><a class="header-anchor" href="#_1、故障演示" aria-hidden="true">#</a> 1、故障演示</h2><h3 id="_1故障产生的流程" tabindex="-1"><a class="header-anchor" href="#_1故障产生的流程" aria-hidden="true">#</a> ①故障产生的流程</h3><p>超链接访问Servlet，Servlet转发请求到target/target.html。目标页面有超链接：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../index.html<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>回首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2故障原因" tabindex="-1"><a class="header-anchor" href="#_2故障原因" aria-hidden="true">#</a> ②故障原因</h3><p><img src="`+i+'" alt="images"></p><h2 id="_2、相对路径的本质" tabindex="-1"><a class="header-anchor" href="#_2、相对路径的本质" aria-hidden="true">#</a> 2、相对路径的本质</h2><p>并不是以开发的时候，我们的工程目录为参考依据；而是以实际运行时，浏览器地址栏上地址的目录结构为依据。<br> 所以以后我们就不写相对路径了，都写绝对路径。</p><h2 id="_3、绝对路径的概念" tabindex="-1"><a class="header-anchor" href="#_3、绝对路径的概念" aria-hidden="true">#</a> 3、绝对路径的概念</h2><h3 id="_1概念-1" tabindex="-1"><a class="header-anchor" href="#_1概念-1" aria-hidden="true">#</a> ①概念</h3><ul><li>路径在编写时，以“/”开头</li><li>路径开头的斜杠所代表的含义有区别： <ul><li>服务器：开头的斜杠代表当前Web应用</li><li>浏览器：开头的斜杠代表当前服务器的根目录</li></ul></li></ul><p><img src="'+u+'" alt="images"></p><h3 id="_2区分" tabindex="-1"><a class="header-anchor" href="#_2区分" aria-hidden="true">#</a> ②区分</h3><ul><li>服务器解析的路径：请求转发时指定的路径、web.xml中配置的路径</li><li>浏览器解析的路径：HTML标签中、JavaScript代码中、Servlet中重定向代码里的路径</li></ul><br><blockquote><p>本质上来说，路径由浏览器解析就比服务器解析的多一层contextPath</p></blockquote><br><h2 id="_4、绝对路径的写法" tabindex="-1"><a class="header-anchor" href="#_4、绝对路径的写法" aria-hidden="true">#</a> 4、绝对路径的写法</h2><h3 id="_1浏览器解析的路径" tabindex="-1"><a class="header-anchor" href="#_1浏览器解析的路径" aria-hidden="true">#</a> ①浏览器解析的路径</h3><ul><li>因为路径开头的斜杠代表当前服务器，所以整个路径以contextPath开头（contextPath本身就是斜杠开头）</li><li>格式：/contextPath/具体资源路径</li><li>例如：/demo/index.html</li></ul><br><h3 id="_2服务器解析的路径" tabindex="-1"><a class="header-anchor" href="#_2服务器解析的路径" aria-hidden="true">#</a> ②服务器解析的路径</h3><ul><li>因为路径开头的斜杠代表当前Web应用，所以不需要写contextPath了，斜杠后面直接写具体资源的路径</li><li>格式：/具体资源路径</li><li>例如：/ServletSecond</li></ul><br><h3 id="_3步骤总结" tabindex="-1"><a class="header-anchor" href="#_3步骤总结" aria-hidden="true">#</a> ③步骤总结</h3><ul><li>第一步：先写一个斜杠</li><li>第二步：判断当前路径是谁解析的 <ul><li>浏览器解析的路径：写contextPath，然后再写后面资源的路径</li><li>服务器解析的路径：不用写contextPath，直接写具体资源</li></ul></li></ul><br><h2 id="_5、从开发到部署" tabindex="-1"><a class="header-anchor" href="#_5、从开发到部署" aria-hidden="true">#</a> 5、从开发到部署</h2><ul><li>开发过程目录结构以及文件：活蹦乱跳的鸡</li><li>部署到Tomcat实例运行的目录结构以及文件：煮熟的鸡</li></ul><p>从开发时的目录和文件到部署后的目录和文件，中间的过程是Java源程序的编译和目录的重组。<br></p><p><img src="'+r+`" alt="iamges"></p><h2 id="_6、动态获取-contextpath" tabindex="-1"><a class="header-anchor" href="#_6、动态获取-contextpath" aria-hidden="true">#</a> 6、动态获取 contextPath</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 由于 contextPath 每次部署时可以修改，所以最好动态获取</span>
<span class="token class-name">String</span> contextPath <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 然后再根据动态获取的 contextPath 执行重定向就稳妥了</span>
response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>contextPath <span class="token operator">+</span> <span class="token string">&quot;/target/target.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h1 id="十一、总结" tabindex="-1"><a class="header-anchor" href="#十一、总结" aria-hidden="true">#</a> 十一、总结</h1><h2 id="_1、理论" tabindex="-1"><a class="header-anchor" href="#_1、理论" aria-hidden="true">#</a> 1、理论</h2><ul><li>理解页面渲染概念</li><li>理解请求转发的机制</li><li>理论请求重定向的机制</li><li>会表述请求转发和重定向的区别</li></ul><br><h2 id="_2、操作" tabindex="-1"><a class="header-anchor" href="#_2、操作" aria-hidden="true">#</a> 2、操作</h2><ul><li>获取请求参数：一个名字带一个值</li><li>获取请求参数：一个名字带多个值</li><li>动态获取contextPath</li><li>转发请求的操作</li><li>重定向请求的操作</li><li>向请求域保存数据</li><li>从请求域读取数据</li><li>给响应体指定内容类型</li><li>能够正确编写请求转发的路径</li><li>能够正确编写请求重定向的路径</li></ul>`,157),v=[k];function m(h,b){return s(),a("div",null,v)}const q=n(d,[["render",m],["__file","06-请求响应.html.vue"]]);export{q as default};
