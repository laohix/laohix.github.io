import{_ as n,o as s,c as a,e}from"./app-8007fa1b.js";const t="/assets/img004-323e93b6.png",p="/assets/img005-52d0f482.png",o="/assets/img006-a015c16f.png",i="/assets/img007-9fe7e444.png",l="/assets/img008-f758ed64.png",c={},r=e('<p><img src="'+t+'" alt="images"></p><h1 id="一、逻辑架构详解" tabindex="-1"><a class="header-anchor" href="#一、逻辑架构详解" aria-hidden="true">#</a> 一、逻辑架构详解</h1><h2 id="_1、connectors-客户端" tabindex="-1"><a class="header-anchor" href="#_1、connectors-客户端" aria-hidden="true">#</a> 1、Connectors（客户端）</h2><p>MySQL服务器之外的客户端程序，与具体的语⾔相关，例如Java中的JDBC，图形⽤户界⾯SQLyog等。本质上都是在TCP连接上通过MySQL协议和MySQL服务器进⾏通信。</p><br><h2 id="_2、sql层-服务层" tabindex="-1"><a class="header-anchor" href="#_2、sql层-服务层" aria-hidden="true">#</a> 2、SQL层（服务层）</h2><h3 id="_1连接层" tabindex="-1"><a class="header-anchor" href="#_1连接层" aria-hidden="true">#</a> ①连接层</h3><ul><li>客户端访问 MySQL 服务器前，做的第⼀件事就是建⽴TCP连接。</li><li>经过三次握⼿建⽴连接成功后， MySQL 服务器对 TCP 传输过来的账号密码做⾝份认证、权限获取。</li><li>⽤户名或密码不对，会收到⼀个Access denied for user错误，客户端程序结束执⾏</li><li>⽤户名密码认证通过，会从权限表查出账号拥有的权限与连接关联，之后的权限判断逻辑，都将依赖于此时读到的权限</li><li>TCP 连接收到请求后，必须要分配给⼀个线程专⻔与这个客户端的交互。所以还会有个线程池，去⾛后⾯的流程。每⼀个连接从线程池中获取线程，省去了创建和销毁线程的开销。</li></ul><br><h3 id="_2系统管理和控制工具" tabindex="-1"><a class="header-anchor" href="#_2系统管理和控制工具" aria-hidden="true">#</a> ②系统管理和控制⼯具</h3><p>⽤于管理和控制MySQL数据库服务器的软件⼯具。这些⼯具提供了对MySQL服务器的配置、监控、维护和故障排除等功能。<br> 以下是⼀些常⻅的MySQL系统管理和控制⼯具：</p><table><thead><tr><th>工具</th><th>说明</th></tr></thead><tbody><tr><td>MySQL命令⾏客户端</td><td>MySQL⾃带的命令⾏客户端是⼀个基本的系统管理⼯具，可以通过命令⾏界⾯与MySQL服务器进⾏交互。<br>管理员可以使⽤命令⾏客户端执⾏SQL语句、管理⽤户权限、查看⽇志等操作。</td></tr><tr><td>MySQL Workbench</td><td>官⽅提供的图形化管理⼯具，提供了丰富的功能来管理和控制MySQL服务器。它包括数据库设计、查询开发、备份恢复、性能优化等模块，使管理员可以通过可视化界⾯轻松地进⾏各种管理任务。</td></tr><tr><td>phpMyAdmin</td><td>基于Web的MySQL管理⼯具，通过浏览器访问，提供了图形化界⾯来管理MySQL服务器。它⽀持数据库的创建、表的管理、数据的导⼊导出等操作，适合于简单的数据库管理需求</td></tr><tr><td>MySQL Enterprise Monitor</td><td>官⽅提供的⾼级监控和管理⼯具。它可以实时监控MySQL服务器的性能指标、健康状态和资源利⽤情况，并提供警报和建议来优化和调整MySQL环境。</td></tr><tr><td>Percona Toolkit</td><td>由Percona开发的⼀组命令⾏⼯具，⽤于MySQL数据库的管理和维护。它包括了各种实⽤⼯具，如备份恢复、查询分析、性能优化、数据同步等，可以帮助管理员更好地管理MySQL服务器。</td></tr></tbody></table><br><p>这些系统管理和控制⼯具提供了不同级别的功能和灵活性，使管理员能够根据需要选择适合⾃⼰的⼯具来管理和控制MySQL服务器。⽆论是通过命令⾏还是图形界⾯，这些⼯具都可以帮助管理员更⾼效地管理MySQL数据库。</p><br><h3 id="_3sql接口" tabindex="-1"><a class="header-anchor" href="#_3sql接口" aria-hidden="true">#</a> ③SQL接口</h3><ul><li>接收⽤户的SQL命令，并且返回⽤户需要查询的结果。⽐如SELECT ... FROM就是调⽤SQL Interface</li><li>MySQL⽀持DML（数据操作语⾔）、DDL（数据定义语⾔）、存储过程、视图、触发器、⾃定义函数等多种SQL语⾔接⼝</li></ul><br><h3 id="_4解析器" tabindex="-1"><a class="header-anchor" href="#_4解析器" aria-hidden="true">#</a> ④解析器</h3><p>在SQL命令传递到解析器的时候会被解析器验证和解析。<br> 解析器中 SQL 语句进⾏词法分析、语法分析、语义分析，并为其创建语法树。</p><ul><li>词法分析：检测SQL语句的关键字是否正确</li><li>语法分析：检测SQL语句是否符合MySQL的语法要求，按照MySQL语法规则，⽣成解析树</li><li>语义分析：检查解析树是否合法，⽐如查看表是否存在，列是否存在</li></ul><br><p><img src="'+p+'" alt="images"></p><br><h3 id="_5查询优化器" tabindex="-1"><a class="header-anchor" href="#_5查询优化器" aria-hidden="true">#</a> ⑤查询优化器</h3><p>SQL语句在语法解析后、查询前会使⽤查询优化器对查询进⾏优化，确定SQL语句的执⾏路径，⽣成⼀个执⾏计划。</p><br><h3 id="_6查询缓存组件" tabindex="-1"><a class="header-anchor" href="#_6查询缓存组件" aria-hidden="true">#</a> ⑥查询缓存组件</h3><p>MySQL内部维持着⼀些Cache和Buffer<br> ⽐如Query Cache⽤来缓存⼀条SELECT语句的执⾏结果，如果能够在其中找到对应的查询结果，<br> 那么就不必再进⾏查询解析、查询优化和执⾏的整个过程了，直接将结果反馈给客户端。<br> 这个缓存机制是由⼀系列⼩缓存组成的。<br> ⽐如表缓存，记录缓存，key缓存，权限缓存等。<br> 这个查询缓存可以在不同客户端之间共享。<br> 但⼤多数情况查询缓存就是个鸡肋，为什么呢？<br> 只有相同的SQL语句才会命中查询缓存。<br> 两个查询请求在任何字符上的不同（例如：空格、注释、⼤⼩写），都会导致缓存不会命中。<br> 在两条查询之间有 INSERT 、 UPDATE 、 DELETE 、 TRUNCATE TABLE 、 ALTER TABLE 、 DROP TABLE 或 DROP DATABASE 语句也会导致缓存失效<br> 因此 MySQL的查询缓存命中率不⾼。所以在MySQL 8之后就抛弃了这个功能。</p><br><h3 id="_7存储引擎层" tabindex="-1"><a class="header-anchor" href="#_7存储引擎层" aria-hidden="true">#</a> ⑦存储引擎层</h3><p>存储引擎层（ Storage Engines），负责MySQL中数据的存储和提取，对物理服务器级别维护的底层数据执⾏操作，服务器通过API与存储引擎进⾏通信。<br> 不同的存储引擎具有的功能不同，管理的表有不同的存储结构，采⽤的存取算法也不同，这样我们可以根据⾃⼰的实际需要进⾏选取。例如MyISAM引擎和InnoDB引擎。<br></p><h3 id="_8存储层" tabindex="-1"><a class="header-anchor" href="#_8存储层" aria-hidden="true">#</a> ⑧存储层</h3><p>所有的数据、数据库、表的定义、表的每⼀⾏的内容、索引，都是存在⽂件系统上，以⽂件的⽅式存在，并完成与存储引擎的交互<br></p><h1 id="二、查询流程" tabindex="-1"><a class="header-anchor" href="#二、查询流程" aria-hidden="true">#</a> 二、查询流程</h1><p>⼀条查询的SQL语句的执⾏流程如下所示：<br></p><p><img src="'+o+`" alt="images"></p><br><ul><li>MySQL客户端通过协议与MySQL服务器建连接</li><li>通过SQL接⼝发送SQL语句，先检查查询缓存 <ul><li>命中：直接返回结果</li><li>未命中：进⾏语句解析</li></ul></li></ul><br><p>接下来是解析过程：MySQL解析器通过关键字将SQL语句进⾏解析，并⽣成⼀棵对应的解析树，解析器使⽤MySQL语法规则验证和解析SQL语句<br> 例如，它将验证是否使⽤了错误的关键字，或者使⽤关键字的顺序是否正确，引号能否前后匹配等<br> 预处理器则根据MySQL规则进⼀步检查解析树是否合法，例如，这⾥将检查数据表和数据列是否存在，还会解析名字和别名，看是否有歧义等，并⽣成⼀棵新解析树，新解析树可能和旧解析树结构⼀致<br></p><br><p>然后是优化过程：MySQL优化程序会对我们的语句做⼀些优化，将查询的IO成本和CPU成本降到最低。 优化的结果就是⽣成⼀个执⾏计划。 这个执⾏计划表明了应该使⽤哪些索引执⾏查询，以及表之间的连接顺序是啥样，必要时将⼦查询转换为连接、表达式简化等等。 我们可以使⽤EXPLAIN语句来查看某个语句的执⾏计划。</p><br><p>最后，进⼊执⾏阶段。完成查询优化后，查询执⾏引擎会按照⽣成的执⾏计划调⽤存储引擎提供的接⼝执⾏SQL查询并将结果返回给客户端。<br> 在MySQL8以下的版本，如果设置了查询缓存，这时会将查询结果进⾏缓存，再返回给客户端。</p><br><h1 id="三、sql执行流程" tabindex="-1"><a class="header-anchor" href="#三、sql执行流程" aria-hidden="true">#</a> 三、SQL执行流程</h1><h2 id="_1、启用-profiling-功能" tabindex="-1"><a class="header-anchor" href="#_1、启用-profiling-功能" aria-hidden="true">#</a> 1、启用 profiling 功能</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 查看 profiling 功能是否已启用</span>
<span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&quot;%profiling%&quot;</span><span class="token punctuation">;</span>
    
<span class="token comment"># 启用 profiling 功能</span>
<span class="token keyword">set</span> profiling<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">set</span> profiling_history_size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>
    
<span class="token comment"># 执行查询语句</span>
<span class="token keyword">select</span> emp_id<span class="token punctuation">,</span> emp_name <span class="token keyword">from</span> t_emp<span class="token punctuation">;</span>

<span class="token comment"># 显示最近的几次查询，找到查询语句的 query Id</span>
<span class="token keyword">show</span> profiles <span class="token punctuation">;</span>
    
<span class="token comment"># 根据 query Id 显示查询语句执行流程</span>
<span class="token keyword">SHOW</span> PROFILE <span class="token keyword">FOR</span> QUERY <span class="token number">286</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="_2、执行过程说明" tabindex="-1"><a class="header-anchor" href="#_2、执行过程说明" aria-hidden="true">#</a> 2、执行过程说明</h2><br><table><thead><tr><th>操作步骤</th><th>说明</th></tr></thead><tbody><tr><td>starting</td><td>事务开始</td></tr><tr><td>Executing hook on transaction</td><td>在事务期间执行钩子函数</td></tr><tr><td>checking permissions</td><td>检查权限，确保用户有权执行相应的操作</td></tr><tr><td>Opening tables</td><td>打开相关数据库表</td></tr><tr><td>init</td><td>初始化操作</td></tr><tr><td>System lock</td><td>获取系统级别的锁定</td></tr><tr><td>optimizing</td><td>优化查询计划</td></tr><tr><td>statistics</td><td>收集统计信息</td></tr><tr><td>preparing</td><td>准备执行查询</td></tr><tr><td>executing</td><td>执行查询</td></tr><tr><td>end</td><td>事务结束</td></tr><tr><td>query end</td><td>查询结束</td></tr><tr><td>waiting for handler commit</td><td>等待处理程序提交</td></tr><tr><td>closing tables</td><td>关闭数据库表</td></tr><tr><td>freeing items</td><td>释放资源</td></tr><tr><td>cleaning up</td><td>清理操作</td></tr></tbody></table><br><h1 id="四、存储引擎" tabindex="-1"><a class="header-anchor" href="#四、存储引擎" aria-hidden="true">#</a> 四、存储引擎</h1><h2 id="_1、查看存储引擎" tabindex="-1"><a class="header-anchor" href="#_1、查看存储引擎" aria-hidden="true">#</a> 1、查看存储引擎</h2><h3 id="_1查看系统中所有存储引擎" tabindex="-1"><a class="header-anchor" href="#_1查看系统中所有存储引擎" aria-hidden="true">#</a> ①查看系统中所有存储引擎</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> ENGINES<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_2查看当前系统中默认的存储引擎" tabindex="-1"><a class="header-anchor" href="#_2查看当前系统中默认的存储引擎" aria-hidden="true">#</a> ②查看当前系统中默认的存储引擎</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">&#39;%default_storage_engine%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h2 id="_2、设置存储引擎-了解" tabindex="-1"><a class="header-anchor" href="#_2、设置存储引擎-了解" aria-hidden="true">#</a> 2、设置存储引擎（了解）</h2><h3 id="_1方式一" tabindex="-1"><a class="header-anchor" href="#_1方式一" aria-hidden="true">#</a> ①方式一</h3><p>设置默认存储引擎：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> DEFAULT_STORAGE_ENGINE<span class="token operator">=</span>MyISAM<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_2方式二" tabindex="-1"><a class="header-anchor" href="#_2方式二" aria-hidden="true">#</a> ②方式二</h3><p>修改 my.cnf 文件：vim /etc/my.cnf<br> 在[mysqld]节点下新增一行：default-storage-engine=MyISAM<br> 重启MySQL<br></p><h3 id="_3方式三" tabindex="-1"><a class="header-anchor" href="#_3方式三" aria-hidden="true">#</a> ③方式三</h3><p>我们可以为 不同的表设置不同的存储引擎：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">(</span> 建表语句 <span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> 存储引擎名称<span class="token punctuation">;</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ENGINE</span> <span class="token operator">=</span> 存储引擎名称<span class="token punctuation">;</span>
<span class="token comment">-- 例如：</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student<span class="token punctuation">(</span>id <span class="token keyword">INT</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>age <span class="token keyword">INT</span><span class="token punctuation">,</span>dept <span class="token keyword">INT</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> MyISAM<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="_3、常见存储引擎介绍" tabindex="-1"><a class="header-anchor" href="#_3、常见存储引擎介绍" aria-hidden="true">#</a> 3、常见存储引擎介绍</h2><p>在MySQL8中提供了很多的存储引擎，不同的存储引擎的特点是不一样的，常见的存储引擎有：InnoDB、MyISAM、Memory、Archive(高压缩比)、 Blackhole（黑洞）、CSV引擎、Federated引擎等。</p><br><h3 id="_1innodb" tabindex="-1"><a class="header-anchor" href="#_1innodb" aria-hidden="true">#</a> ①InnoDB</h3><ul><li>默认存储引擎：在MySQL 5.5版本之后，InnoDB成为了MySQL的默认存储引擎。</li><li>支持事务：InnoDB是一个支持ACID事务的存储引擎，可以提供数据的一致性和可靠性。</li><li>行级锁定：InnoDB使用行级锁定来实现并发控制，允许多个事务同时读取和写入不同的行，提高了并发性能。</li><li>外键约束：InnoDB支持外键约束，可以保证数据的完整性和一致性。</li><li>支持崩溃恢复：InnoDB具有崩溃恢复机制，可以在数据库异常关闭后进行恢复。</li></ul><br><h4 id="_1-测试事务" tabindex="-1"><a class="header-anchor" href="#_1-测试事务" aria-hidden="true">#</a> [1]测试事务</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> goods_innodb<span class="token punctuation">(</span>
    id <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">innodb</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>
<span class="token comment">-- sql语句</span>
<span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> goods_innodb<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">&#39;Meta20&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">commit</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="_2-测试外键" tabindex="-1"><a class="header-anchor" href="#_2-测试外键" aria-hidden="true">#</a> [2]测试外键</h4><p>MySQL支持外键的存储引擎只有InnoDB ,在创建外键的时候， 要求父表必须有对应的索引,子表在创建外键的时候， 也会自动的创建对应的索引。 下面两张表中， country_innodb是父表 ， country_id为主键索引，city_innodb表是子表，country_id字段为外键，对应于country_innodb表的主 键country_id。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> country_innodb<span class="token punctuation">(</span>
    country_id <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
    country_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>country_id<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> city_innodb<span class="token punctuation">(</span>
    city_id <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
    city_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    country_id <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>city_id<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">CONSTRAINT</span> <span class="token identifier"><span class="token punctuation">\`</span>fk_city_country<span class="token punctuation">\`</span></span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>country_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> country_innodb<span class="token punctuation">(</span>country_id<span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">RESTRICT</span> <span class="token keyword">ON</span>
    <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span>
<span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> country_innodb <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">&#39;China&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">&#39;America&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">&#39;Japan&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> city_innodb <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">&#39;Xian&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">&#39;NewYork&#39;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">&#39;BeiJing&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p>在创建外键时， 可以指定在删除、更新父表时，对子表进行的相应操作，包括 RESTRICT、CASCADE、SET NULL 和 NO ACTION。<br> RESTRICT和NO ACTION相同， 是指限制在子表有关联记录的情况下， 父表不能更新；<br> CASCADE(级联)表示父表在更新或者删除时，更新或者删除子表对应的记录；<br> SET NULL 则表示父表在更新或者删除的时候，子表的对应字段被SET NULL 。<br> 针对上面创建的两个表， 子表的外键指定是ON DELETE RESTRICT ON UPDATE CASCADE 方式的， 那么在主表删除记录的时候， 如果子表有对<br> 应记录， 则不允许删除， 主表在更新记录的时候， 如果子表有对应记录， 则子表对应更新 。<br></p><p>表中数据如下表所示：<br></p><p><img src="`+i+`" alt="images"></p><br><p>外键信息可以使用如下方式查看 ：<br></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> city_innodb <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><p>外键关联性测试：</p><ul><li>删除country_id为1 的country数据</li><li>更新主表country表的字段 country_id，然后观察子表中对应的数据</li></ul><br><p>开发建议：</p><ul><li>在功能开发过程中，为了使用测试数据方便，通常先不加外键约束</li><li>在正式上线或发版之前再添加外键约束</li></ul><br><h3 id="_2myisam" tabindex="-1"><a class="header-anchor" href="#_2myisam" aria-hidden="true">#</a> ②MyISAM</h3><ul><li>不支持事务：MyISAM是一个不支持事务的存储引擎，无法提供数据的一致性和可靠性。</li><li>表级锁定：MyISAM使用表级锁定来实现并发控制，只允许一个事务对整个表进行读写操作，限制了并发性能。</li><li>较低的存储空间占用：相比InnoDB，MyISAM在存储空间占用方面较低，适合存储大量非事务性的数据。</li></ul><br><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> goods_myisam<span class="token punctuation">(</span>
    id <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span>myisam <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p><img src="`+l+`" alt="images"></p><br><h3 id="_3memory" tabindex="-1"><a class="header-anchor" href="#_3memory" aria-hidden="true">#</a> ③Memory</h3><ul><li>数据存储在内存中：Memory存储引擎将数据完全存储在内存中，因此读写速度非常快。</li><li>不支持持久化：Memory存储引擎不支持数据的持久化，数据库重启后数据会丢失。</li><li>表级锁定：Memory使用表级锁定来实现并发控制，只允许一个事务对整个表进行读写操作，限制了并发性能。</li><li>适用于临时数据和缓存：由于数据存储在内存中且不支持持久化，Memory存储引擎适用于存储临时数据和缓存，而不适合长期存储。</li></ul><br><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 建表语句</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> goods_memory <span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
    column1 <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    column2 <span class="token keyword">INT</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span>MEMORY<span class="token punctuation">;</span>
<span class="token comment">-- 测试数据存储在内存中</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> goods_memory <span class="token punctuation">(</span>id<span class="token punctuation">,</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;value1&#39;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> goods_memory<span class="token punctuation">;</span>
<span class="token comment">-- 重启mysql容器，数据丢失</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="_4、myisam-和-innodb-对比" tabindex="-1"><a class="header-anchor" href="#_4、myisam-和-innodb-对比" aria-hidden="true">#</a> 4、MyISAM 和 InnoDB 对比</h2><table><thead><tr><th> </th><th>MyISAM</th><th>InnoDB</th></tr></thead><tbody><tr><td>外键</td><td>不支持</td><td>支持</td></tr><tr><td>事务</td><td>不支持</td><td>支持</td></tr><tr><td>行表锁</td><td>表锁，操作一条记录也会锁定整个表，不适合高并发操作</td><td>行锁，操作哪一行就锁定哪一行，对其它行没有影响，适合高并发操作<br>也支持表锁</td></tr><tr><td>缓存</td><td>只缓存索引，不缓存真实数据</td><td>不仅缓存索引还缓存真实数据，对内存要求较高，内存大小对性能有决定性影响，支持聚簇索引</td></tr><tr><td>关注点</td><td>并发查询、节省资源、消耗少、简单业务</td><td>并发写、事务、更大更复杂的资源操作</td></tr><tr><td>默认使用</td><td>MySQL5.5之前</td><td>MySQL5.5开始</td></tr><tr><td>自带系统表</td><td>有</td><td>无</td></tr></tbody></table>`,113),d=[r];function u(k,b){return s(),a("div",null,d)}const y=n(c,[["render",u],["__file","MySQL02-逻辑架构.html.vue"]]);export{y as default};
