import{_ as n,o as a,c as e,d as p,e as s}from"./app-8007fa1b.js";const t="/assets/image-20230626213253740-0c31443e.png",o="/assets/image-20230626213325950-4d4bf160.png",c="/assets/image-20230626213419558-1a62140e.png",l="/assets/image-20230626213625312-4b4de8bf.png",i="/assets/image-20230626213522733-0413b2ce.png",r="/assets/image-20230626213839349-0f0e407f.png",d="/assets/image-20230626213925703-bee9bce3.png",k="/assets/image-20230626214022420-d7fa788a.png",u="/assets/image-20230626214056508-c9f7516a.png",m="/assets/image-20230626214205065-3c345c65.png",g="/assets/image-20230626214300067-a68856ad.png",v="/assets/image-20230626214425971-b491d8c1.png",E="/assets/image-20230626214710029-010e5576.png",y="/assets/image-20230626214806173-5fdfd58b.png",w="/assets/image-20230626214943324-f0914868.png",b="/assets/image-20230626215259468-a1d67ed2.png",L="/assets/image-20230626215407617-e8a2dd70.png",N="/assets/image-20230626215445077-c61f2299.png",h="/assets/image-20230626215605584-2a36adc6.png",R="/assets/image-20230626215650836-1217209c.png",_="/assets/image-20230626215727106-458efb49.png",T="/assets/image-20230626215807969-0b93c123.png",I="/assets/image-20230626215855421-1c97b7f1.png",A="/assets/image-20230626221403597-f2d0e165.png",q="/assets/image-20230626221821004-d9bf4900.png",S="/assets/image-20230626221854706-f98294ef.png",O="/assets/image-20230626222020922-5734f04e.png",C="/assets/image-20230626222109128-b30df8a0.png",M="/assets/image-20230626222159536-664b9b80.png",U="/assets/image-20230626222247353-902e2b62.png",x="/assets/image-20230626222335114-3af3966e.png",f="/assets/image-20230626222420658-0fe0356c.png",P="/assets/image-20230626222533347-094a2d27.png",F="/assets/image-20230626222739299-969a2377.png",X={},H=s(`<h1 id="_1-mysql优化-索引优化" tabindex="-1"><a class="header-anchor" href="#_1-mysql优化-索引优化" aria-hidden="true">#</a> 1 MySQL优化（索引优化）</h1><h2 id="_1-1-优化简介" tabindex="-1"><a class="header-anchor" href="#_1-1-优化简介" aria-hidden="true">#</a> 1.1 优化简介</h2><p>MySQL性能调优是指通过对MySQL数据库系统进行优化，以<strong>提高其执行速度、响应时间和资源利用率</strong>的过程。MySQL是一种常用的关系型数据库</p><p>管理系统，因此针对MySQL的性能调优主要集中在以下几个方面：</p><p>1、查询优化：通过分析和优化查询语句，包括使用合适的索引、避免全表扫描、优化JOIN操作等，以提高查询性能。</p><p>2、索引优化：合理设计和使用索引，包括选择合适的列作为索引、创建复合索引、删除不必要的索引等，以加快数据检索速度。</p><p>3、配置优化：调整MySQL的配置参数，如缓冲区大小、并发连接数、线程池大小等，以适应不同的工作负载和硬件环境。</p><p>4、内存管理：合理配置MySQL的内存使用，包括设置合适的缓冲池大小、排序缓冲区大小、临时表空间大小等，以提高内存利用率和减少磁盘IO。</p><p>5、存储引擎选择：根据应用需求选择合适的存储引擎，如InnoDB、MyISAM等，并针对不同存储引擎进行相应的优化。</p><p>6、数据库设计优化：合理设计数据库表结构、字段类型和关系，以减少数据冗余和提高查询效率。</p><p>以上只是MySQL性能调优的一些常见方面，具体的调优策略和方法需要根据具体情况进行分析和优化。通过综合考虑硬件、操作系统、网络和应用程</p><p>序等因素，可以全面提升MySQL数据库的性能和可伸缩性。</p><h2 id="_1-2-性能分析-explain" tabindex="-1"><a class="header-anchor" href="#_1-2-性能分析-explain" aria-hidden="true">#</a> 1.2 性能分析（EXPLAIN）</h2><h3 id="_1-2-1-explain简介" tabindex="-1"><a class="header-anchor" href="#_1-2-1-explain简介" aria-hidden="true">#</a> 1.2.1 EXPLAIN简介</h3><p>查看SQL执行计划：使用EXPLAIN关键字可以<strong>模拟优化器执行SQL查询语句</strong>，从而知道MySQL是如何处理你的SQL语句的。分析你的查询语句或</p><p>是表结构的性能瓶颈。</p><p><strong>用法：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token operator">+</span> <span class="token keyword">SQL</span>语句
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-2-2-数据准备" tabindex="-1"><a class="header-anchor" href="#_1-2-2-数据准备" aria-hidden="true">#</a> 1.2.2 数据准备</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">USE</span> atguigudb<span class="token punctuation">;</span>
 
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t1<span class="token punctuation">(</span>id <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span> content <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t2<span class="token punctuation">(</span>id <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span> content <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t3<span class="token punctuation">(</span>id <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span> content <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t4<span class="token punctuation">(</span>id <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span> content1 <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> content2 <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_content1 <span class="token keyword">ON</span> t4<span class="token punctuation">(</span>content1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">-- 创建普通索引</span>

<span class="token comment"># 以下新增sql多执行几次，以便演示</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t1<span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>CONCAT<span class="token punctuation">(</span><span class="token string">&#39;t1_&#39;</span><span class="token punctuation">,</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t2<span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>CONCAT<span class="token punctuation">(</span><span class="token string">&#39;t2_&#39;</span><span class="token punctuation">,</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t3<span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>CONCAT<span class="token punctuation">(</span><span class="token string">&#39;t3_&#39;</span><span class="token punctuation">,</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t4<span class="token punctuation">(</span>content1<span class="token punctuation">,</span> content2<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>CONCAT<span class="token punctuation">(</span><span class="token string">&#39;t4_&#39;</span><span class="token punctuation">,</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CONCAT<span class="token punctuation">(</span><span class="token string">&#39;t4_&#39;</span><span class="token punctuation">,</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-3-explain结果字段说明" tabindex="-1"><a class="header-anchor" href="#_1-2-3-explain结果字段说明" aria-hidden="true">#</a> 1.2.3 EXPLAIN结果字段说明</h3><h4 id="table" tabindex="-1"><a class="header-anchor" href="#table" aria-hidden="true">#</a> table</h4><p>单表：显示这一行的数据是关于哪张表的</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+t+`" alt="image-20230626213253740"></p><p>多表：关联查询中，显示在执行计划第一行的是驱动表，第二行是被驱动表</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t1<span class="token punctuation">,</span> t2 <span class="token keyword">WHERE</span> t1<span class="token punctuation">.</span>id <span class="token operator">=</span> t2<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+o+'" alt="image-20230626213325950"></p><h4 id="id" tabindex="-1"><a class="header-anchor" href="#id" aria-hidden="true">#</a> id</h4><p>在一个完整的查询语句中，每个SELECT关键字，都对应一个唯一的id。同时通过id也可以知道操作表的顺序。<br> id 字段显示出来都是整数值，这些整数值有相同的，有不同的</p><ul><li>不相同的整数值：代表执行SQL语句的大步骤</li><li>相同的整数值出现的次数：代表一个大步骤中，包含几个小步骤</li></ul><br>',32),Q=s(`<br><ul><li>大步骤：按照数值从大到小的顺序执行</li><li>小步骤：在它所在的大步骤内，按照从上到下的顺序执行</li><li>所以上面例子的执行顺序应该是：f g h d e a b c</li></ul><br><p>大步骤越少越好，总的步骤数量越少越好</p><br><p><strong>id相同：</strong> 一个SELECT，id都是1</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t1<span class="token punctuation">,</span> t2<span class="token punctuation">,</span> t3<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+c+`" alt="image-20230626213419558"></p><p>**id不同：**三个SELECT，id是1、2、3</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> t1<span class="token punctuation">.</span>id <span class="token keyword">FROM</span> t1 <span class="token keyword">WHERE</span> t1<span class="token punctuation">.</span>id <span class="token operator">=</span><span class="token punctuation">(</span>
  <span class="token keyword">SELECT</span> t2<span class="token punctuation">.</span>id <span class="token keyword">FROM</span> t2 <span class="token keyword">WHERE</span> t2<span class="token punctuation">.</span>id <span class="token operator">=</span><span class="token punctuation">(</span>
    <span class="token keyword">SELECT</span> t3<span class="token punctuation">.</span>id <span class="token keyword">FROM</span> t3 <span class="token keyword">WHERE</span> t3<span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token string">&#39;t3_479&#39;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+l+'" alt="image-20230626213625312"></p><p><strong>注意</strong>：如果t3表查询无结果，则table列t1和t2处为NULL</p><p><img src="'+i+`" alt="image-20230626213522733"></p><p>**注意：**查询优化器可能对涉及子查询的语句进行优化，<strong>转为连接查询</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t1 <span class="token keyword">WHERE</span> content <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> content <span class="token keyword">FROM</span> t2 <span class="token keyword">WHERE</span> content <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+r+`" alt="image-20230626213839349"></p><p><strong>id为NULL：</strong> 把t1和t2的查询结果合并，并创建名为&lt;union1,2&gt;的临时表，然后对结果去重 把t1和t2的查询结果合并</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t1 <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+d+`" alt="image-20230626213925703"></p><p>因此包含UNION ALL的执行计划中就没有这条记录</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t1 <span class="token keyword">UNION</span> <span class="token keyword">ALL</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+k+`" alt="image-20230626214022420"></p><ol><li><p>UNION：使用UNION操作符时，会将多个SELECT语句的结果集合并，并去除重复的行。即，如果多个SELECT语句返回了相同的行，则只保留</p><p>一行。</p></li><li><p>UNION ALL：使用UNION ALL操作符时，也会将多个SELECT语句的结果集合并，但不去除重复的行。即，如果多个SELECT语句返回了相同</p><p>的行，则全部保留。</p></li></ol><p><strong>小结：</strong></p><ul><li>id如果相同，可以认为是一组，<code>从上往下顺序执行</code></li><li>在所有组中，<code>id值越大，越先执行</code></li><li>关注点：每个id号码，表示一次独立的查询, <code>一个sql的查询趟数越少越好</code></li></ul><h4 id="select-type" tabindex="-1"><a class="header-anchor" href="#select-type" aria-hidden="true">#</a> select_type</h4><p>查询的类型，主要是用于区别普通查询、联合查询、子查询等的复杂查询。<br> 从SQL优化的角度来看：</p><ul><li>最希望看到的是所有步骤都是SIMPLE</li><li>SUBQUERY如果能够改成SIMPLE就尽量改，也就是尽量不用子查询</li><li>SUBQUERY比DEPENDENT SUBQUREY要好</li></ul><br><p>**SIMPLE：**简单查询，查询中不包含子查询或者UNION。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+u+`" alt="image-20230626214056508"></p><p>**PRIMARY：**主查询，查询中若包含子查询，则最外层查询被标记为PRIMARY。</p><p>**SUBQUERY：**子查询，在SELECT或WHERE列表中包含了子查询。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t3 <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> t2 <span class="token keyword">WHERE</span> content<span class="token operator">=</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+m+`" alt="image-20230626214205065"></p><p><strong>DEPENDENT SUBQUREY：<strong>如果包含了子查询，并且查询语句不能被优化器转换为连接查询，并且子查询是</strong>相关子查询（子查询基于外部数据</strong></p><p><strong>列）</strong>，则子查询就是DEPENDENT SUBQUREY。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t3 <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> t2 <span class="token keyword">WHERE</span> content <span class="token operator">=</span> t3<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+g+`" alt="image-20230626214300067"></p><p>UNCACHEABLE SUBQUREY： 表示一个子查询（subquery）被标记为无法缓存。在某些数据库管理系统中，查询优化器会尝试将查询结果缓存起来</p><p>以提高性能，但对于被标记为UNCACHEABLE的子查询，查询优化器将不会缓存其结果。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t3 <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> t2 <span class="token keyword">WHERE</span> content <span class="token operator">=</span> @<span class="token variable">@character_set_server</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+v+`" alt="image-20230626214425971"></p><p><strong>UNION：</strong> 对于包含UNION或者UNION ALL的查询语句，除了最左边的查询是PRIMARY，其余的查询都是UNION。</p><p><strong>UNION RESULT：</strong> UNION会对查询结果进行查询去重，MYSQL会使用临时表来完成UNION查询的去重工作，针对这个临时表的查询就</p><p>是&quot;UNION RESULT&quot;。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> 
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t3 <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span> 
<span class="token keyword">UNION</span>  
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t2 <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+E+`" alt="image-20230626214710029"></p><p><strong>DEPENDENT UNION：</strong> 子查询中的UNION或者UNION ALL，除了最左边的查询是DEPENDENT SUBQUREY，其余的查询都是</p><p>DEPENDENT UNION。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code> <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t1 <span class="token keyword">WHERE</span> content <span class="token operator">IN</span>
 <span class="token punctuation">(</span>
 <span class="token keyword">SELECT</span> content <span class="token keyword">FROM</span> t2 
 <span class="token keyword">UNION</span> 
 <span class="token keyword">SELECT</span> content <span class="token keyword">FROM</span> t3
 <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+y+`" alt="image-20230626214806173"></p><p><strong>DERIVED：</strong> 在包含**派生表（子查询在from子句中）**的查询中，MySQL会递归执行这些子查询，把结果放在临时表里。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">(</span>
   <span class="token keyword">SELECT</span> content<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> c <span class="token keyword">FROM</span> t1 <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> content
<span class="token punctuation">)</span> <span class="token keyword">AS</span> derived_t1 <span class="token keyword">WHERE</span> c <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的**&lt;derived2&gt;**就是在id为2的查询中产生的派生表。</p><p><img src="`+w+`" alt="image-20230626214943324"></p><h4 id="type" tabindex="-1"><a class="header-anchor" href="#type" aria-hidden="true">#</a> type</h4><p>type字段表示了查询操作的<strong>访问类型</strong>，用于描述查询引擎在执行查询时使用的访问方法。</p><p><strong>ALL：</strong> 全表扫描，Full Table Scan，将遍历全表以找到匹配的行</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+b+`" alt="image-20230626215259468"></p><p><strong>index：<strong>表示全索引扫描，即遍历整个索引树来获取结果，而</strong>不需要回表</strong>查找数据。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> content1 <span class="token keyword">FROM</span> t4<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+L+`" alt="image-20230626215407617"></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> t1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+N+`" alt="image-20230626215445077"></p><p><strong>range：</strong> 只检索给定范围的行，使用一个索引来选择行。key 列显示使用了哪个索引，一般就是在你的where语句中出现了between、&lt;、&gt;、in等</p><p>的查询。这种范围扫描索引扫描比全表扫描要好，因为它只需要开始于索引的某一点，而结束于另一点，不用扫描全部索引。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t1 <span class="token keyword">WHERE</span> id <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+h+`" alt="image-20230626215605584"></p><p><strong>ref：</strong> 表示使用了非唯一索引进行的等值比较，可能返回多个匹配的行。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t4 <span class="token keyword">WHERE</span> content1 <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+R+`" alt="image-20230626215650836"></p><p>**eq_ref：**表示使用了连接（join）查询，并且连接条件是通过唯一索引进行的等值比较。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t1<span class="token punctuation">,</span> t2 <span class="token keyword">WHERE</span> t1<span class="token punctuation">.</span>id <span class="token operator">=</span> t2<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+_+`" alt="image-20230626215727106"></p><p><strong>system</strong>：表示只有一行数据的表，这是最快的访问方式。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t<span class="token punctuation">(</span>i <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token keyword">Engine</span><span class="token operator">=</span>MyISAM<span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+T+`" alt="image-20230626215807969"></p><h4 id="possible-keys-和-key" tabindex="-1"><a class="header-anchor" href="#possible-keys-和-key" aria-hidden="true">#</a> possible_keys 和 key</h4><p>1、possible_keys表示执行查询时可能用到的索引，一个或多个。 查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询实际使用。</p><p>2、keys表示实际使用的索引。如果为NULL，则没有使用索引。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> t1 <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+I+'" alt="image-20230626215855421"></p><h4 id="key-len" tabindex="-1"><a class="header-anchor" href="#key-len" aria-hidden="true">#</a> key_len</h4><p>表示索引使用的字节数，根据这个值可以判断索引的使用情况，<code>检查是否充分利用了索引，针对联合索引值越大越好。</code></p><p><strong>如何计算：</strong></p><p>1、先看索引上字段的类型。比如：int=4 ; varchar(20) =20 ; char(20) =20</p><p>2、如果是varchar或者char这种字符串字段，视字符集要乘不同的值，比如utf8要乘 3(MySQL5.7)，如果是utf8mb4要乘4，GBK要乘2</p><p>3、varchar这种动态字符串要加2个字节</p><p>4、允许为空的字段要加1个字节</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t_emp<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>empno<span class="token punctuation">`</span></span> <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>					<span class="token comment">-- 可以使用随机数字，或者从1开始的自增数字，不允许重复</span>\n  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  		<span class="token comment">-- 随机生成，允许姓名重复 20 * 4 + 2 + 1= 83</span>\n  <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>				<span class="token comment">-- 区间随机数  4 + 1</span>\n  <span class="token identifier"><span class="token punctuation">`</span>deptId<span class="token punctuation">`</span></span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>			<span class="token comment">-- 1-1w之间随机数</span>\n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\n\n<span class="token comment">-- 创建索引</span>\n<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_age_name <span class="token keyword">ON</span> t_emp<span class="token punctuation">(</span>age<span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">-- 测试1</span>\n<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_emp <span class="token keyword">WHERE</span> age <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">AND</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token string">&#39;ab%&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">-- 测试2</span>\n<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_emp <span class="token keyword">WHERE</span> age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="'+A+`" alt="image-20230626221403597"></p><h4 id="ref" tabindex="-1"><a class="header-anchor" href="#ref" aria-hidden="true">#</a> ref</h4><p>ref字段表示连接操作中使用的索引列。</p><p><strong>const：</strong> 与索引列进行等值比较的东西是啥，const表示一个常数</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t4 <span class="token keyword">WHERE</span> content1 <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+q+`" alt="image-20230626221821004"></p><p><strong>ref=atguigudb.t1.id</strong> 关联查询时出现，t2表和t1表的哪一列进行关联</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t1<span class="token punctuation">,</span> t2 <span class="token keyword">WHERE</span> t1<span class="token punctuation">.</span>id <span class="token operator">=</span> t2<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+S+`" alt="image-20230626221854706"></p><h4 id="rows" tabindex="-1"><a class="header-anchor" href="#rows" aria-hidden="true">#</a> rows</h4><p>rows字段的值是一个估计值，表示查询操作在执行时<strong>可能会扫描的行数</strong>。这个估计值是根据统计信息和查询优化器的算法得出的，并不是实际执行时</p><p>的准确值。它可以用来帮助我们评估查询的性能和效率。rows字段的值越小越好!</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 如果是全表扫描，rows的值就是表中数据的估计行数</span>
<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_emp <span class="token keyword">WHERE</span> empno <span class="token operator">=</span> <span class="token string">&#39;100001&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 如果是使用索引查询，rows的值就是预计扫描索引记录行数</span>
<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_emp <span class="token keyword">WHERE</span> deptId <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+O+`" alt="image-20230626222020922"></p><h4 id="filtered" tabindex="-1"><a class="header-anchor" href="#filtered" aria-hidden="true">#</a> filtered</h4><p>最后查询出来的数据占所有服务器端（server）检查行数（rows）的百分比。值越大越好。</p><h4 id="extra" tabindex="-1"><a class="header-anchor" href="#extra" aria-hidden="true">#</a> Extra</h4><p>Extra字段提供了一些与查询操作相关的<strong>附加信息</strong>，帮助我们更好地理解查询的执行过程和性能特点。MySQL提供的额外信息有好几十个，这里只挑</p><p>比较重要的介绍。</p><p><strong>Impossible WHERE</strong>：where子句的值总是false</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_emp <span class="token keyword">WHERE</span> <span class="token number">1</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+C+'" alt="image-20230626222109128"></p><p><strong>Using where：</strong> 使用了where，但在where上有字段没有创建索引。也可以理解为如果数据从引擎层被返回到server层进行过滤，那么就是Using</p><p>where。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_emp <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token string">&#39;风清扬&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="'+M+`" alt="image-20230626222159536"></p><p><strong>Using filesort</strong>：在对查询结果中的记录进行排序时，是可以使用索引的，如下所示：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t1 <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+U+`" alt="image-20230626222247353"></p><p>如果排序操作无法使用到索引，只能在内存中（记录较少时）或者磁盘中（记录较多时）进行排序（filesort），如下所示：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t1 <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> content<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+x+`" alt="image-20230626222335114"></p><p><strong>Using index：</strong> <strong>使用了覆盖索引</strong>，表示直接访问索引就足够获取到所需要的数据，不需要通过索引回表</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code> <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> content1 <span class="token keyword">FROM</span> t4<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+f+`" alt="image-20230626222420658"></p><p><strong>Using index condition</strong>: 叫作Index Condition Pushdown Optimization （<strong>索引下推优化</strong>）</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- content1列上有索引idx_content1</span>
<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t4 <span class="token keyword">WHERE</span> content1 <span class="token operator">&gt;</span> <span class="token string">&#39;z&#39;</span> <span class="token operator">AND</span> content1 <span class="token operator">LIKE</span> <span class="token string">&#39;%a&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>1、<code>如果没有索引下推（ICP）</code>，那么MySQL在存储引擎层找到满足<code>content1 &gt; &#39;z&#39;</code>条件的第一条二级索引记录。<code>主键值进行回表</code>，返回完整</p><p>的记录给server层，server层再判断其他的搜索条件是否成立。如果成立则保留该记录，否则跳过该记录。</p><p>2、<code>如果使用了索引下推（ICP）</code>，那么MySQL在存储引擎层找到满足<code>content1 &gt; &#39;z&#39;</code>条件的第一条二级索引记录。<code>不着急执行回表</code>，而是在这</p><p>条记录上先判断一下所有关于<code>idx_content1</code>索引中包含的条件是否成立，也就是<code>content1 &gt; &#39;z&#39; AND content1 LIKE &#39;%a&#39;</code>是否成立。如果</p><p>这些条件不成立，则直接跳过该二级索引记录，去找下一条二级索引记录；如果这些条件成立，则执行回表操作，返回完整的记录给server层。</p></blockquote><p><img src="`+P+'" alt="image-20230626222533347"></p><p><strong>注意：</strong> 如果这里的查询条件<code>只有content1 &gt; &#39;z&#39;</code>，那么找到满足条件的索引后也会进行一次索引下推的操作，判断content1 &gt; &#39;z&#39;是否成立（这是源</p><p>码中为了编程方便做的冗余判断）</p><p><img src="'+F+'" alt="image-20230626222739299"></p>',135);function D(W,Y){return a(),e("div",null,[H,p(" 下面id值的含义：总共有3个大步骤，取值为1的大步骤中，包含3个小步骤；取值为2的大步骤中，包含两个小步骤；取值为3的大步骤中包含3个小步骤： - 1 a - 1 b - 1 c - 2 d - 2 e - 3 f - 3 g - 3 h "),Q])}const V=n(X,[["render",D],["__file","MySQL05-优化-Explain分析.html.vue"]]);export{V as default};
