import{_ as s,o as a,c as n,e}from"./app-8007fa1b.js";const l="/assets/image-20230620150530767-19b449f9.png",p="/assets/image-20230620151331923-a180a3b3.png",o="/assets/image-20230620152357108-c8859d60.png",r="/assets/image-20230620153835034-9ae2d746.png",t={},i=e(`<h1 id="一、日志分类" tabindex="-1"><a class="header-anchor" href="#一、日志分类" aria-hidden="true">#</a> 一、日志分类</h1><p>在任何一种数据库中，都会有各种各样的日志，记录着数据库工作的方方面面，以帮助数据库管理员追踪数据库曾经发生过的各种事件。<br> MySQL有多种类型的日志，用于记录数据库的操作和状态。以下是一些常见的MySQL日志：</p><ul><li>错误日志（Error Log）：记录MySQL服务器在启动、运行过程中发生的错误和异常情况，如启动错误、语法错误等。</li><li>查询日志（Query Log）：记录所有执行的SQL语句，包括SELECT、INSERT、UPDATE、DELETE等操作。可以用于分析查询性能和调试问题，但需要注意对于高负载的系统，开启查询日志可能会对性能产生影响。</li><li>慢查询日志（Slow Query Log）：记录执行时间超过指定<strong>阈值</strong>的查询语句。慢查询日志可以帮助你找出执行时间较长的查询，以便进行性能优化。</li><li>二进制日志（Binary Log）：记录所有对数据库的更改操作，包括数据修改、表结构变更等。二进制日志可以用于数据恢复、主从复制等场景。</li><li>事务日志（Transaction Log）：包括Redo Log和Undo Log，记录正在进行的事务的更改操作。事务日志用于保证数据库的ACID特性，并支持崩溃恢复。</li></ul><h1 id="二、错误日志" tabindex="-1"><a class="header-anchor" href="#二、错误日志" aria-hidden="true">#</a> 二、错误日志</h1><p>错误日志是 MySQL 中最重要的日志之一，它记录了当 mysqld 启动和停止时，以及服务器在运行过程中发生任何严重错误时的相关信息。<br> 当数据库出现任何故障导致无法正常使用时，可以首先查看此日志。</p><br><p>查看日志位置指令：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;log_error%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行结果如下所示：</p><p><img src="`+l+`" alt="image-20230620150530767"></p><p>log_error设置为stderr并且MySQL以守护进程（daemon）方式运行，<br> 那么错误日志将被重定向到系统日志文件（如/var/log/syslog）或其他操作系统特定的日志文件中，而不是直接输出到控制台。<br> 可以通过如下配置，设置错误日志的输出位置：<br></p><p>打开MySQL的配置文件my.cnf。该文件通常位于MySQL安装目录下的/etc或者/etc/mysql子目录中。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
log_error <span class="token operator">=</span> /var/lib/mysql/mysql-error.err
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>重启mysql进行测试。</p><br><p>查看日志内容 ：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>tail <span class="token operator">-</span>f <span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>docker<span class="token operator">/</span>volumes<span class="token operator">/</span>mysql8_data<span class="token operator">/</span>_data<span class="token operator">/</span>mysql<span class="token operator">-</span>error<span class="token punctuation">.</span>err
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+p+`" alt="image-20230620151331923"></p><br><h1 id="三、查询日志" tabindex="-1"><a class="header-anchor" href="#三、查询日志" aria-hidden="true">#</a> 三、查询日志</h1><p>查询日志中记录了客户端的所有操作语句【CRUD】，而二进制日志不包含查询数据的SQL语句。</p><p>默认情况下， 查询日志是未开启的。如果需要开启查询日志，可以设置以下配置 ：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 该选项用来开启查询日志 ， 可选值 ： 0 或者 1 ； 0 代表关闭， 1 代表开启 </span>
general_log <span class="token operator">=</span> <span class="token number">1</span>

<span class="token comment"># 设置日志的文件名 ， 如果没有指定， 默认的文件名为 host_name.log </span>
general_log_file<span class="token operator">=</span>file_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在mysql 的配置文件 /var/lib/mysql/my.cnf 中配置如下内容 ：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>general_log<span class="token operator">=</span><span class="token number">1</span>
general_log_file<span class="token operator">=</span>mysql_query<span class="token punctuation">.</span>log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>配置完毕之后，在数据库执行以下操作 ：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token punctuation">;</span>
<span class="token keyword">update</span> emp <span class="token keyword">set</span> age <span class="token operator">=</span> <span class="token number">20</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> emp<span class="token punctuation">(</span>name <span class="token punctuation">,</span> age <span class="token punctuation">,</span> deptId <span class="token punctuation">,</span> empno<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span> <span class="token punctuation">,</span><span class="token boolean">null</span> <span class="token punctuation">,</span> <span class="token number">100011</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token keyword">delete</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">11</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行完毕之后， 再次来查询日志文件 ：</p><p><img src="`+o+`" alt="image-20230620152357108"></p><br><p>开启查询日志注意事项：</p><p>1、开启查询日志会对MySQL的性能产生一定影响，特别是在高负载环境下。因此，在生产环境中建议谨慎使用，并根据需要进行开启和关闭。</p><p>2、查询日志可能会记录大量的查询语句，导致日志文件过大。可以通过定期清理或限制日志文件大小来处理这个问题。</p><p>3、查询日志可能会包含敏感信息（如密码），因此要确保只有授权的人员可以访问查询日志文件。</p><br><h1 id="四、慢查询日志" tabindex="-1"><a class="header-anchor" href="#四、慢查询日志" aria-hidden="true">#</a> 四、慢查询日志</h1><p>慢查询日志记录了所有执行时间超过参数 long_query_time 设置值，long_query_time 默认为 10 秒，最小为 0，精度可以到微秒。</p><h2 id="_1、日志参数配置" tabindex="-1"><a class="header-anchor" href="#_1、日志参数配置" aria-hidden="true">#</a> 1、日志参数配置</h2><p>默认情况下，MySQL数据库没有开启慢查询日志，需要我们手动来设置这个参数。<br> 当然，如果不是调优需要的话，一般不建议启动该参数，因为开启慢查询日志会或多或少带来一定的性能影响。<br> 还是在my.cnf中修改以下参数来控制慢查询日志：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 该参数用来控制慢查询日志是否开启， 可取值： 1 和 0 ， 1 代表开启， 0 代表关闭</span>
<span class="token assign-left variable">slow_query_log</span><span class="token operator">=</span><span class="token number">1</span> 

<span class="token comment"># 该参数用来指定慢查询日志的文件名</span>
<span class="token assign-left variable">slow_query_log_file</span><span class="token operator">=</span>slow_query.log

<span class="token comment"># 该选项用来配置查询的时间限制， 超过这个时间将认为值慢查询， 将需要进行日志记录， 默认10s</span>
<span class="token assign-left variable">long_query_time</span><span class="token operator">=</span><span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启mysql进行测试。</p><h2 id="_2、日志内容读取" tabindex="-1"><a class="header-anchor" href="#_2、日志内容读取" aria-hidden="true">#</a> 2、日志内容读取</h2><p>和错误日志、查询日志一样，慢查询日志记录的格式也是纯文本，可以被直接读取。</p><p>1、查询慢查询是否开启以及日志文件位置</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">&#39;%slow_query_log%&#39;</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、查询long_query_time 的值。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">&#39;%long_query_time%&#39;</span><span class="token punctuation">;</span> <span class="token comment">-- 查看值：默认10秒</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3、执行查询操作</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由于在查询的执行时间小于10s，因此该查询不会记录到慢查询日志中。模拟慢查询效果：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">and</span> sleep<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>   <span class="token comment">-- 使用SLEEP函数可以让查询暂停指定的时间</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看慢查询日志内容：</p><p><img src="`+r+'" alt="image-20230620153835034"></p>',53),c=[i];function d(u,m){return a(),n("div",null,c)}const v=s(t,[["render",d],["__file","MySQL09-日志-基础日志.html.vue"]]);export{v as default};
