import{_ as p,a as l,b as o}from"./1681443314432-8b085e00.js";import{_ as c,r as i,o as u,c as r,a as n,d as k,b as d,e as t}from"./app-8007fa1b.js";const v="/assets/1681544428055-b4a8882b.png",s="/assets/1681699577344-6b6c411a.png",m="/assets/1681547333799-441f907c.png",g="/assets/1681550398774-55f40d4a.png",b="/assets/1682299663047-2fe3da82.png",h="/assets/1682302307081-5fabea65.png",q="/assets/1682303205351-5126793d.png",S="/assets/1682321228643-2451b066.png",a="/assets/1682323740343-fdfe425c.png",w="/assets/1682322460011-de9ae5ec.png",x="/assets/1682326867396-eb8f5f17.png",y="/assets/1682325615922-6177a783.png",_="/assets/1682325817829-35bccee2.png",f="/assets/1682326229063-236ec791.png",E="/assets/1682385870660-180d9b8a.png",R="/assets/1682385997927-11e12e2a.png",H="/assets/1682386110151-0764f1a9.png",j="/assets/1682386298048-69483678.png",T="/assets/1682386374464-0f318d89.png",I="/assets/1682386551684-fab4378f.png",C="/assets/1682386611945-7efc7f5a.png",P="/assets/1682387258428-cfad0d5f.png",O="/assets/1682387349916-203435b6.png",A="/assets/1682387412704-41eb69d1.png",N="/assets/1682387836615-f2c2534b.png",D="/assets/1682387857587-9f0faa01.png",B="/assets/1682388026978-3742ea15.png",U="/assets/1682388204239-2bd6f9d9.png",W="/assets/1682388599014-c6200e10.png",M="/assets/1682389063225-67216249.png",F="/assets/1682389263627-3837c1e3.png",L="/assets/1682389317234-e7113ee7.png",z="/assets/1682390999417-958df5e7.png",G={},Y=t('<h1 id="第五章-servlet" tabindex="-1"><a class="header-anchor" href="#第五章-servlet" aria-hidden="true">#</a> 第五章 Servlet</h1><h1 id="一-servlet简介" tabindex="-1"><a class="header-anchor" href="#一-servlet简介" aria-hidden="true">#</a> 一 Servlet简介</h1><h2 id="_1-1-动态资源和静态资源" tabindex="-1"><a class="header-anchor" href="#_1-1-动态资源和静态资源" aria-hidden="true">#</a> 1.1 动态资源和静态资源</h2><blockquote><p>静态资源</p></blockquote><ul><li>无需在程序运行时通过代码运行生成的资源,在程序运行之前就写好的资源. 例如:html css js img ,音频文件和视频文件</li></ul><blockquote><p>动态资源</p></blockquote><ul><li>需要在程序运行时通过代码运行生成的资源,在程序运行之前无法确定的数据,运行时动态生成,例如Servlet,Thymeleaf ... ...</li><li>动态资源指的不是视图上的动画效果或者是简单的人机交互效果</li></ul><h2 id="_1-2-servlet简介" tabindex="-1"><a class="header-anchor" href="#_1-2-servlet简介" aria-hidden="true">#</a> 1.2 Servlet简介</h2><blockquote><p>Servlet (server applet) 是运行在服务端(tomcat)的Java小程序，是sun公司提供一套定义动态资源规范; 从代码层面上来讲Servlet就是一个接口</p></blockquote><ul><li>用来接收、处理客户端请求、响应给浏览器的动态资源。在整个Web应用中，Servlet主要负责接收处理请求、协同调度功能以及响应数据。我们可以把Servlet称为Web应用中的<strong>控制器</strong></li></ul><img src="'+v+'" alt="1681544428055" style="zoom:50%;"><ul><li>不是所有的JAVA类都能用于处理客户端请求,能处理客户端请求并做出响应的一套技术标准就是Servlet</li><li>Servlet是运行在服务端的,所以 Servlet必须在WEB项目中开发且在Tomcat这样的服务容器中运行</li></ul><blockquote><p>请求响应与HttpServletRequest和HttpServletResponse之间的对应关系</p></blockquote><p><img src="'+s+`" alt="1681699577344"></p><h1 id="二-servlet开发流程" tabindex="-1"><a class="header-anchor" href="#二-servlet开发流程" aria-hidden="true">#</a> 二 Servlet开发流程</h1><h2 id="_2-1-目标" tabindex="-1"><a class="header-anchor" href="#_2-1-目标" aria-hidden="true">#</a> 2.1 目标</h2><blockquote><p>通过客户端向一个Servlet发送请求,携带username,如果用户名是&#39;atguigu&#39;,则向客户端响应 NO,如果是其他,响应YES</p></blockquote><h2 id="_2-2-开发过程" tabindex="-1"><a class="header-anchor" href="#_2-2-开发过程" aria-hidden="true">#</a> 2.2 开发过程</h2><blockquote><p>步骤1 开发一个web类型的module</p></blockquote><ul><li>过程参照之前</li></ul><blockquote><p>步骤2 开发一个UserServlet</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServlet</span>  <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取请求中的参数</span>
        <span class="token class-name">String</span> username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;atguigu&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//通过响应对象响应信息</span>
            resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;NO&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;YES&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>自定义一个类,要继承HttpServlet类</li><li>重写service方法,该方法主要就是用于处理用户请求的服务方法</li><li>HttpServletRequest 代表请求对象,是有请求报文经过tomcat转换而来的,通过该对象可以获取请求中的信息</li><li>HttpServletResponse 代表响应对象,该对象会被tomcat转换为响应的报文,通过该对象可以设置响应中的信息</li><li>Servlet对象的生命周期(创建,初始化,处理服务,销毁)是由tomcat管理的,无需我们自己new</li><li>HttpServletRequest HttpServletResponse 两个对象也是有tomcat负责转换,在调用service方法时传入给我们用的</li></ul><blockquote><p>步骤3 为UseServlet配置请求的映射路径</p></blockquote><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://jakarta.ee/xml/ns/jakartaee<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>5.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--给UserServlet起一个别名--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>userServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.atguigu.servlet.UserServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>


    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--关联别名和映射路径--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>userServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--可以为一个Servlet匹配多个不同的映射路径,但是不同的Servlet不能使用相同的url-pattern--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/userServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
       <span class="token comment">&lt;!-- &lt;url-pattern&gt;/userServlet2&lt;/url-pattern&gt;--&gt;</span>
        <span class="token comment">&lt;!--
            /        表示通配所有资源,不包括jsp文件
            /*       表示通配所有资源,包括jsp文件
            /a/*     匹配所有以a前缀的映射路径
            *.action 匹配所有以action为后缀的映射路径
        --&gt;</span>
       <span class="token comment">&lt;!-- &lt;url-pattern&gt;/*&lt;/url-pattern&gt;--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Servlet并不是文件系统中实际存在的文件或者目录,所以为了能够请求到该资源,我们需要为其配置映射路径</li><li>servlet的请求映射路径配置在web.xml中</li><li>servlet-name作为servlet的别名,可以自己随意定义,见名知意就好</li><li>url-pattern标签用于定义Servlet的请求映射路径</li><li>一个servlet可以对应多个不同的url-pattern</li><li>多个servlet不能使用相同的url-pattern</li><li>url-pattern中可以使用一些通配写法 <ul><li>/ 表示通配所有资源,不包括jsp文件</li><li>/* 表示通配所有资源,包括jsp文件</li><li>/a/* 匹配所有以a前缀的映射路径</li><li>*.action 匹配所有以action为后缀的映射路径</li></ul></li></ul><blockquote><p>步骤4 开发一个form表单,向servlet发送一个get请求并携带username参数</p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userServlet<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        请输入用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>校验<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>启动项目,访问index.html ,提交表单测试</p></blockquote><ul><li>使用debug模式运行测试</li></ul><img src="`+m+'" alt="1681547333799"><blockquote><p>映射关系图</p></blockquote><p><img src="'+g+'" alt="1681550398774"></p><h1 id="三-servlet注解方式配置" tabindex="-1"><a class="header-anchor" href="#三-servlet注解方式配置" aria-hidden="true">#</a> 三 Servlet注解方式配置</h1><h2 id="_3-1-webservlet注解源码" tabindex="-1"><a class="header-anchor" href="#_3-1-webservlet注解源码" aria-hidden="true">#</a> 3.1 @WebServlet注解源码</h2><blockquote><p>官方JAVAEEAPI文档下载地址</p></blockquote>',36),K={href:"https://www.oracle.com/java/technologies/javaee/javaeetechnologies.html#javaee8",target:"_blank",rel:"noopener noreferrer"},V=n("li",null,[n("p",null,"@WebServlet注解的源码阅读")],-1),J=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>

<span class="token keyword">package</span> <span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Documented</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@since</span> Servlet 3.0
 */</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">WebServlet</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * The name of the servlet
     * 相当于 servlet-name
     * <span class="token keyword">@return</span> the name of the servlet
     */</span>
    <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * The URL patterns of the servlet
     * 如果只配置一个url-pattern ,则通过该属性即可,和urlPatterns属性互斥
     * <span class="token keyword">@return</span> the URL patterns of the servlet
     */</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * The URL patterns of the servlet
     * 如果要配置多个url-pattern ,需要通过该属性,和value属性互斥
     * <span class="token keyword">@return</span> the URL patterns of the servlet
     */</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">urlPatterns</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * The load-on-startup order of the servlet
     * 配置Servlet是否在项目加载时实例化
     * <span class="token keyword">@return</span> the load-on-startup order of the servlet
     */</span>
    <span class="token keyword">int</span> <span class="token function">loadOnStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * The init parameters of the servlet
     * 配置初始化参数
     * <span class="token keyword">@return</span> the init parameters of the servlet
     */</span>
    <span class="token class-name">WebInitParam</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">initParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Declares whether the servlet supports asynchronous operation mode.
     *
     * <span class="token keyword">@return</span> <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if the servlet supports asynchronous operation mode
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletRequest</span><span class="token punctuation">#</span><span class="token field">startAsync</span></span>
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletRequest</span><span class="token punctuation">#</span><span class="token function">startAsync</span><span class="token punctuation">(</span> <span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletRequest</span><span class="token punctuation">,</span><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletResponse</span><span class="token punctuation">)</span></span>
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">asyncSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * The small-icon of the servlet
     *
     * <span class="token keyword">@return</span> the small-icon of the servlet
     */</span>
    <span class="token class-name">String</span> <span class="token function">smallIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * The large-icon of the servlet
     *
     * <span class="token keyword">@return</span> the large-icon of the servlet
     */</span>
    <span class="token class-name">String</span> <span class="token function">largeIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * The description of the servlet
     *
     * <span class="token keyword">@return</span> the description of the servlet
     */</span>
    <span class="token class-name">String</span> <span class="token function">description</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * The display name of the servlet
     *
     * <span class="token keyword">@return</span> the display name of the servlet
     */</span>
    <span class="token class-name">String</span> <span class="token function">displayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-2-webservlet注解使用" tabindex="-1"><a class="header-anchor" href="#_3-2-webservlet注解使用" aria-hidden="true">#</a> 3.2 @WebServlet注解使用</h2><blockquote><p>使用@WebServlet注解替换Servlet配置</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>
        name <span class="token operator">=</span> <span class="token string">&quot;userServlet&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">//value = &quot;/user&quot;,</span>
        urlPatterns <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;/userServlet1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/userServlet2&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/userServlet&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        initParams <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@WebInitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;encoding&quot;</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        loadOnStartup <span class="token operator">=</span> <span class="token number">6</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServlet</span>  <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> encoding <span class="token operator">=</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">&quot;encoding&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取请求中的参数</span>
        <span class="token class-name">String</span> username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;atguigu&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//通过响应对象响应信息</span>
            resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;NO&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;YES&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="四-servlet继承结构" tabindex="-1"><a class="header-anchor" href="#四-servlet继承结构" aria-hidden="true">#</a> 四 Servlet继承结构</h1><h2 id="_4-1-servlet-接口" tabindex="-1"><a class="header-anchor" href="#_4-1-servlet-接口" aria-hidden="true">#</a> 4.1 Servlet 接口</h2><blockquote><p>源码及功能解释</p></blockquote><ul><li>通过idea查看: 此处略</li></ul><blockquote><p>接口及方法说明</p></blockquote><ul><li>Servlet 规范接口,所有的Servlet必须实现 <ul><li>public void init(ServletConfig config) throws ServletException; <ul><li>初始化方法,容器在构造servlet对象后,自动调用的方法,容器负责实例化一个ServletConfig对象,并在调用该方法时传入</li><li>ServletConfig对象可以为Servlet 提供初始化参数</li></ul></li><li>public ServletConfig getServletConfig(); <ul><li>获取ServletConfig对象的方法,后续可以通过该对象获取Servlet初始化参数</li></ul></li><li>public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException; <ul><li>处理请求并做出响应的服务方法,每次请求产生时由容器调用</li><li>容器创建一个ServletRequest对象和ServletResponse对象,容器在调用service方法时,传入这两个对象</li></ul></li><li>public String getServletInfo(); <ul><li>获取ServletInfo信息的方法</li></ul></li><li>public void destroy(); <ul><li>Servlet实例在销毁之前调用的方法</li></ul></li></ul></li></ul><h2 id="_4-2-genericservlet-抽象类" tabindex="-1"><a class="header-anchor" href="#_4-2-genericservlet-抽象类" aria-hidden="true">#</a> 4.2 GenericServlet 抽象类</h2><blockquote><p>源码</p></blockquote><ul><li>通过idea查看: 此处略</li></ul><blockquote><p>源码解释</p></blockquote><ul><li>GenericServlet 抽象类是对Servlet接口一些固定功能的粗糙实现,以及对service方法的再次抽象声明,并定义了一些其他相关功能方法 <ul><li>private transient ServletConfig config; <ul><li>初始化配置对象作为属性</li></ul></li><li>public GenericServlet() { } <ul><li>构造器,为了满足继承而准备</li></ul></li><li>public void destroy() { } <ul><li>销毁方法的平庸实现</li></ul></li><li>public String getInitParameter(String name) <ul><li>获取初始参数的快捷方法</li></ul></li><li>public Enumeration&lt;String&gt; getInitParameterNames() <ul><li>返回所有初始化参数名的方法</li></ul></li><li>public ServletConfig getServletConfig() <ul><li>获取初始Servlet初始配置对象ServletConfig的方法</li></ul></li><li>public ServletContext getServletContext() <ul><li>获取上下文对象ServletContext的方法</li></ul></li><li>public String getServletInfo() <ul><li>获取Servlet信息的平庸实现</li></ul></li><li>public void init(ServletConfig config) throws ServletException() <ul><li>初始化方法的实现,并在此调用了init的重载方法</li></ul></li><li>public void init() throws ServletException <ul><li>重载init方法,为了让我们自己定义初始化功能的方法</li></ul></li><li>public void log(String msg)</li><li>public void log(String message, Throwable t) <ul><li>打印日志的方法及重载</li></ul></li><li>public abstract void service(ServletRequest req, ServletResponse res) throws ServletException, IOException; <ul><li>服务方法再次声明</li></ul></li><li>public String getServletName() <ul><li>获取ServletName的方法</li></ul></li></ul></li></ul><h2 id="_4-3-httpservlet-抽象类" tabindex="-1"><a class="header-anchor" href="#_4-3-httpservlet-抽象类" aria-hidden="true">#</a> 4.3 HttpServlet 抽象类</h2><blockquote><p>源码</p></blockquote><ul><li>通过idea查看: 此处略</li></ul><blockquote><p>解释</p></blockquote><ul><li>abstract class HttpServlet extends GenericServlet HttpServlet抽象类,除了基本的实现以外,增加了更多的基础功能 <ul><li>private static final String METHOD_DELETE = &quot;DELETE&quot;;</li><li>private static final String METHOD_HEAD = &quot;HEAD&quot;;</li><li>private static final String METHOD_GET = &quot;GET&quot;;</li><li>private static final String METHOD_OPTIONS = &quot;OPTIONS&quot;;</li><li>private static final String METHOD_POST = &quot;POST&quot;;</li><li>private static final String METHOD_PUT = &quot;PUT&quot;;</li><li>private static final String METHOD_TRACE = &quot;TRACE&quot;; <ul><li>上述属性用于定义常见请求方式名常量值</li></ul></li><li>public HttpServlet() {} <ul><li>构造器,用于处理继承</li></ul></li><li>public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException <ul><li>对服务方法的实现</li><li>在该方法中,将请求和响应对象转换成对应HTTP协议的HttpServletRequest HttpServletResponse对象</li><li>调用重载的service方法</li></ul></li><li>public void service(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException <ul><li>重载的service方法,被重写的service方法所调用</li><li>在该方法中,通过请求方式判断,调用具体的do***方法完成请求的处理</li></ul></li><li>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException</li><li>protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException</li><li>protected void doHead(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException</li><li>protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException</li><li>protected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException</li><li>protected void doOptions(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException</li><li>protected void doTrace(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException <ul><li>对应不同请求方式的处理方法</li><li>除了doOptions和doTrace方法,其他的do*** 方法都在故意响应错误信息</li></ul></li></ul></li></ul><h2 id="_4-4-自定义servlet" tabindex="-1"><a class="header-anchor" href="#_4-4-自定义servlet" aria-hidden="true">#</a> 4.4 自定义Servlet</h2><blockquote><p>继承关系图解</p></blockquote><p><img src="`+b+`" alt="1682299663047"></p><ul><li>自定义Servlet中,必须要对处理请求的方法进行重写 <ul><li>要么重写service方法</li><li>要么重写doGet/doPost方法</li></ul></li></ul><h1 id="五-servlet生命周期" tabindex="-1"><a class="header-anchor" href="#五-servlet生命周期" aria-hidden="true">#</a> 五 Servlet生命周期</h1><h2 id="_5-1-生命周期简介" tabindex="-1"><a class="header-anchor" href="#_5-1-生命周期简介" aria-hidden="true">#</a> 5.1 生命周期简介</h2><blockquote><p>什么是Servlet的生命周期</p></blockquote><ul><li>应用程序中的对象不仅在空间上有层次结构的关系，在时间上也会因为处于程序运行过程中的不同阶段而表现出不同状态和不同行为——这就是对象的生命周期。</li><li>简单的叙述生命周期，就是对象在容器中从开始创建到销毁的过程。</li></ul><blockquote><p>Servlet容器</p></blockquote><ul><li>Servlet对象是Servlet容器创建的，生命周期方法都是由容器(目前我们使用的是Tomcat)调用的。这一点和我们之前所编写的代码有很大不同。在今后的学习中我们会看到，越来越多的对象交给容器或框架来创建，越来越多的方法由容器或框架来调用，开发人员要尽可能多的将精力放在业务逻辑的实现上。</li></ul><blockquote><p>Servlet主要的生命周期执行特点</p></blockquote><table><thead><tr><th>生命周期</th><th>对应方法</th><th>执行时机</th><th>执行次数</th></tr></thead><tbody><tr><td>构造对象</td><td>构造器</td><td>第一次请求或者容器启动</td><td>1</td></tr><tr><td>初始化</td><td>init()</td><td>构造完毕后</td><td>1</td></tr><tr><td>处理服务</td><td>service(HttpServletRequest req,HttpServletResponse resp)</td><td>每次请求</td><td>多次</td></tr><tr><td>销毁</td><td>destory()</td><td>容器关闭</td><td>1</td></tr></tbody></table><h2 id="_5-2-生命周期测试" tabindex="-1"><a class="header-anchor" href="#_5-2-生命周期测试" aria-hidden="true">#</a> 5.2 生命周期测试</h2><blockquote><p>开发servlet代码</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>servlet</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletLifeCycle</span>  <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ServletLifeCycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;构造器&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;初始化方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;service方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;销毁方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>配置Servlet</p></blockquote><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>servletLifeCycle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.atguigu.servlet.ServletLifeCycle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--load-on-startup
            如果配置的是正整数则表示容器在启动时就要实例化Servlet,
            数字表示的是实例化的顺序
        --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>servletLifeCycle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/servletLiftCycle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>请求Servlet测试</li></ul><p>略</p><h2 id="_5-3-生命周期总结" tabindex="-1"><a class="header-anchor" href="#_5-3-生命周期总结" aria-hidden="true">#</a> 5.3 生命周期总结</h2><ol><li>通过生命周期测试我们发现Servlet对象在容器中是单例的</li><li>容器是可以处理并发的用户请求的,每个请求在容器中都会开启一个线程</li><li>多个线程可能会使用相同的Servlet对象,所以在Servlet中,我们不要轻易定义一些容易经常发生修改的成员变量</li><li>load-on-startup中定义的正整数表示实例化顺序,如果数字重复了,容器会自行解决实例化顺序问题,但是应该避免重复</li><li>Tomcat容器中,已经定义了一些随系统启动实例化的servlet,我们自定义的servlet的load-on-startup尽量不要占用数字1-5</li></ol><h1 id="六-servletconfig和servletcontext" tabindex="-1"><a class="header-anchor" href="#六-servletconfig和servletcontext" aria-hidden="true">#</a> 六 ServletConfig和ServletContext</h1><h2 id="_6-1-servletconfig的使用" tabindex="-1"><a class="header-anchor" href="#_6-1-servletconfig的使用" aria-hidden="true">#</a> 6.1 ServletConfig的使用</h2><blockquote><p>ServletConfig是什么</p></blockquote><ul><li>为Servlet提供初始配置参数的一种对象,每个Servlet都有自己独立唯一的ServletConfig对象</li><li>容器会为每个Servlet实例化一个ServletConfig对象,并通过Servlet生命周期的init方法传入给Servlet作为属性</li></ul><img src="`+h+`" alt="1682302307081"><blockquote><p>ServletConfig是一个接口,定义了如下API</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">jakarta<span class="token punctuation">.</span>servlet</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Enumeration</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ServletConfig</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ServletContext</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> <span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token class-name">String</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getInitParameterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>getServletName()</td><td>获取&lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;定义的Servlet名称</td></tr><tr><td>getServletContext()</td><td>获取ServletContext对象</td></tr><tr><td>getInitParameter()</td><td>获取配置Servlet时设置的『初始化参数』，根据名字获取值</td></tr><tr><td>getInitParameterNames()</td><td>获取所有初始化参数名组成的Enumeration对象</td></tr></tbody></table><blockquote><p>ServletConfig怎么用,测试代码如下</p></blockquote><ul><li>定义Servlet</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletA</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ServletConfig</span> servletConfig <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 根据参数名获取单个参数</span>
        <span class="token class-name">String</span> value <span class="token operator">=</span> servletConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">&quot;param1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;param1:&quot;</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取所有参数名</span>
        <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> parameterNames <span class="token operator">=</span> servletConfig<span class="token punctuation">.</span><span class="token function">getInitParameterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 迭代并获取参数名</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>parameterNames<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> paramaterName <span class="token operator">=</span> parameterNames<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>paramaterName<span class="token operator">+</span><span class="token string">&quot;:&quot;</span><span class="token operator">+</span>servletConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span>paramaterName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>



<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletB</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ServletConfig</span> servletConfig <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 根据参数名获取单个参数</span>
        <span class="token class-name">String</span> value <span class="token operator">=</span> servletConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">&quot;param1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;param1:&quot;</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取所有参数名</span>
        <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> parameterNames <span class="token operator">=</span> servletConfig<span class="token punctuation">.</span><span class="token function">getInitParameterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 迭代并获取参数名</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>parameterNames<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> paramaterName <span class="token operator">=</span> parameterNames<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>paramaterName<span class="token operator">+</span><span class="token string">&quot;:&quot;</span><span class="token operator">+</span>servletConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span>paramaterName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>配置Servlet</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>ServletA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.atguigu.servlet.ServletA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>
       <span class="token comment">&lt;!--配置ServletA的初始参数--&gt;</span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>param1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>value1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>param2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>value2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>ServletB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.atguigu.servlet.ServletB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--配置ServletB的初始参数--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>param3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>value3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>param4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>value4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>ServletA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/servletA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>ServletB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/servletB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>请求Servlet测试</li></ul><p>略</p><h2 id="_6-2-servletcontext的使用" tabindex="-1"><a class="header-anchor" href="#_6-2-servletcontext的使用" aria-hidden="true">#</a> 6.2 ServletContext的使用</h2><blockquote><p>ServletContext是什么</p></blockquote><ul><li>ServletContext对象有称呼为上下文对象,或者叫应用域对象(后面统一讲解域对象)</li><li>容器会为每个app创建一个独立的唯一的ServletContext对象</li><li>ServletContext对象为所有的Servlet所共享</li><li>ServletContext可以为所有的Servlet提供初始配置参数</li></ul><p><img src="`+q+`" alt="1682303205351"></p><blockquote><p>ServletContext怎么用</p></blockquote><ul><li>配置ServletContext参数</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://jakarta.ee/xml/ns/jakartaee<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>5.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>paramA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>valueA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>paramB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>valueB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在Servlet中获取ServletContext并获取参数</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>servlet</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletConfig</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Enumeration</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletA</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
       
        <span class="token comment">// 从ServletContext中获取为所有的Servlet准备的参数</span>
        <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> valueA <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">&quot;paramA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;paramA:&quot;</span><span class="token operator">+</span>valueA<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取所有参数名</span>
        <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> initParameterNames <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getInitParameterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 迭代并获取参数名</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>initParameterNames<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> paramaterName <span class="token operator">=</span> initParameterNames<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>paramaterName<span class="token operator">+</span><span class="token string">&quot;:&quot;</span><span class="token operator">+</span>servletContext<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span>paramaterName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-3-servletcontext其他重要api" tabindex="-1"><a class="header-anchor" href="#_6-3-servletcontext其他重要api" aria-hidden="true">#</a> 6.3 ServletContext其他重要API</h2><blockquote><p>获取资源的真实路径</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> realPath <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">&quot;资源在web目录中的路径&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>例如我们的目标是需要获取项目中某个静态资源的路径，不是工程目录中的路径，而是<strong>部署目录中的路径</strong>；我们如果直接拷贝其在我们电脑中的完整路径的话其实是有问题的，因为如果该项目以后部署到公司服务器上的话，路径肯定是会发生改变的，所以我们需要使用代码动态获取资源的真实路径. 只要使用了servletContext动态获取资源的真实路径，<strong>那么无论项目的部署路径发生什么变化，都会动态获取项目运行时候的实际路径</strong>，所以就不会发生由于写死真实路径而导致项目部署位置改变引发的路径错误问题</li></ul><blockquote><p>获取项目的上下文路径</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> contextPath <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>项目的部署名称,也叫项目的上下文路径,在部署进入tomcat时所使用的路径,该路径是可能发生变化的,通过该API动态获取项目真实的上下文路径,可以<strong>帮助我们解决一些后端页面渲染技术或者请求转发和响应重定向中的路径问题</strong></li></ul><blockquote><p>域对象的相关API</p></blockquote><ul><li>域对象: 一些用于存储数据和传递数据的对象,传递数据不同的范围,我们称之为不同的域,不同的域对象代表不同的域,共享数据的范围也不同</li><li>ServletContext代表应用,所以ServletContext域也叫作应用域,是webapp中最大的域,可以在本应用内实现数据的共享和传递</li><li>webapp中的三大域对象,分别是应用域,会话域,请求域</li><li><code>后续我们会将三大域对象统一进行讲解和演示</code>,三大域对象都具有的API如下</li></ul><table><thead><tr><th>API</th><th>功能解释</th></tr></thead><tbody><tr><td>void setAttribute(String key,Object value);</td><td>向域中存储/修改数据</td></tr><tr><td>Object getAttribute(String key);</td><td>获得域中的数据</td></tr><tr><td>void removeAttribute(String key);</td><td>移除域中的数据</td></tr></tbody></table><h1 id="七-httpservletrequest" tabindex="-1"><a class="header-anchor" href="#七-httpservletrequest" aria-hidden="true">#</a> 七 HttpServletRequest</h1><h2 id="_7-1-httpservletrequest简介" tabindex="-1"><a class="header-anchor" href="#_7-1-httpservletrequest简介" aria-hidden="true">#</a> 7.1 HttpServletRequest简介</h2><blockquote><p>HttpServletRequest是什么</p></blockquote><ul><li>HttpServletRequest是一个接口,其父接口是ServletRequest</li><li>HttpServletRequest是Tomcat将请求报文转换封装而来的对象,在Tomcat调用service方法时传入</li><li>HttpServletRequest代表客户端发来的请求,所有请求中的信息都可以通过该对象获得</li></ul><p><img src="`+s+'" alt="1681699577344"></p><h2 id="_7-2-httpservletrequest常见api" tabindex="-1"><a class="header-anchor" href="#_7-2-httpservletrequest常见api" aria-hidden="true">#</a> 7.2 HttpServletRequest常见API</h2><blockquote><p>HttpServletRequest怎么用</p></blockquote><ul><li>获取请求行信息相关(方式,请求的url,协议及版本)</li></ul><table><thead><tr><th>API</th><th>功能解释</th></tr></thead><tbody><tr><td>StringBuffer getRequestURL();</td><td>获取客户端请求的url</td></tr><tr><td>String getRequestURI();</td><td>获取客户端请求项目中的具体资源</td></tr><tr><td>int getServerPort();</td><td>获取客户端发送请求时的端口</td></tr><tr><td>int getLocalPort();</td><td>获取本应用在所在容器的端口</td></tr><tr><td>int getRemotePort();</td><td>获取客户端程序的端口</td></tr><tr><td>String getScheme();</td><td>获取请求协议</td></tr><tr><td>String getProtocol();</td><td>获取请求协议及版本号</td></tr><tr><td>String getMethod();</td><td>获取请求方式</td></tr></tbody></table><ul><li><p>获得请求头信息相关 | API | 功能解释 | | --------------------------------------- | ---------------------- | | String getHeader(String headerName); | 根据头名称获取请求头 | | Enumeration&lt;String&gt; getHeaderNames(); | 获取所有的请求头名字 | | String getContentType(); | 获取content-type请求头 |</p></li><li><p>获得请求参数相关 | API | 功能解释 | | ------------------------------------------------------- | ------------------------------------ | | String getParameter(String parameterName); | 根据请求参数名获取请求单个参数值 | | String[] getParameterValues(String parameterName); | 根据请求参数名获取请求多个参数值数组 | | Enumeration&lt;String&gt; getParameterNames(); | 获取所有请求参数名 | | Map&lt;String, String[]&gt; getParameterMap(); | 获取所有请求参数的键值对集合 | | BufferedReader getReader() throws IOException; | 获取读取请求体的字符输入流 | | ServletInputStream getInputStream() throws IOException; | 获取读取请求体的字节输入流 | | int getContentLength(); | 获得请求体长度的字节数 |</p></li><li><p>其他API | API | 功能解释 | | -------------------------------------------- | --------------------------- | | String getServletPath(); | 获取请求的Servlet的映射路径 | | ServletContext getServletContext(); | 获取ServletContext对象 | | Cookie[] getCookies(); | 获取请求中的所有cookie | | HttpSession getSession(); | 获取Session对象 | | void setCharacterEncoding(String encoding) ; | 设置请求体字符集 |</p></li></ul><h1 id="八-httpservletresponse" tabindex="-1"><a class="header-anchor" href="#八-httpservletresponse" aria-hidden="true">#</a> 八 HttpServletResponse</h1><h2 id="_8-1-httpservletresponse简介" tabindex="-1"><a class="header-anchor" href="#_8-1-httpservletresponse简介" aria-hidden="true">#</a> 8.1 HttpServletResponse简介</h2><blockquote><p>HttpServletResponse是什么</p></blockquote><ul><li>HttpServletResponse是一个接口,其父接口是ServletResponse</li><li>HttpServletResponse是Tomcat预先创建的,在Tomcat调用service方法时传入</li><li>HttpServletResponse代表对客户端的响应,该对象会被转换成响应的报文发送给客户端,通过该对象我们可以设置响应信息</li></ul><p><img src="'+s+'" alt="1681699577344"></p><h2 id="_8-2-httpservletresponse的常见api" tabindex="-1"><a class="header-anchor" href="#_8-2-httpservletresponse的常见api" aria-hidden="true">#</a> 8.2 HttpServletResponse的常见API</h2><blockquote><p>HttpServletRequest怎么用</p></blockquote><ul><li>设置响应行相关</li></ul><table><thead><tr><th>API</th><th>功能解释</th></tr></thead><tbody><tr><td>void setStatus(int code);</td><td>设置响应状态码</td></tr></tbody></table><ul><li>设置响应头相关</li></ul><table><thead><tr><th>API</th><th>功能解释</th></tr></thead><tbody><tr><td>void setHeader(String headerName, String headerValue);</td><td>设置/修改响应头键值对</td></tr><tr><td>void setContentType(String contentType);</td><td>设置content-type响应头及响应字符集(设置MIME类型)</td></tr></tbody></table><ul><li>设置响应体相关</li></ul><table><thead><tr><th>API</th><th>功能解释</th></tr></thead><tbody><tr><td>PrintWriter getWriter() throws IOException;</td><td>获得向响应体放入信息的字符输出流</td></tr><tr><td>ServletOutputStream getOutputStream() throws IOException;</td><td>获得向响应体放入信息的字节输出流</td></tr><tr><td>void setContentLength(int length);</td><td>设置响应体的字节长度,其实就是在设置content-length响应头</td></tr></tbody></table><ul><li>其他API</li></ul><table><thead><tr><th>API</th><th>功能解释</th></tr></thead><tbody><tr><td>void sendError(int code, String message) throws IOException;</td><td>向客户端响应错误信息的方法,需要指定响应码和响应信息</td></tr><tr><td>void addCookie(Cookie cookie);</td><td>向响应体中增加cookie</td></tr><tr><td>void setCharacterEncoding(String encoding);</td><td>设置响应体字符集</td></tr></tbody></table><blockquote><p>MIME类型</p></blockquote><ul><li>MIME类型,可以理解为文档类型,用户表示传递的数据是属于什么类型的文档</li><li>浏览器可以根据MIME类型决定该用什么样的方式解析接收到的响应体数据</li><li>可以这样理解: 前后端交互数据时,告诉对方发给对方的是 html/css/js/图片/声音/视频/... ...</li><li>tomcat/conf/web.xml中配置了常见文件的拓展名和MIMIE类型的对应关系</li><li>常见的MIME类型举例如下</li></ul><table><thead><tr><th>文件拓展名</th><th>MIME类型</th></tr></thead><tbody><tr><td>.html</td><td>text/html</td></tr><tr><td>.css</td><td>text/css</td></tr><tr><td>.js</td><td>application/javascript</td></tr><tr><td>.png /.jpeg/.jpg/... ...</td><td>image/jpeg</td></tr><tr><td>.mp3/.mpe/.mpeg/ ... ...</td><td>audio/mpeg</td></tr><tr><td>.mp4</td><td>video/mp4</td></tr><tr><td>.m1v/.m1v/.m2v/.mpe/... ...</td><td>video/mpeg</td></tr></tbody></table><h1 id="九-请求转发和响应重定向" tabindex="-1"><a class="header-anchor" href="#九-请求转发和响应重定向" aria-hidden="true">#</a> 九 请求转发和响应重定向</h1><h2 id="_9-1-概述" tabindex="-1"><a class="header-anchor" href="#_9-1-概述" aria-hidden="true">#</a> 9.1 概述</h2><blockquote><p>什么是请求转发和响应重定向</p></blockquote><ul><li><p>请求转发和响应重定向是web应用中间接访问项目资源的两种手段,也是Servlet控制页面跳转的两种手段</p></li><li><p>请求转发通过HttpServletRequest实现,响应重定向通过HttpServletResponse实现</p></li><li><p>请求转发生活举例: 张三找李四借钱,李四没有,李四找王五,让王五借给张三</p></li><li><p>响应重定向生活举例:张三找李四借钱,李四没有,李四让张三去找王五,张三自己再去找王五借钱</p></li></ul><h2 id="_9-2-请求转发" tabindex="-1"><a class="header-anchor" href="#_9-2-请求转发" aria-hidden="true">#</a> 9.2 请求转发</h2><blockquote><p>请求转发运行逻辑图</p></blockquote><p><img src="'+S+'" alt="1682321228643"></p><blockquote><p>请求转发特点(背诵)</p></blockquote><ul><li>请求转发通过HttpServletRequest对象获取请求转发器实现</li><li>请求转发是服务器内部的行为,对客户端是屏蔽的</li><li>客户端只发送了一次请求,客户端地址栏不变</li><li>服务端只产生了一对请求和响应对象,这一对请求和响应对象会继续传递给下一个资源</li><li>因为全程只有一个HttpServletRequset对象,所以请求参数可以传递,请求域中的数据也可以传递</li><li>请求转发可以转发给其他Servlet动态资源,也可以转发给一些静态资源以实现页面跳转</li><li>请求转发可以转发给WEB-INF下受保护的资源</li><li>请求转发不能转发到本项目以外的外部资源</li></ul><blockquote><p>请求转发测试代码</p></blockquote><p><img src="'+a+`" alt="1682323740343"></p><ul><li>ServletA</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/servletA&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletA</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//  获取请求转发器</span>
        <span class="token comment">//  转发给servlet  ok</span>
        <span class="token class-name">RequestDispatcher</span>  requestDispatcher <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;servletB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//  转发给一个视图资源 ok</span>
        <span class="token comment">//RequestDispatcher requestDispatcher = req.getRequestDispatcher(&quot;welcome.html&quot;);</span>
        <span class="token comment">//  转发给WEB-INF下的资源  ok</span>
        <span class="token comment">//RequestDispatcher requestDispatcher = req.getRequestDispatcher(&quot;WEB-INF/views/view1.html&quot;);</span>
        <span class="token comment">//  转发给外部资源   no</span>
        <span class="token comment">//RequestDispatcher requestDispatcher = req.getRequestDispatcher(&quot;http://www.atguigu.com&quot;);</span>
        <span class="token comment">//  获取请求参数</span>
        <span class="token class-name">String</span> username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//  向请求域中添加数据</span>
        req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;reqKey&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;requestMessage&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//  做出转发动作</span>
        requestDispatcher<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>ServletB</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/servletB&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletB</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取请求参数</span>
        <span class="token class-name">String</span> username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取请求域中的数据</span>
        <span class="token class-name">String</span> reqMessage <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;reqKey&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reqMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 做出响应</span>
        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;servletB response&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>打开浏览器,输入以下url测试</li></ul><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//localhost:8080/web03_war_exploded/servletA?username=atguigu</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_9-3-响应重定向" tabindex="-1"><a class="header-anchor" href="#_9-3-响应重定向" aria-hidden="true">#</a> 9.3 响应重定向</h2><blockquote><p>响应重定向运行逻辑图</p></blockquote><p><img src="`+w+'" alt="1682322460011"></p><blockquote><p>响应重定向特点(背诵)</p></blockquote><ul><li>响应重定向通过HttpServletResponse对象的sendRedirect方法实现</li><li>响应重定向是服务端通过302响应码和路径,告诉客户端自己去找其他资源,是在服务端提示下的,客户端的行为</li><li>客户端至少发送了两次请求,客户端地址栏是要变化的</li><li>服务端产生了多对请求和响应对象,且请求和响应对象不会传递给下一个资源</li><li>因为全程产生了多个HttpServletRequset对象,所以请求参数不可以传递,请求域中的数据也不可以传递</li><li>重定向可以是其他Servlet动态资源,也可以是一些静态资源以实现页面跳转</li><li>重定向不可以到给WEB-INF下受保护的资源</li><li>重定向可以到本项目以外的外部资源</li></ul><blockquote><p>响应重定向测试代码</p></blockquote><p><img src="'+a+`" alt="1682323740343"></p><ul><li>ServletA</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/servletA&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletA</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//  获取请求参数</span>
        <span class="token class-name">String</span> username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//  向请求域中添加数据</span>
        req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;reqKey&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;requestMessage&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//  响应重定向</span>
        <span class="token comment">// 重定向到servlet动态资源 OK</span>
        resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">&quot;servletB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 重定向到视图静态资源 OK</span>
        <span class="token comment">//resp.sendRedirect(&quot;welcome.html&quot;);</span>
        <span class="token comment">// 重定向到WEB-INF下的资源 NO</span>
        <span class="token comment">//resp.sendRedirect(&quot;WEB-INF/views/view1&quot;);</span>
        <span class="token comment">// 重定向到外部资源</span>
        <span class="token comment">//resp.sendRedirect(&quot;http://www.atguigu.com&quot;);</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>ServletB</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/servletB&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletB</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取请求参数</span>
        <span class="token class-name">String</span> username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取请求域中的数据</span>
        <span class="token class-name">String</span> reqMessage <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;reqKey&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reqMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 做出响应</span>
        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;servletB response&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>打开浏览器,输入以下url测试</li></ul><div class="language-url line-numbers-mode" data-ext="url"><pre class="language-url"><code><span class="token scheme">http<span class="token scheme-delimiter">:</span></span><span class="token authority"><span class="token authority-delimiter">//</span><span class="token host">localhost</span><span class="token port-segment"><span class="token port-delimiter">:</span><span class="token port">8080</span></span></span><span class="token path"><span class="token path-separator">/</span>web03_war_exploded<span class="token path-separator">/</span>servletA</span><span class="token query"><span class="token query-delimiter">?</span><span class="token pair"><span class="token key">username</span>=<span class="token value">atguigu</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="十-web乱码和路径问题总结" tabindex="-1"><a class="header-anchor" href="#十-web乱码和路径问题总结" aria-hidden="true">#</a> 十 web乱码和路径问题总结</h1><blockquote><p>乱码问题产生的根本原因是什么</p></blockquote><ol><li>数据的写入和读取使用的不是同一个字符集</li><li>使用了不支持某个语言文字的字符集</li><li>如果中文乱码中,出现了带有中文痕迹的乱码,那说明都使用了支持中文的不同字符集</li><li>如果中文乱码中,出现了没有中文痕迹的乱码,那说明可能是使用了不支持中文字符集</li></ol><blockquote><p>各个字符集的兼容性</p></blockquote><img src="`+x+'" alt="1682326867396" style="zoom:80%;"><ul><li>由上图得知,上述字符集都兼容了ASCII</li><li>ASCII中有什么? 英文字母和一些通常使用的符号,所以这些东西无论使用什么字符集都不会乱码</li></ul><h2 id="_10-1-乱码问题" tabindex="-1"><a class="header-anchor" href="#_10-1-乱码问题" aria-hidden="true">#</a> 10.1 乱码问题</h2><h3 id="_10-1-1-tomcat控制台乱码" tabindex="-1"><a class="header-anchor" href="#_10-1-1-tomcat控制台乱码" aria-hidden="true">#</a> 10.1.1 Tomcat控制台乱码</h3><blockquote><p>在tomcat10.1.7这个版本中,修改 tomcat/conf/logging.properties中,所有的UTF-8为GBK即可</p></blockquote><ul><li>修改前</li></ul><img src="'+p+'" alt="1681443202115" style="zoom:50%;"><ul><li>修改后</li></ul><img src="'+l+'" alt="1681443273573" style="zoom:50%;"><ul><li>重启测试</li></ul><img src="'+o+'" alt="1681443314432"><img src="'+y+'" alt="1682325615922"><h3 id="_10-1-2-浏览器解析html乱码问题" tabindex="-1"><a class="header-anchor" href="#_10-1-2-浏览器解析html乱码问题" aria-hidden="true">#</a> 10.1.2 浏览器解析HTML乱码问题</h3><blockquote><p>设置项目文件的字符集要使用一个支持中文的字符集</p></blockquote><ul><li>查看当前文件的字符集</li></ul><img src="'+_+'" alt="1682325817829"><ul><li>查看项目字符集 配置,将Global Encoding 全局字符集,Project Encoding 项目字符集, Properties Files 属性配置文件字符集设置为UTF-8</li></ul><img src="'+f+`" alt="1682326229063"><blockquote><p>当前视图文件的字符集通过<meta charset="UTF-8"> 来告知浏览器通过什么字符集来解析当前文件</p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    中文
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-1-2-请求乱码问题" tabindex="-1"><a class="header-anchor" href="#_10-1-2-请求乱码问题" aria-hidden="true">#</a> 10.1.2 请求乱码问题</h3><h4 id="_10-1-2-1-get请求乱码" tabindex="-1"><a class="header-anchor" href="#_10-1-2-1-get请求乱码" aria-hidden="true">#</a> 10.1.2.1 GET请求乱码</h4><blockquote><p>GET请求方式乱码分析</p></blockquote><ul><li>GET方式提交参数的方式是将参数放到URL后面,如果使用的不是UTF-8,那么会对参数进行URL编码处理</li><li>HTML中的 <meta charset="字符集"> 影响了GET方式提交参数的URL编码</li><li>tomcat10.1.7的URI编码默认为 UTF-8</li><li>当GET方式提交的参数URL编码和tomcat10.1.7默认的URI编码不一致时,就会出现乱码</li></ul><blockquote><p>GET请求方式乱码演示</p></blockquote><ul><li>浏览器解析的文档的<meta charset="GBK"></li></ul><img src="`+E+'" alt="1682385870660" style="zoom:67%;"><ul><li>GET方式提交时,会对数据进行URL编码处理 ,是将GBK 转码为 &quot;百分号码&quot;</li></ul><img src="'+R+'" alt="1682385997927" style="zoom:80%;"><ul><li>tomcat10.1.7 默认使用UTF-8对URI进行解析,造成前后端使用的字符集不一致,出现乱码</li></ul><img src="'+H+'" alt="1682386110151" style="zoom:80%;"><blockquote><p>GET请求方式乱码解决</p></blockquote><ul><li>方式1 :设置GET方式提交的编码和Tomcat10.1.7的URI默认解析编码一致即可 (推荐)</li></ul><img src="'+j+'" alt="1682386298048" style="zoom:75%;"><img src="'+T+'" alt="1682386374464" style="zoom:85%;"><ul><li>方式2 : 设置Tomcat10.1.7的URI解析字符集和GET请求发送时所使用URL转码时的字符集一致即可,修改conf/server.xml中 Connecter 添加 URIEncoding=&quot;GBK&quot; (不推荐)</li></ul><p><img src="'+I+'" alt="1682386551684"></p><img src="'+C+'" alt="1682386611945" style="zoom:50%;"><h4 id="_10-1-2-2-post方式请求乱码" tabindex="-1"><a class="header-anchor" href="#_10-1-2-2-post方式请求乱码" aria-hidden="true">#</a> 10.1.2.2 POST方式请求乱码</h4><blockquote><p>POST请求方式乱码分析</p></blockquote><ul><li>POST请求将参数放在请求体中进行发送</li><li>请求体使用的字符集受到了<meta charset="字符集"> 的影响</li><li>Tomcat10.1.7 默认使用UTF-8字符集对请求体进行解析</li><li>如果请求体的URL转码和Tomcat的请求体解析编码不一致,就容易出现乱码</li></ul><blockquote><p>POST方式乱码演示</p></blockquote><ul><li>POST请求请求体受到了<meta charset="字符集"> 的影响</li></ul><img src="'+P+'" alt="1682387258428" style="zoom:67%;"><ul><li>请求体中,将GBK数据进行 URL编码</li></ul><img src="'+O+'" alt="1682387349916" style="zoom:85%;"><ul><li>后端默认使用UTF-8解析请求体,出现字符集不一致,导致乱码</li></ul><img src="'+A+'" alt="1682387412704" style="zoom:67%;"><blockquote><p>POST请求方式乱码解决</p></blockquote><ul><li>方式1 : 请求时,使用UTF-8字符集提交请求体 (推荐)</li></ul><img src="'+N+'" alt="1682387836615" style="zoom:67%;"><img src="'+D+'" alt="1682387857587" style="zoom:88%;"><ul><li>方式2 : 后端在获取参数前,设置解析请求体使用的字符集和请求发送时使用的字符集一致 (不推荐)</li></ul><img src="'+B+'" alt="1682388026978" style="zoom:75%;"><h3 id="_10-1-3-响应乱码问题" tabindex="-1"><a class="header-anchor" href="#_10-1-3-响应乱码问题" aria-hidden="true">#</a> 10.1.3 响应乱码问题</h3><blockquote><p>响应乱码分析</p></blockquote><ul><li>在Tomcat10.1.7中,向响应体中放入的数据默认使用了工程编码 UTF-8</li><li>浏览器在接收响应信息时,使用了不同的字符集或者是不支持中文的字符集就会出现乱码</li></ul><blockquote><p>响应乱码演示</p></blockquote><ul><li>服务端通过response对象向响应体添加数据</li></ul><p><img src="'+U+'" alt="1682388204239"></p><ul><li>浏览器接收数据解析乱码</li></ul><img src="'+W+'" alt="1682388599014" style="zoom:80%;"><blockquote><p>响应乱码解决</p></blockquote><ul><li><p>方式1 : 手动设定浏览器对本次响应体解析时使用的字符集(不推荐)</p><ul><li>edge和 chrome浏览器没有提供直接的比较方便的入口,不方便</li></ul></li><li><p>方式2: 后端通过设置响应体的字符集和浏览器解析响应体的默认字符集一致(不推荐)</p></li></ul><img src="'+M+'" alt="1682389063225" style="zoom:75%;"><p>方式3: 通过设置content-type响应头,告诉浏览器以指定的字符集解析响应体(推荐)</p><img src="'+F+'" alt="1682389263627"><img src="'+L+'" alt="1682389317234" style="zoom:67%;"><h2 id="_10-2-路径问题" tabindex="-1"><a class="header-anchor" href="#_10-2-路径问题" aria-hidden="true">#</a> 10.2 路径问题</h2><blockquote><p>相对路径和绝对路径</p></blockquote><ul><li><p>相对路径</p><ul><li>相对路径的规则是: 以当前资源所在的路径为出发点去寻找目标资源</li><li>相对路径不以 / 开头</li><li>在file协议下,使用的是磁盘路径</li><li>在http协议下,使用的是url路径</li><li>相对路径中可以使用 ./表示当前资源所在路径,可以省略不写</li><li>相对路径中可以使用../表示当前资源所在路径的上一层路径,需要时要手动添加</li></ul></li><li><p>绝对路径</p><ul><li>绝对路径的规则是: 使用以一个固定的路径做出出发点去寻找目标资源,和当前资源所在的路径没有关系</li><li>绝对路径要以/ 开头</li><li>绝对路径的写法中,不以当前资源的所在路径为出发点,所以不会出现 ./ 和../</li><li>不同的项目和不同的协议下,绝对路径的基础位置可能不同,要通过测试确定</li><li>绝对路径的好处就是:无论当前资源位置在哪,寻找目标资源路径的写法都一致</li></ul></li><li><p>应用场景</p><ol><li>前端代码中,href src action 等属性</li><li>请求转发和重定向中的路径</li></ol></li></ul><h3 id="_10-2-1-前端路径问题" tabindex="-1"><a class="header-anchor" href="#_10-2-1-前端路径问题" aria-hidden="true">#</a> 10.2.1 前端路径问题</h3><blockquote><p>前端项目结构</p></blockquote><p><img src="'+z+`" alt="1682390999417"></p><h4 id="_10-2-1-1-相对路径情况分析" tabindex="-1"><a class="header-anchor" href="#_10-2-1-1-相对路径情况分析" aria-hidden="true">#</a> 10.2.1.1 相对路径情况分析</h4><blockquote><p>相对路径情况1:web/index.html中引入web/static/img/logo.png</p></blockquote><ul><li>访问index.html的url为 : http://localhost:8080/web03_war_exploded/index.html</li><li>当前资源为 : index.html</li><li>当前资源的所在路径为 : http://localhost:8080/web03_war_exploded/</li><li>要获取的目标资源url为 : http://localhost:8080/web03_war_exploded/static/img/logo.png</li><li>index.html中定义的了 : <code>&lt;img src=&quot;static/img/logo.png&quot;/&gt;</code></li><li>寻找方式就是在当前资源所在路径(http://localhost:8080/web03_war_exploded/)后拼接src属性值(static/img/logo.png),正好是目标资源正常获取的url(http://localhost:8080/web03_war_exploded/static/img/logo.png)</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>static/img/logo.png<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>相对路径情况2:web/a/b/c/test.html中引入web/static/img/logo.png</p></blockquote><ul><li>访问test.html的url为 : http://localhost:8080/web03_war_exploded/a/b/c/test.html</li><li>当前资源为 : test.html</li><li>当前资源的所在路径为 : http://localhost:8080/web03_war_exploded/a/b/c/</li><li>要获取的目标资源url为 : http://localhost:8080/web03_war_exploded/static/img/logo.png</li><li>test.html中定义的了 : <code>&lt;img src=&quot;../../../static/img/logo.png&quot;/&gt;</code></li><li>寻找方式就是在当前资源所在路径(http://localhost:8080/web03_war_exploded/a/b/c/)后拼接src属性值(../../../static/img/logo.png),其中 ../可以抵消一层路径,正好是目标资源正常获取的url(http://localhost:8080/web03_war_exploded/static/img/logo.png)</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- ../代表上一层路径 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../../../static/img/logo.png<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>相对路径情况3:web/WEB-INF/views/view1.html中引入web/static/img/logo.png</p></blockquote><ul><li>view1.html在WEB-INF下,需要通过Servlet请求转发获得</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/view1Servlet&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">View1Servlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">RequestDispatcher</span> requestDispatcher <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;WEB-INF/views/view1.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        requestDispatcher<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>访问view1.html的url为 : http://localhost:8080/web03_war_exploded/view1Servlet</li><li>当前资源为 : view1Servlet</li><li>当前资源的所在路径为 : http://localhost:8080/web03_war_exploded/</li><li>要获取的目标资源url为 : http://localhost:8080/web03_war_exploded/static/img/logo.png</li><li>view1.html中定义的了 : <code>&lt;img src=&quot;static/img/logo.png&quot;/&gt;</code></li><li>寻找方式就是在当前资源所在路径(http://localhost:8080/web03_war_exploded/)后拼接src属性值(static/img/logo.png),正好是目标资源正常获取的url(http://localhost:8080/web03_war_exploded/static/img/logo.png)</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>static/img/logo.png<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_10-2-1-2-绝对路径情况分析" tabindex="-1"><a class="header-anchor" href="#_10-2-1-2-绝对路径情况分析" aria-hidden="true">#</a> 10.2.1.2 绝对路径情况分析</h4><blockquote><p>绝对路径情况1:web/index.html中引入web/static/img/logo.png</p></blockquote><ul><li>访问index.html的url为 : http://localhost:8080/web03_war_exploded/index.html</li><li>绝对路径的基准路径为 : http://localhost:8080</li><li>要获取的目标资源url为 : http://localhost:8080/web03_war_exploded/static/img/logo.png</li><li>index.html中定义的了 : <code>&lt;img src=&quot;/web03_war_exploded/static/img/logo.png&quot;/&gt;</code></li><li>寻找方式就是在基准路径(http://localhost:8080)后面拼接src属性值(/web03_war_exploded/static/img/logo.png),得到的正是目标资源访问的正确路径</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 绝对路径写法 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/web03_war_exploded/static/img/logo.png<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>绝对路径情况2:web/a/b/c/test.html中引入web/static/img/logo.png</p></blockquote><ul><li>访问test.html的url为 : http://localhost:8080/web03_war_exploded/a/b/c/test.html</li><li>绝对路径的基准路径为 : http://localhost:8080</li><li>要获取的目标资源url为 : http://localhost:8080/web03_war_exploded/static/img/logo.png</li><li>test.html中定义的了 : <code>&lt;img src=&quot;/web03_war_exploded/static/img/logo.png&quot;/&gt;</code></li><li>寻找方式就是在基准路径(http://localhost:8080)后面拼接src属性值(/web03_war_exploded/static/img/logo.png),得到的正是目标资源访问的正确路径</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 绝对路径写法 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/web03_war_exploded/static/img/logo.png<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>绝对路径情况3:web/WEB-INF/views/view1.html中引入web/static/img/logo.png</p></blockquote><ul><li>view1.html在WEB-INF下,需要通过Servlet请求转发获得</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/view1Servlet&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">View1Servlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">RequestDispatcher</span> requestDispatcher <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;WEB-INF/views/view1.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        requestDispatcher<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>访问view1.html的url为 : http://localhost:8080/web03_war_exploded/view1Servlet</li><li>绝对路径的基准路径为 : http://localhost:8080</li><li>要获取的目标资源url为 : http://localhost:8080/web03_war_exploded/static/img/logo.png</li><li>view1.html中定义的了 : <code>&lt;img src=&quot;/web03_war_exploded/static/img/logo.png&quot;/&gt;</code></li><li>寻找方式就是在基准路径(http://localhost:8080)后面拼接src属性值(/static/img/logo.png),得到的正是目标资源访问的正确路径</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/web03_war_exploded/static/img/logo.png<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_10-2-1-3-base标签的使用" tabindex="-1"><a class="header-anchor" href="#_10-2-1-3-base标签的使用" aria-hidden="true">#</a> 10.2.1.3 base标签的使用</h4><blockquote><p>base标签定义页面相对路径公共前缀</p></blockquote><ul><li>base 标签定义在head标签中,用于定义相对路径的公共前缀</li><li>base 标签定义的公共前缀只在相对路径上有效,绝对路径中无效</li><li>如果相对路径开头有 ./ 或者../修饰,则base标签对该路径同样无效</li></ul><blockquote><p>index.html 和a/b/c/test.html 以及view1Servlet 中的路径处理</p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--定义相对路径的公共前缀,将相对路径转化成了绝对路径--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/web03_war_exploded/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>static/img/logo.png<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_10-2-1-4-缺省项目上下文路径" tabindex="-1"><a class="header-anchor" href="#_10-2-1-4-缺省项目上下文路径" aria-hidden="true">#</a> 10.2.1.4 缺省项目上下文路径</h4><blockquote><p>项目上下文路径变化问题</p></blockquote><ul><li>通过 base标签虽然解决了相对路径转绝对路径问题,但是base中定义的是项目的上下文路径</li><li>项目的上下文路径是可以随意变化的</li><li>一旦项目的上下文路径发生变化,所有base标签中的路径都需要改</li></ul><blockquote><p>解决方案</p></blockquote><ul><li>将项目的上下文路径进行缺省设置,设置为 /,所有的绝对路径中就不必填写项目的上下文了,直接就是/开头即可</li></ul><h3 id="_10-2-2-重定向中的路径问题" tabindex="-1"><a class="header-anchor" href="#_10-2-2-重定向中的路径问题" aria-hidden="true">#</a> 10.2.2 重定向中的路径问题</h3><blockquote><p>目标 :由/x/y/z/servletA重定向到a/b/c/test.html</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/x/y/z/servletA&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletA</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_10-2-2-1相对路径写法" tabindex="-1"><a class="header-anchor" href="#_10-2-2-1相对路径写法" aria-hidden="true">#</a> 10.2.2.1相对路径写法</h4><ul><li>访问ServletA的url为 : http://localhost:8080/web03_war_exploded/x/y/z/servletA</li><li>当前资源为 : servletA</li><li>当前资源的所在路径为 : http://localhost:8080/web03_war_exploded/x/x/z/</li><li>要获取的目标资源url为 : http://localhost:8080/web03_war_exploded/a/b/c/test.html</li><li>ServletA重定向的路径 : ../../../a/b/c/test/html</li><li>寻找方式就是在当前资源所在路径(http://localhost:8080/web03_war_exploded/x/y/z/)后拼接(../../../a/b/c/test/html),形成(http://localhost:8080/web03_war_exploded/x/y/z/../../../a/b/c/test/html)每个../抵消一层目录,正好是目标资源正常获取的url(http://localhost:8080/web03_war_exploded/a/b/c/test/html)</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/x/y/z/servletA&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletA</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 相对路径重定向到test.html</span>
        resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">&quot;../../../a/b/c/test.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_10-2-2-2绝对路径写法" tabindex="-1"><a class="header-anchor" href="#_10-2-2-2绝对路径写法" aria-hidden="true">#</a> 10.2.2.2绝对路径写法</h4><ul><li><p>访问ServletA的url为 : http://localhost:8080/web03_war_exploded/x/y/z/servletA</p></li><li><p>绝对路径的基准路径为 : http://localhost:8080</p></li><li><p>要获取的目标资源url为 : http://localhost:8080/web03_war_exploded/a/b/c/test.html</p></li><li><p>ServletA重定向的路径 : /web03_war_exploded/a/b/c/test.html</p></li><li><p>寻找方式就是在基准路径(http://localhost:8080)后面拼接(/web03_war_exploded/a/b/c/test.html),得到( http://localhost:8080/web03_war_exploded/a/b/c/test.html)正是目标资源访问的正确路径</p></li><li><p>绝对路径中需要填写项目上下文路径,但是上下文路径是变换的</p><ul><li>可以通过 ServletContext的getContextPath()获取上下文路径</li><li>可以将项目上下文路径定义为 / 缺省路径,那么路径中直接以/开头即可</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//绝对路径中,要写项目上下文路径</span>
<span class="token comment">//resp.sendRedirect(&quot;/web03_war_exploded/a/b/c/test.html&quot;);</span>
<span class="token comment">// 通过ServletContext对象动态获取项目上下文路径</span>
<span class="token comment">//resp.sendRedirect(getServletContext().getContextPath()+&quot;/a/b/c/test.html&quot;);</span>
<span class="token comment">// 缺省项目上下文路径时,直接以/开头即可</span>
resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">&quot;/a/b/c/test.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_10-2-3-请求转发中的路径问题" tabindex="-1"><a class="header-anchor" href="#_10-2-3-请求转发中的路径问题" aria-hidden="true">#</a> 10.2.3 请求转发中的路径问题</h3><blockquote><p>目标 :由x/y/servletB请求转发到a/b/c/test.html</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/x/y/servletB&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletB</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_10-2-3-1-相对路径写法" tabindex="-1"><a class="header-anchor" href="#_10-2-3-1-相对路径写法" aria-hidden="true">#</a> 10.2.3.1 相对路径写法</h4><ul><li><p>访问ServletB的url为 : http://localhost:8080/web03_war_exploded/x/y/servletB</p></li><li><p>当前资源为 : servletB</p></li><li><p>当前资源的所在路径为 : http://localhost:8080/web03_war_exploded/x/x/</p></li><li><p>要获取的目标资源url为 : http://localhost:8080/web03_war_exploded/a/b/c/test.html</p></li><li><p>ServletA请求转发路径 : ../../a/b/c/test/html</p></li><li><p>寻找方式就是在当前资源所在路径(http://localhost:8080/web03_war_exploded/x/y/)后拼接(../../a/b/c/test/html),形成(http://localhost:8080/web03_war_exploded/x/y/../../a/b/c/test/html)每个../抵消一层目录,正好是目标资源正常获取的url(http://localhost:8080/web03_war_exploded/a/b/c/test/html)</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/x/y/servletB&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletB</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">RequestDispatcher</span> requestDispatcher <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;../../a/b/c/test.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        requestDispatcher<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_10-2-3-2绝对路径写法" tabindex="-1"><a class="header-anchor" href="#_10-2-3-2绝对路径写法" aria-hidden="true">#</a> 10.2.3.2绝对路径写法</h4><ul><li><p>请求转发只能转发到项目内部的资源,其绝对路径无需添加项目上下文路径</p></li><li><p>请求转发绝对路径的基准路径相当于http://localhost:8080/web03_war_exploded</p></li><li><p>在项目上下文路径为缺省值时,也无需改变,直接以/开头即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/x/y/servletB&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletB</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">RequestDispatcher</span> requestDispatcher <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;/a/b/c/test.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        requestDispatcher<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_10-2-3-3目标资源内相对路径处理" tabindex="-1"><a class="header-anchor" href="#_10-2-3-3目标资源内相对路径处理" aria-hidden="true">#</a> 10.2.3.3目标资源内相对路径处理</h4><ul><li><p>此时需要注意,请求转发是服务器行为,浏览器不知道,地址栏不变化,相当于我们访问test.html的路径为http://localhost:8080/web03_war_exploded/x/y/servletB</p></li><li><p>那么此时 test.html资源的所在路径就是http://localhost:8080/web03_war_exploded/x/y/所以test.html中相对路径要基于该路径编写,如果使用绝对路径则不用考虑</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--
		当前资源路径是     http://localhost:8080/web03_war_exploded/x/y/servletB
        当前资源所在路径是  http://localhost:8080/web03_war_exploded/x/y/
        目标资源路径=所在资源路径+src属性值 
		http://localhost:8080/web03_war_exploded/x/y/../../static/img/logo.png
        http://localhost:8080/web03_war_exploded/static/img/logo.png
		得到目标路径正是目标资源的访问路径	
    --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../../static/img/logo.png<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,262);function X(Q,Z){const e=i("ExternalLinkIcon");return u(),r("div",null,[Y,n("ul",null,[n("li",null,[n("p",null,[n("a",K,[k("Java EE - Technologies (oracle.com)"),d(e)])])]),V]),J])}const sn=c(G,[["render",X],["__file","05_第五章 Servlet.html.vue"]]);export{sn as default};
