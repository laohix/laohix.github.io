import{_ as t,r as p,o as e,c as o,a as n,b as c,e as s}from"./app-8007fa1b.js";const i="/assets/图片_iJH6LY605q-c6ea40dc.png",l="/assets/图片_soZg5MHbr3-1009a094.png",u="/assets/图片_CWy0BsWOt3-14babd80.png",k="/assets/图片_Reb-1ZPS9o-d12cfe68.png",r={},d=s(`<h1 id="集合类" tabindex="-1"><a class="header-anchor" href="#集合类" aria-hidden="true">#</a> 集合类</h1><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h2><ul><li><a href="#1Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E6%98%AF%E4%BB%80%E4%B9%88%E8%AF%B4%E5%87%BA%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BC%98%E7%82%B9">1、Java集合框架是什么?说出集合框架的一些优点?</a></li><li><a href="#2%E9%9B%86%E5%90%88%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%B8%B8%E8%A7%81%E5%AE%9E%E7%8E%B0%E7%B1%BB">2、集合接口的常见实现类</a></li><li><a href="#3List%E5%92%8CMap%E5%8C%BA%E5%88%AB">3、List和Map区别?</a></li><li><a href="#4ListMapSet%E4%B8%89%E4%B8%AA%E6%8E%A5%E5%8F%A3%E5%AD%98%E5%8F%96%E5%85%83%E7%B4%A0%E6%97%B6%E5%90%84%E6%9C%89%E4%BB%80%E4%B9%88%E7%89%B9%E7%82%B9">4、List、Map、Set三个接口，存取元素时，各有什么特点?</a></li><li><a href="#5%E4%B8%BA%E4%BB%80%E4%B9%88Map%E6%8E%A5%E5%8F%A3%E4%B8%8D%E7%BB%A7%E6%89%BFCollection%E6%8E%A5%E5%8F%A3">5、为什么Map接口不继承Collection接口?</a></li><li><a href="#6Iterator%E5%92%8CListIterator%E4%B9%8B%E9%97%B4%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB">6、Iterator和ListIterator之间有什么区别?</a></li><li><a href="#7%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B%E6%9C%89%E4%BB%80%E4%B9%88%E4%BC%98%E7%82%B9">7、集合框架中的泛型有什么优点?</a></li><li><a href="#8Map%E6%8E%A5%E5%8F%A3%E6%8F%90%E4%BE%9B%E4%BA%86%E5%93%AA%E4%BA%9B%E4%B8%8D%E5%90%8C%E7%9A%84%E9%9B%86%E5%90%88%E8%A7%86%E5%9B%BE">8、Map接口提供了哪些不同的集合视图?</a></li><li><a href="#9jdk17HashMap">9、jdk1.7HashMap</a></li><li><a href="#10jdk18HashMap">10、jdk1.8HashMap</a></li><li><a href="#11JDK8%E4%B8%AD%E7%9A%84HashMap%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E7%BA%A2%E9%BB%91%E6%A0%91">11、JDK8中的HashMap为什么要使用红黑树？</a></li><li><a href="#12JDK8%E4%B8%AD%E7%9A%84HashMap%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E5%B0%86%E9%93%BE%E8%A1%A8%E8%BD%AC%E5%8C%96%E4%B8%BA%E7%BA%A2%E9%BB%91%E6%A0%91">12、JDK8中的HashMap什么时候将链表转化为红黑树？</a></li><li><a href="#13JDK7%E4%B8%8EJDK8%E4%B8%ADHashMap%E7%9A%84%E4%B8%8D%E5%90%8C%E7%82%B9">13、JDK7与JDK8中HashMap的不同点？</a></li><li><a href="#14jdk17ConcurrentHashMap">14、jdk1.7ConcurrentHashMap</a></li><li><a href="#15jdk18ConcurrentHashMap">15、jdk1.8ConcurrentHashMap</a></li><li><a href="#16jdk17ConcurrentHashMap%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%B9%B6%E5%8F%91">16、jdk1.7ConcurrentHashMap如何保证并发</a></li><li><a href="#17jdk18ConcurrentHashMap%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%B9%B6%E5%8F%91">17、jdk1.8ConcurrentHashMap如何保证并发</a></li></ul><h2 id="_1、java集合框架是什么-说出集合框架的一些优点" tabindex="-1"><a class="header-anchor" href="#_1、java集合框架是什么-说出集合框架的一些优点" aria-hidden="true">#</a> 1、Java集合框架是什么?说出集合框架的一些优点?</h2><p>答：每种编程语言中都有集合，最初的Java版本包含几种集合类：Vector、Stack、HashTable和Arrays。随着集合的广泛使用，Java1.2提出了囊括所有集合接口和实现类、算法的集合框架。</p><p>在保证线程安全的情况下使用泛型和并发集合类，Java已经经历了很久。集合框架的部分优点如下：</p><p>(1)使用核心集合类降低开发成本，而非实现我们自己的集合类。</p><p>(2)使用经过严格测试的集合框架类，代码质量会得到提高。</p><p>(3)通过使用JDK附带的集合类，可以降低代码维护成本。</p><p>(4)复用性和可操作性。</p><h2 id="_2、集合接口的常见实现类" tabindex="-1"><a class="header-anchor" href="#_2、集合接口的常见实现类" aria-hidden="true">#</a> 2、集合接口的常见实现类</h2><p>1、<strong>List接口的实现类</strong></p><p>List接口的实现类最常用的有ArrayList和LinkedList、Vector</p><p>ArrayList类实现了可变的数组，可以根据索引位置对集合进行快速的随机访问。</p><p>LinkedList类采用链表结构保存对象，便于向集合中插入和删除对象，但是如果将元素插入到集合的尾部，其实ArrayList原比LinkedList快。</p><p>Vector:也是List的一个常见实现类，但是在该类中的大多数方法都加了synchronized关键字，因此相比ArrayList、LinkedList集合在多线程访问时是线程的安全的。</p><p>2 <strong>、Set接口的实现类</strong></p><p>Set接口的实现类常用的有HashSet和TreeSet、LinkedHashSet。它们的元素都不可重复。</p><p>HashSet：底层是哈希表，遍历元素和添加顺序、大小顺序无关。</p><p>TreeSet：底层是红黑树，元素按照大小顺序存储和遍历。</p><p>LinkedHashSet：底层是哈希表+双链表，遍历元素可以体现添加时顺序。顺序性是体现和HashSet不同之处。</p><p><strong>3、Map接口的实现类</strong></p><p>Map接口的实现类常用的有HashMap、LinkedHashMap和TreeMap。它们的key都不可重复。这里面的key不可重复 <strong>，指的是容器中对于同一个Key只会存在一个。</strong></p><p>HashMap：哈希表，底层是数组+链表+红黑树。遍历元素和添加顺序、大小顺序无关。</p><p>LinkedHashMap：哈希表+双链表，遍历元素可以体现添加顺序。</p><p>TreeMap：红黑树，元素按照key大小顺序存储和遍历。</p><p><strong>例子（example）：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">se<span class="token punctuation">.</span>collect<span class="token punctuation">.</span>map</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ConcurrentHashMap</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Author huzhongkui
 * @Date 2023--09--19:14:22
 * 聪明出于勤奋,天才在于积累
 **/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapDemo1</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;input          1 : 1     3 : 3     2 : 2     4 : 4     5 : 5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//HashMap</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;5&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;HashMap        &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> hashMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&quot; : &quot;</span> <span class="token operator">+</span> hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;     &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">//LinkedHashMap</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> linkedHashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        linkedHashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        linkedHashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        linkedHashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        linkedHashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        linkedHashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;5&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;LinkedHashMap  &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> linkedHashMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&quot; : &quot;</span> <span class="token operator">+</span> linkedHashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;     &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment">//TreeMap</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> treeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        treeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        treeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        treeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        treeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        treeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;5&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;TreeMap        &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> treeMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&quot; : &quot;</span> <span class="token operator">+</span> treeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;     &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、list和map区别" tabindex="-1"><a class="header-anchor" href="#_3、list和map区别" aria-hidden="true">#</a> 3、List和Map区别?</h2><p>答：在数据结构方面，List存储的是单列数据的集合，而Map存储的是key、value类型的数据集合。在数据存储方面，List存储的数据是有序且可以重复的，而Map中存储的数据是无序（不同的子类也可以保证有序）且key值不会重复(value值可以重复)。</p><h2 id="_4、list、map、set三个接口-存取元素时-各有什么特点" tabindex="-1"><a class="header-anchor" href="#_4、list、map、set三个接口-存取元素时-各有什么特点" aria-hidden="true">#</a> 4、List、Map、Set三个接口，存取元素时，各有什么特点?</h2><p>List与Set具有相似性，它们都是单列元素的集合，所以，它们有一个共同的父接口，叫Collection。</p><p>Set里面不允许有重复（即相等）的元素。Set取元素时，没法说取第几个，只能通过for循环或者迭代器逐一遍历各个元素。</p><p>List表示有先后顺序的集合， 注意，不是那种按年龄、按大小、按价格之类的排序。当我们多次调用add(Object e)方法时，每次加入的对象就像火车站买票有排队顺序一样，按先来后到的顺序排序。有时候，也可以插队，即调用add(int index,Object e)方法，就可以指定当前对象在集合中的存放位置。一个对象可以被反复存储进List中，每调用一次add方法，这个对象就被插入进集合中一次，其实，并不是把这个对象本身存储进了集合中，而是在集合中用一个索引变量指向这个对象，当这个对象被add多次时，即相当于集合中有多个索引指向了这个对象。List除了通过迭代器逐一遍历各个元素，还可以调用get(index i)来明确说明取第几个。</p><p>Map与List和Set不同，它是双列的集合，用put方法存储一对key/value，不能存储重复的key。取则可以根据key获得相应的value，即get(Object key)返回值为key 所对应的value。另外，也可以获得所有的key的集合(map.keySet())，还可以获得所有的value的结合(map.values())，还可以获得key和value组合成的Map.Entry对象的集合(map.entrySet())。</p><h2 id="_5、为什么map接口不继承collection接口" tabindex="-1"><a class="header-anchor" href="#_5、为什么map接口不继承collection接口" aria-hidden="true">#</a> 5、为什么Map接口不继承Collection接口?</h2><p>首先Map提供的是键值对映射（即Key和value的映射），而collection提供的是一组数据（并不是键值对映射）。</p><p>其次如果map继承了collection接口，那么所有实现了map接口的类到底是用map的键值对映射数据还是用collection的一组数据呢（就我们平常所用的hashMap、hashTable、treeMap等都是键值对，所以它继承collection完全没意义），而且map如果继承了collection接口的话还违反了面向对象的<strong>接口分离原则</strong>。</p><h2 id="_6、iterator和listiterator之间有什么区别" tabindex="-1"><a class="header-anchor" href="#_6、iterator和listiterator之间有什么区别" aria-hidden="true">#</a> 6、Iterator和ListIterator之间有什么区别?</h2><p>(1)我们可以使用Iterator来遍历Set和List集合，而ListIterator只能遍历List;</p><p>(2)Iterator只可以向前遍历，而LIstIterator可以双向遍历;</p><p>(3)ListIterator从Iterator接口继承，然后添加了一些额外的功能，比如添加一个元素、替换一个元素、获取前面或后面元素的索引位置。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">se<span class="token punctuation">.</span>collect<span class="token punctuation">.</span>list</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ListIterator</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Author huzhongkui
 * @Date 2023--09--19:15:04
 * 聪明出于勤奋,天才在于积累
 **/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListIteratorDemo</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;正向遍历结果:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 正向遍历</span>
        <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> listIterator <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>listIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>listIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;反向遍历结果:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 反向遍历</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>listIterator<span class="token punctuation">.</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>listIterator<span class="token punctuation">.</span><span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;插入元素：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//插入元素</span>
        <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> listIterator1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        listIterator1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;7&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>listIterator1<span class="token punctuation">.</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>listIterator1<span class="token punctuation">.</span><span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> listIterator2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;替换元素:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 替换元素</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>listIterator2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> next <span class="token operator">=</span> listIterator2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;5&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                listIterator2<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;155&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
      
    
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7、集合框架中的泛型有什么优点" tabindex="-1"><a class="header-anchor" href="#_7、集合框架中的泛型有什么优点" aria-hidden="true">#</a> 7、集合框架中的泛型有什么优点?</h2><p><strong>类型安全：</strong></p><p>通过知道使用泛型定义的变量的类型限制，编译器可以在非常高的层次上验证类型假设。没有泛型，这些假设就只能在于程序员编码时候去考虑了。</p>`,46),m=n("strong",null,"消除",-1),h={href:"https://so.csdn.net/so/search?q=%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2&spm=1001.2101.3001.7020",title:"强制类型转换",target:"_blank",rel:"noopener noreferrer"},v=n("strong",null,"强制类型转换",-1),g=n("strong",null,"：",-1),E=s('<p>消除源代码中的许多强制类型转换。这使得代码更加可读，并且减少了出错机会。</p><p><strong>更高的效率：</strong></p><p>在非泛型编程中，将筒单类型作为引用类型传递时会引起（装箱）和（拆箱）操作，这两个过程都是具有很大开销的。引入泛型后，就不必进行装箱和拆箱操作了，所以运行效率相对较高。</p><h2 id="_8、map接口提供了哪些不同的集合视图" tabindex="-1"><a class="header-anchor" href="#_8、map接口提供了哪些不同的集合视图" aria-hidden="true">#</a> 8、Map接口提供了哪些不同的集合视图?</h2><p>Map接口提供三个集合视图：</p><p>(1)Set keyset()：返回map中包含的所有key的一个Set视图。此Set集合是受map支持的，map的变化会在集合中反映出来，反之亦然。当一个迭代器正在遍历一个此Set集合时，若map被修改了(除迭代器自身的移除操作以外)，迭代器的结果会变为不确定。此Set集合支持元素查找和删除，从此Set中删除元素会从map中移除对应的映射，它不支持add和addAll添加操作。</p><p>(2)Collection values()：返回一个map中包含的所有value的一个Collection视图。这个collection受map支持的，map的变化会在collection中反映出来，反之亦然。当一个迭代器正在遍历此collection时，若map被修改了(除迭代器自身的移除操作以外)，迭代器的结果会变为不确定。此Collection集合支持元素查找和删除，从此Collection中删除元素会从map中移除对应的映射，它不支持add和addAll添加操作。</p><p>(3)Set entrySet()：返回一个map钟包含的所有映射的一个Set集合视图。这个Set集合受map支持的，map的变化会在collection中反映出来，反之亦然。当一个迭代器正在遍历此Set集合时，若map被修改了(除迭代器自身的移除操作，以及对迭代器返回的entry进行setValue外)，迭代器的结果会变为未定义。此Set集合支持元素查找和删除，从此Set中删除元素会从map中移除对应的映射，它不支持add和addAll添加操作。</p><h1 id="_9、jdk1-7hashmap" tabindex="-1"><a class="header-anchor" href="#_9、jdk1-7hashmap" aria-hidden="true">#</a> 9、jdk1.7HashMap</h1><p><img src="'+i+'" alt=""></p><p><strong>数据结构：数组+链表</strong></p><p><strong>put方法的流程</strong></p><p><img src="'+l+'" alt=""></p><h1 id="_10、jdk1-8hashmap" tabindex="-1"><a class="header-anchor" href="#_10、jdk1-8hashmap" aria-hidden="true">#</a> <strong>10、jdk1.8HashMap</strong></h1><p><strong>数据结构：数组+链表+（红黑树）</strong></p><p><img src="'+u+'" alt=""></p><p><strong>put方法流程：</strong></p><p><img src="'+k+'" alt=""></p><p><strong>注意细节：</strong></p><p>HashMap基于哈希表的Map接口实现，是以key-value存储形式存在，即主要用来存放键值对。HashMap 的实现不是同步的，这意味着它不是线程安全的。它的key、value都可以为null。此外，HashMap中的映射不是有序的。</p><p>JDK1.8 之前 HashMap 由 数组+链表 组成的，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突(两个对象调用的hashCode方法计算的哈希码值一致导致计算的数组索引值相同)而存在的（“拉链法”解决冲突）。JDK1.8 以后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（或者红黑树的边界值，默认为 8）并且当前数组的长度大于64时，此时此索引位置上的所有数据改为使用红黑树存储。</p><p>补充：将链表转换成红黑树前会判断，即使阈值大于8，但是数组长度小于64，此时并不会将链表变为红黑树。而是选择进行数组扩容。</p><p>这样做的目的是因为数组比较小，尽量避开红黑树结构，这种情况下变为红黑树结构，反而会降低效率，因为红黑树需要进行左旋，右旋，变色这些操作来保持平衡 。同时数组长度小于64时，搜索时间相对要快些。所以综上所述为了提高性能和减少搜索时间，底层在阈值大于8并且数组长度大于64时，链表才转换为红黑树。具体可以参考 treeifyBin方法。</p><p>当然虽然增了红黑树作为底层数据结构，结构变得复杂了，但是阈值大于8并且数组长度大于64时，链表转换为红黑树时，效率也变的更高效。</p><h1 id="_11、jdk8中的hashmap为什么要使用红黑树" tabindex="-1"><a class="header-anchor" href="#_11、jdk8中的hashmap为什么要使用红黑树" aria-hidden="true">#</a> 11、JDK8中的HashMap为什么要使用红黑树？</h1><p>当元素个数小于一个阈值时，链表整体的插入查询效率要高于红黑树，当元素个数大于此阈值时，链表整体的插入查询效率要低于红黑树。此阈值在HashMap中为8。</p><h1 id="_12、jdk8中的hashmap什么时候将链表转化为红黑树" tabindex="-1"><a class="header-anchor" href="#_12、jdk8中的hashmap什么时候将链表转化为红黑树" aria-hidden="true">#</a> 12、JDK8中的HashMap什么时候将链表转化为红黑树？</h1><p>这个题很容易答错，大部分答案就是：当链表中的元素个数大于8时就会把链表转化为红黑树。但是其实还有另外一个限制：当发现链表中的元素个数大于8之后，还会判断一下当前数组的长度，如果数组长度小于64时，此时并不会转化为红黑树，而是进行扩容。只有<strong>当链表中的元素个数大于8，并且数组的长度大于等于64</strong>时才会将链表转为红黑树。</p><p>上面扩容的原因是，如果数组长度还比较小，就先利用扩容来缩小链表的长度。</p><h1 id="_13、jdk7与jdk8中hashmap的不同点" tabindex="-1"><a class="header-anchor" href="#_13、jdk7与jdk8中hashmap的不同点" aria-hidden="true">#</a> 13、JDK7与JDK8中HashMap的不同点？</h1><ol><li>JDK8中使用了红黑树</li><li>JDK7中链表的插入使用的<strong>头插法</strong>（扩容转移元素的时候也是使用的头插法，头插法速度更快，无需遍历链表，但是在多线程扩容的情况下使用头插法会出现循环链表的问题，导致CPU飙升），JDK8中链表使用的<strong>尾插法</strong>（JDK8中反正要去计算链表当前结点的个数，反正要遍历的链表的，所以直接使用尾插法）</li><li>JDK7的Hash算法比JDK8中的更复杂，Hash算法越复杂，生成的hashcode则更散列，那么hashmap中的元素则更散列，更散列则hashmap的查询性能更好，JDK7中没有红黑树，所以只能优化Hash算法使得元素更散列，而JDK8中增加了红黑树，查询性能得到了保障，所以可以简化一下Hash算法，毕竟Hash算法越复杂就越消耗CPU。</li><li>扩容的过程中JDK7中有可能会重新对key进行哈希（重新Hash跟哈希种子有关系），而JDK8中没有这部分逻辑。</li><li>JDK8中扩容的条件和JDK7中不一样，除开判断size是否大于阈值之外，JDK7中还判断了table[i]是否为空，不为空的时候才会进行扩容，而JDK8中则没有该条件了。</li><li>JDK8中还多了一个API：putIfAbsent(key,value)</li><li>JDK7和JDK8扩容过程中转移元素的逻辑不一样，JDK7是每次转移一个元素，JDK8是先算出来当前位置上哪些元素在新数组的低位上，哪些在新数组的高位上，然后在一次性转移。</li></ol><h1 id="_14、jdk1-7concurrenthashmap" tabindex="-1"><a class="header-anchor" href="#_14、jdk1-7concurrenthashmap" aria-hidden="true">#</a> 14、jdk1.7ConcurrentHashMap</h1><p>jdk1.7ConcurrentHashMap底层是由两层嵌套数组来实现的：</p><ol><li>ConcurrentHashMap对象中有一个属性segments，类型为Segment[];</li><li>Segment对象中有一个属性table，类型为HashEntry[];</li></ol><p><strong>put流程：</strong></p><p>1、当调用ConcurrentHashMap的put方法时，先根据key计算出对应的Segment[]的数组下标j，确定好当前key,value应该插入到哪个Segment对象中，如果segments[j]为空，则利用自旋锁的方式在j位置生成一个Segment对象。</p><p>2、然后调用Segment对象的put方法。</p><p> 2.1 Segment对象的put方法会先加锁，然后也根据key计算出对应的HashEntry[]的数组下标i，然后将key,value封装为HashEntry对象放入该位置，此过程和JDK7的HashMap的put方法一样，然后解锁。</p><p> 2.2 在加锁的过程中逻辑比较复杂，先通过自旋加锁，如果超过一定次数就会直接阻塞等等加锁。</p><h1 id="_15、jdk1-8concurrenthashmap" tabindex="-1"><a class="header-anchor" href="#_15、jdk1-8concurrenthashmap" aria-hidden="true">#</a> 15、jdk1.8ConcurrentHashMap</h1><p><strong>put流程：</strong></p><p>1、当向ConcurrentHashMap中put一个key,value时，首先根据key计算对应的数组下标i，如果该位置没有元素，则通过自旋的方法去向该位置赋值。如果该位置有元素，则synchronized会加锁</p><p>2、加锁成功之后，在判断该元素的类型。</p><p>2.1 如果是链表节点则进行添加节点到链表中</p><p>2.2 如果是红黑树则添加节点到红黑树</p><p>3、添加成功后，判断是否需要进行树化</p><p>4、addCount，这个方法的意思是ConcurrentHashMap的元素个数加1，但是这个操作也是需要并发安全的，并且元素个数加1成功后，会继续判断是否要进行扩容，如果需要，则会进行扩容，所以这个方法很重要。</p><p>5、同时一个线程在put时如果发现当前ConcurrentHashMap正在进行扩容则会去帮助扩容。</p><h1 id="_16、jdk1-7concurrenthashmap如何保证并发" tabindex="-1"><a class="header-anchor" href="#_16、jdk1-7concurrenthashmap如何保证并发" aria-hidden="true">#</a> 16、jdk1.7ConcurrentHashMap如何保证并发</h1><p>主要利用Unsafe操作+ReentrantLock+分段思想。</p><p>主要使用了Unsafe操作中的：</p><ol><li>compareAndSwapObject：通过cas的方式修改对象的属性</li><li>putOrderedObject：并发安全的给数组的某个位置赋值</li><li>getObjectVolatile：并发安全的获取数组某个位置的元素</li></ol><p>分段思想是为了提高ConcurrentHashMap的并发量，分段数越高则支持的最大并发量越高，程序员可以通过concurrencyLevel参数来指定并发量。ConcurrentHashMap的内部类Segment就是用来表示某一个段的。</p><p>每个Segment就是一个小型的HashMap的，当调用ConcurrentHashMap的put方法是，最终会调用到Segment的put方法，而Segment类继承了ReentrantLock，所以Segment自带可重入锁，当调用到Segment的put方法时，会先利用可重入锁加锁，加锁成功后再将待插入的key,value插入到小型HashMap中，插入完成后解锁。</p><h1 id="_17、jdk1-8concurrenthashmap如何保证并发" tabindex="-1"><a class="header-anchor" href="#_17、jdk1-8concurrenthashmap如何保证并发" aria-hidden="true">#</a> 17、jdk1.8ConcurrentHashMap如何保证并发</h1><p>主要利用Unsafe操作+synchronized关键字。</p><p>Unsafe操作的使用仍然和JDK7中的类似，主要负责并发安全的修改对象的属性或数组某个位置的值。</p><p>synchronized主要负责在需要操作某个位置时进行加锁（该位置不为空），比如向某个位置的链表进行插入结点，向某个位置的红黑树插入结点。</p><p>JDK8中其实仍然有分段锁的思想，只不过JDK7中段数是可以控制的，而JDK8中是数组的每一个位置都有一把锁。</p>',59);function b(f,B){const a=p("ExternalLinkIcon");return e(),o("div",null,[d,n("p",null,[m,n("a",h,[v,c(a)]),g]),E])}const y=t(r,[["render",b],["__file","集合类.html.vue"]]);export{y as default};
