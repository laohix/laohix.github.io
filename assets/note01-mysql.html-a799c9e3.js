import{_ as o,r as l,o as i,c,d as s,a as n,b as t,e as a}from"./app-8007fa1b.js";const r="/assets/img001-94197677.png",d="/assets/img057-dea4fba6.png",u="/assets/img002-61cf748a.png",k="/assets/img003-7ce634c8.png",m="/assets/img004-d3ba8f5f.png",v="/assets/img005-9580d445.png",b="/assets/img006-d578e411.png",h="/assets/img007-b53daf1b.png",y="/assets/img008-4b909de5.png",_="/assets/img009-665eb230.png",g="/assets/img010-08fd3fcb.png",w="/assets/img011-0daf4869.png",f="/assets/img012-d12e87d9.png",q="/assets/img013-137da720.png",E="/assets/img014-f73d73be.png",x="/assets/img015-191d9204.png",S="/assets/img016-a644c008.png",L="/assets/img017-5c510202.png",M="/assets/img018-aa887b10.png",T="/assets/img019-3a377935.png",R="/assets/img020-a0cd8156.png",A="/assets/img021-9e842544.png",Q="/assets/img022-e98b3c34.png",O="/assets/img023-f479fcb0.png",C="/assets/img024-ddfba462.png",N="/assets/img025-c7396a05.png",I="/assets/img026-639c51b0.png",B="/assets/img027-e6f2045a.png",D="/assets/img028-7abadaf0.png",p="/assets/img029-927f4b31.png",F="/assets/img030-f5e4c625.png",H="/assets/img031-e2ee3ad8.png",U="/assets/img032-1b4fba41.png",W="/assets/img033-a9fa8c0b.png",Y="/assets/img050-aa100a48.png",V="/assets/img034-387087e9.png",j="/assets/img051-dbcfe753.png",G="/assets/img035-f37189dd.png",P="/assets/img036-f6bfa0d8.png",X="/assets/img037-3074f829.png",J="/assets/img038-a0199cc7.png",K="/assets/img039-adea6817.png",z="/assets/img040-c80df59d.png",Z="/assets/img041-450fa9aa.png",$="/assets/img042-319adaa8.png",nn="/assets/img043-6f058d56.png",sn="/assets/img044-643d83b4.png",an="/assets/img045-09da892e.png",en="/assets/img046-ab038599.png",tn="/assets/img047-e23c5371.png",pn="/assets/img048-b8255e88.png",on="/assets/img049-4ce366bd.png",ln="/assets/img056-5ef3c830.png",cn="/assets/img0058-09677ba1.png",rn="/assets/img0059-49b5c041.png",dn="/assets/img0060-e4c66717.png",un="/assets/img0061-42af7e2b.png",kn="/assets/img0062-ae57e9f6.png",mn="/assets/img0063-b6320a39.png",vn="/assets/img0064-d914392b.png",bn="/assets/img0065-f5a5bb8c.png",hn="/assets/img0066-f25114fc.png",yn="/assets/img0067-8978adf4.png",_n="/assets/img0068-c3b3ccc9.png",gn="/assets/img0069-b01ba04d.png",wn="/assets/img0070-8d56bf76.png",fn="/assets/img0071-50546695.png",qn="/assets/img0072-bca2fef9.png",En="/assets/img0073-6fb39e4d.png",xn={},Sn=a('<h1 id="一、数据库概述" tabindex="-1"><a class="header-anchor" href="#一、数据库概述" aria-hidden="true">#</a> 一、数据库概述</h1><br><h2 id="_1、为什么要使用数据库" tabindex="-1"><a class="header-anchor" href="#_1、为什么要使用数据库" aria-hidden="true">#</a> 1、为什么要使用数据库</h2><p>Java程序在运行过程中，数据在内存中维护。而一旦程序结束，内存释放，内存中所有数据都会丢失。<br> 所以必须使用数据库把数据保存到硬盘上，做永久保存。这个效果我们称之为：持久化。<br> 那么为什么不使用I/O流的方式来做持久化呢？<br> 通过I/O流操作硬盘上的文件读写效率太低。其实数据库表本身就是硬盘上的文件，但由于数据库表中的数据都是结构化的，所以通过数据库来操作效率高很多。<br></p><br><h2 id="_2、mysql简介" tabindex="-1"><a class="header-anchor" href="#_2、mysql简介" aria-hidden="true">#</a> 2、MySQL简介</h2><p>在互联网行业，MySQL数据库毫无疑问已经是最常用的数据库。<br> MySQL数据库由瑞典MySQL AB公司开发。<br> 公司名中的“AB”是瑞典语“aktiebolag”股份公司的首字母缩写。<br> 该公司于2008年1月16号被Sun（Stanford University Network）公司收购。<br> 然而2009年，SUN公司又被Oracle收购。<br> 因此，MySQL数据库现在隶属于Oracle（甲骨文）公司。<br> MySQL中的“My”是其发明者（Michael Widenius，通常称为Monty）根据其女儿的名字来命名的。<br> 对这位发明者来说，MySQL数据库就仿佛是他可爱的女儿。<br><br></p><p>MySQL的优点有很多，其中主要的优势有如下几点：</p><ul><li><strong>可移植性</strong>：MySQL数据库几乎支持所有的操作系统，如Linux、Solaris、FreeBSD、Mac和Windows。</li><li><strong>免费</strong>：MySQL的社区版完全免费，一般中小型网站的开发都选择 MySQL 作为网站数据库。</li><li><strong>开源</strong>：2000 年，MySQL公布了自己的源代码，并采用GPL（GNU General Public License）许可协议，正式进入开源的世界。开源意味着可以让更多人审阅和贡献源代码，可以吸纳更多优秀人才的代码成果。</li><li><strong>关系型数据库</strong>：MySQL可以利用标准SQL语法进行查询和操作。</li><li><strong>速度快、体积小、易使用</strong> ：与其他大型数据库的设置和管理相比，其复杂程度较低，易于学习。MySQL的早期版本（主要使用的是MyISAM引擎）在高并发下显得有些力不从心，随着版本的升级优化（主要使用的是InnoDB引擎），在实践中也证明了高压力下的可用性。从2009年开始，阿里的“去IOE”备受关注（I是IBM，O是Oracle，E是EJB），淘宝DBA团队再次从Oracle转向MySQL，其他使用MySQL数据库的公司还有Facebook、Twitter、YouTube、百度、腾讯、去哪儿、魅族等等，自此，MySQL在市场上占据了很大的份额。</li><li><strong>安全性和连接性</strong>：十分灵活和安全的权限和密码系统，允许基于主机的验证。连接到服务器时，所有的密码传输均采用加密形式，从而保证了密码安全。由于MySQL是网络化的，因此可以在因特网上的任何地方访问，提高数据共享的效率。</li><li><strong>丰富的接口</strong>：提供了用于C、C++、Java、PHP、Python、Ruby和Eiffel、Perl等语言的API。</li><li><strong>灵活</strong>：MySQL并不完美，但是却足够灵活，能够适应高要求的环境。同时，MySQL既可以嵌入到应用程序中，也可以支持数据仓库、内容索引和部署软件、高可用的冗余系统、在线事务处理系统等各种应用类型。</li><li><strong>存储引擎架构</strong>：MySQL最重要、最与众不同的特性，这种架构的设计将查询处理（Query Processing）及其他系统任务（Server Task）和数据的存储/提取相分离。这种处理和存储分离的设计可以在使用时根据性能、特性，以及其他需求来选择数据存储的方式。MySQL中同一个数据库，不同的表格可以选择不同的存储引擎。其中使用最多的是InnoDB 和MyISAM，MySQL5.5之后InnoDB是默认的存储引擎。</li></ul><br><p>针对不同用户，MySQL提供三个不同的版本：</p><ul><li>（1）MySQL Enterprise Server（<strong>企业版</strong>）：能够以更高的性价比为企业提供数据仓库应用，该版本需要付费使用，官方提供电话技术支持。</li><li>（2）MySQL Cluster（<strong>集群版</strong>）：MySQL 集群是 MySQL 适合于分布式计算环境的高可用、高冗余版本。它采用了 NDB Cluster 存储引擎，允许在 1 个集群中运行多个 MySQL 服务器。它不能单独使用，需要在社区版或企业版基础上使用。</li><li>（3）MySQL Community Server（<strong>社区版</strong>）：在开源GPL许可证之下可以自由的使用。该版本完全免费，但是官方不提供技术支持。本书是基于社区版讲解和演示的。在MySQL 社区版开发过程中，同时存在多个发布系列，每个发布处在不同的成熟阶段。</li></ul><br><p>MySQL版本说明：</p><ul><li>MySQL5.7：在MySQL大版本为5的范围内，5.7是最后一个版本。</li><li>MySQL8：相对于5.7有很多重大更新，所以不再以小版本更新，而是作为大版本更新。所以7后面的8不再作为小版本，而是作为大版本出现。</li></ul><br><h1 id="二、mysql数据库安装" tabindex="-1"><a class="header-anchor" href="#二、mysql数据库安装" aria-hidden="true">#</a> 二、MySQL数据库安装</h1><br><h2 id="_1、客户端和服务器" tabindex="-1"><a class="header-anchor" href="#_1、客户端和服务器" aria-hidden="true">#</a> 1、客户端和服务器</h2><ul><li>客户端：为用户提供操作界面</li><li>服务器：通过网络连接，为所有客户端提供服务</li></ul><br><h2 id="_2、使用mysql的总的体系结构" tabindex="-1"><a class="header-anchor" href="#_2、使用mysql的总的体系结构" aria-hidden="true">#</a> 2、使用MySQL的总的体系结构</h2><p><img src="'+r+'" alt="img.png"></p><br><br><p><img src="'+d+'" alt="img.png"></p><br><h2 id="_3、卸载mysql服务器" tabindex="-1"><a class="header-anchor" href="#_3、卸载mysql服务器" aria-hidden="true">#</a> 3、卸载MySQL服务器</h2><blockquote><p>你要是以前安装过，而且现在能用，那就不要卸载，因为我们的重点是 SQL 语句的编写而不是 MySQL 的安装过程。<br> 如果MySQL上的数据仍需使用，则必须提前备份。</p></blockquote><br><p><img src="'+u+'" alt="images"></p><br><p><img src="'+k+'" alt="images"></p><br><p>删除MySQL安装目录和数据目录。如果数据还需要使用则必须提前备份。</p><br><p>清理注册表：</p><br><p><img src="'+m+'" alt="images"></p><br><p><img src="'+v+'" alt="images"></p><br><p><img src="'+b+'" alt="images"></p><br><p><img src="'+h+'" alt="images"></p><br><p>删除path环境变量：</p><br><p><img src="'+y+'" alt="images"></p><br><br><h2 id="_4、安装mysql服务器" tabindex="-1"><a class="header-anchor" href="#_4、安装mysql服务器" aria-hidden="true">#</a> 4、安装MySQL服务器</h2><p>双击运行：mysql-installer-community-8.0.26.0.msi<br></p><br><p><img src="'+_+'" alt="images"></p><br><p><img src="'+g+'" alt="images"></p><br><p><img src="'+w+'" alt="images"></p><br><p><img src="'+f+'" alt="images"></p><br><p><img src="'+q+'" alt="images"></p><br><p><img src="'+E+'" alt="images"></p><br><p><img src="'+x+'" alt="images"></p><br><p><img src="'+S+'" alt="images"></p><br><br><h2 id="_5、mysql实例初始化" tabindex="-1"><a class="header-anchor" href="#_5、mysql实例初始化" aria-hidden="true">#</a> 5、MySQL实例初始化</h2><p><img src="'+L+'" alt="images"></p><br><p><img src="'+M+'" alt="images"></p><br><p><img src="'+T+'" alt="images"></p><br><p><img src="'+R+'" alt="images"></p><br><p><img src="'+A+'" alt="images"></p><br><p><img src="'+Q+'" alt="images"></p><br><p><img src="'+O+'" alt="images"></p><br><p><img src="'+C+'" alt="images"></p><br><p><img src="'+N+'" alt="images"></p><br><br><h2 id="_6、mysql配置环境变量" tabindex="-1"><a class="header-anchor" href="#_6、mysql配置环境变量" aria-hidden="true">#</a> 6、MySQL配置环境变量</h2><p><img src="'+I+'" alt="images"></p><br><p><img src="'+B+'" alt="images"></p><br><p><img src="'+D+'" alt="images"></p><br><p><img src="'+p+'" alt="images"></p><br><br><h2 id="_7、mysql客户端" tabindex="-1"><a class="header-anchor" href="#_7、mysql客户端" aria-hidden="true">#</a> 7、MySQL客户端</h2><br><h3 id="_1命令行客户端" tabindex="-1"><a class="header-anchor" href="#_1命令行客户端" aria-hidden="true">#</a> ①命令行客户端</h3><br><h4 id="_1-使用" tabindex="-1"><a class="header-anchor" href="#_1-使用" aria-hidden="true">#</a> [1]使用</h4><p>只要正确完成以上步骤，命令行客户端就是可用的，无需额外安装。</p><br><p><img src="'+p+`" alt="images"></p><br><br><h4 id="_2-登录" tabindex="-1"><a class="header-anchor" href="#_2-登录" aria-hidden="true">#</a> [2]登录</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 语法格式：mysql -h 主机名 -P 端口号 -u 用户名 -p密码</span>
mysql <span class="token parameter variable">-h</span> localhost <span class="token parameter variable">-P</span> <span class="token number">3306</span> <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span>
Enter password:****
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><table><thead><tr><th>参数</th><th>含义</th><th>含义</th><th>默认值</th></tr></thead><tbody><tr><td>-h</td><td>host</td><td>用来指定MySQL服务器的主机地址</td><td>localhost</td></tr><tr><td>-P</td><td>port</td><td>用来指定MySQL服务器的端口号</td><td>3306</td></tr><tr><td>-u</td><td>user</td><td>用来指定登录MySQL时使用的用户名</td><td> </td></tr><tr><td>-p</td><td>password</td><td>用来指定登录MySQL时使用的密码。<br>最好在下一行输入，让密码隐藏。</td><td> </td></tr></tbody></table><br><p>当参数使用默认值时，这个参数可以省略。所以连接本机3306的MySQL服务器时登录命令可以简化为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span>
Enter password:****
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><br><h4 id="_3-操作" tabindex="-1"><a class="header-anchor" href="#_3-操作" aria-hidden="true">#</a> [3]操作</h4><p>成功登录MySQL服务器之后，使用SQL语句操作MySQL数据库以及里面存储的数据。</p><br><p><img src="`+F+'" alt="images"></p><br><p>命令行客户端的缺点在于没有提示，不够直观，所以往往还需要图形化界面客户端。图形化界面客户端有很多，找到你自己顺手的工具即可，具体用哪个都行，不是每一个都要装。</p><br><h3 id="_2idea客户端" tabindex="-1"><a class="header-anchor" href="#_2idea客户端" aria-hidden="true">#</a> ②IDEA客户端</h3><br><h4 id="_1-连接" tabindex="-1"><a class="header-anchor" href="#_1-连接" aria-hidden="true">#</a> [1]连接</h4><p><img src="'+H+'" alt="images"></p><br><p><img src="'+U+'" alt="images"></p><br><p><img src="'+W+'" alt="images"></p><br><p><img src="'+Y+'" alt="images"></p><br><p><img src="'+V+'" alt="images"></p><br><p><img src="'+j+'" alt="images"></p><br><br><h3 id="_3sqlyog社区版" tabindex="-1"><a class="header-anchor" href="#_3sqlyog社区版" aria-hidden="true">#</a> ③SQLyog社区版</h3><br><h4 id="_1-安装" tabindex="-1"><a class="header-anchor" href="#_1-安装" aria-hidden="true">#</a> [1]安装</h4><p>运行：SQLyog-13.1.7-0.x64Community.exe</p><br><p><img src="'+G+'" alt="images"></p><br><p><img src="'+P+'" alt="images"></p><br><p><img src="'+X+'" alt="images"></p><br><p><img src="'+J+'" alt="images"></p><br><p><img src="'+K+'" alt="images"></p><br><p><img src="'+z+'" alt="images"></p><br><p><img src="'+Z+'" alt="images"></p><br><br><h4 id="_2-连接" tabindex="-1"><a class="header-anchor" href="#_2-连接" aria-hidden="true">#</a> [2]连接</h4><p><img src="'+$+'" alt="images"></p><br><p><img src="'+nn+'" alt="images"></p><br><p><img src="'+sn+'" alt="images"></p><br><p><img src="'+an+'" alt="images"></p><br><p><img src="'+en+'" alt="images"></p><br><p><img src="'+tn+'" alt="images"></p><br><p><img src="'+pn+'" alt="images"></p><br><br><h4 id="_3-操作-1" tabindex="-1"><a class="header-anchor" href="#_3-操作-1" aria-hidden="true">#</a> [3]操作</h4><p><img src="'+on+'" alt="images"></p><br><br><h1 id="三、sql基础语法" tabindex="-1"><a class="header-anchor" href="#三、sql基础语法" aria-hidden="true">#</a> 三、SQL基础语法</h1><br><h2 id="_1、sql简介" tabindex="-1"><a class="header-anchor" href="#_1、sql简介" aria-hidden="true">#</a> 1、SQL简介</h2><p>SQL是结构化查询语言（Structured Query Language）的缩写，是一种用于管理关系型数据库的语言。<br> 它可以用来创建、修改和查询数据库中的表、视图、存储过程和触发器等对象。<br> SQL是一种标准化的语言，被广泛应用于各种关系型数据库管理系统，如MySQL、Oracle、SQL Server等。<br> SQL语言具有简单易学、高效灵活、可扩展性强等特点，是数据管理领域中必不可少的工具之一。<br></p><p><img src="'+ln+`" alt="images"></p><br><h2 id="_2、sql分类" tabindex="-1"><a class="header-anchor" href="#_2、sql分类" aria-hidden="true">#</a> 2、SQL分类</h2><p>SQL (Structured Query Language) 是一种用于管理关系数据库系统 (RDBMS) 的编程语言。根据其用途和特点，SQL 可以分为以下几类：</p><ul><li><strong>DDL</strong> (Data Definition Language <strong>数据定义语言</strong>)：用于定义数据库对象，如表、视图、索引等，常用的语句有 CREATE、ALTER、DROP 等。</li><li><strong>DML</strong> (Data Manipulation Language <strong>数据操作语言</strong>)：用于对数据库中的数据进行操作，如增加、修改、删除等，常用的语句有 INSERT、UPDATE、DELETE 等。</li><li><strong>DQL</strong> (Data Query Language <strong>数据查询语言</strong>)：用于查询数据库中的数据，常用的语句有 SELECT。</li><li><strong>DCL</strong> (Data Control Language <strong>数据控制语言</strong>)：用于控制数据库的访问权限和安全性，如授权、回收权限等，常用的语句有 GRANT、REVOKE 等。</li><li><strong>TCL</strong> (Transaction Control Language <strong>事务控制语言</strong>)：用于控制事务的提交和回滚，常用的语句有 COMMIT、ROLLBACK 等。</li></ul><br><h2 id="_3、sql语法规范" tabindex="-1"><a class="header-anchor" href="#_3、sql语法规范" aria-hidden="true">#</a> 3、SQL语法规范</h2><br><h3 id="_1大小写" tabindex="-1"><a class="header-anchor" href="#_1大小写" aria-hidden="true">#</a> ①大小写</h3><p>SQL 关键词、数据库名、数据库表名、字段名都<strong>不区分大小写</strong>。</p><br><h3 id="_2标识符命名规则" tabindex="-1"><a class="header-anchor" href="#_2标识符命名规则" aria-hidden="true">#</a> ②标识符命名规则</h3><ul><li>可以使用的符号包括： <ul><li>26个大小写英文字母</li><li>数字0-9</li><li>下划线</li></ul></li><li>不能使用其它符号，可以用数字开头，但不能是纯数字</li><li>域内不同名 <ul><li>同一个MySQL服务器上：数据库名必须唯一</li><li>同一个数据库内：表名必须唯一</li><li>同一个表内：字段名必须唯一</li></ul></li></ul><br><h3 id="_3标识符命名规范" tabindex="-1"><a class="header-anchor" href="#_3标识符命名规范" aria-hidden="true">#</a> ③标识符命名规范</h3><ul><li>不建议以数字开头</li><li>因为SQL中不区分大小写，所以建议各个单词以下划线分开</li><li>不建议使用SQL关键词作为标识符（为什么说“不建议”而不是“不允许”呢？因为使用\`符号（可称之为飘号）可以让SQL把关键词当做普通字符串）</li><li>在SQL中使用\`符号（可称之为飘号）把数据库名、表名、字段名引起来，可以避免解析SQL时把标识符当做SQL关键词</li></ul><br><h2 id="_4、sql注释" tabindex="-1"><a class="header-anchor" href="#_4、sql注释" aria-hidden="true">#</a> 4、SQL注释</h2><br><h3 id="_1井号单行注释" tabindex="-1"><a class="header-anchor" href="#_1井号单行注释" aria-hidden="true">#</a> ①井号单行注释</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 单行注释，注释里的内容不会被执行</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> t_emp<span class="token punctuation">(</span>emp_name<span class="token punctuation">,</span> emp_salary<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span> <span class="token number">12345.6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_2双横线单行注释" tabindex="-1"><a class="header-anchor" href="#_2双横线单行注释" aria-hidden="true">#</a> ②双横线单行注释</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 单行注释，注释里的内容不会被执行</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> t_emp<span class="token punctuation">(</span>emp_name<span class="token punctuation">,</span> emp_salary<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span> <span class="token number">12345.6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_3多行注释" tabindex="-1"><a class="header-anchor" href="#_3多行注释" aria-hidden="true">#</a> ③多行注释</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/*
 多行注释，注释里的内容不会被执行
 多行注释，注释里的内容不会被执行
 多行注释，注释里的内容不会被执行
 */</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> t_emp<span class="token punctuation">(</span>emp_name<span class="token punctuation">,</span> emp_salary<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span> <span class="token number">12345.6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="_5、mysql数据类型初步" tabindex="-1"><a class="header-anchor" href="#_5、mysql数据类型初步" aria-hidden="true">#</a> 5、MySQL数据类型初步</h2><br><h3 id="_1概述" tabindex="-1"><a class="header-anchor" href="#_1概述" aria-hidden="true">#</a> ①概述</h3><p>我们现在最重要的并不是学习MySQL全部的数据类型，而应该是学习MySQL最常用的数据类型，然后对基本增删改查操作有了一定基础之后，再学习数据类型进一步的知识作为扩展。</p><ul><li>整数类型：int</li><li>字符串类型： <ul><li>char</li><li>varchar</li></ul></li><li>小数类型：double</li></ul><br><h3 id="_2char类型" tabindex="-1"><a class="header-anchor" href="#_2char类型" aria-hidden="true">#</a> ②char类型</h3><p>char类型是一种固定长度字符串。<br> 什么意思呢？<br> 就是说我们在把一个字段指定为char类型的时候，需要指定这个字段最多允许存放多少个字符：char(M)。<br> 就好比char(4)表示最多存储4个字符，那么当字段值不够4个字符时，会在后面附加空格填充到4个字符。<br> 从而确保这个字段中所有值都是4个字符。这就是所谓的固定长度字符串。<br> 附加的空格在查询的时候会被去掉。<br> M的范围是0~255。当然char(0)这样的字段创建出来也没意义。<br></p><br><h3 id="_3varchar类型" tabindex="-1"><a class="header-anchor" href="#_3varchar类型" aria-hidden="true">#</a> ③varchar类型</h3><p>varchar类型是一种变长字符串。<br> 我们在设定中同样会指定使用varchar类型的字段最多存放多少个字符：varchar(M)。<br> 但和char的区别是，底层存储时并不是使用固定的字节数，而是根据实际存储的数据动态调整。<br> 假设M设定为5：varchar(5)表示该字段最多保存5个字符。<br> 再假设每个字符占一个字节（其实不一定），那么这个字段最多占5个字节。<br> 那么当这个字段实际保存3个字符时，底层实际分配3个字节来存储这3个字符。</p><br><h2 id="_6、数据库操作" tabindex="-1"><a class="header-anchor" href="#_6、数据库操作" aria-hidden="true">#</a> 6、数据库操作</h2><br><h3 id="_1查看所有数据库" tabindex="-1"><a class="header-anchor" href="#_1查看所有数据库" aria-hidden="true">#</a> ①查看所有数据库</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 列出当前数据库服务器上已经创建的所有数据库</span>
<span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_2创建新的数据库" tabindex="-1"><a class="header-anchor" href="#_2创建新的数据库" aria-hidden="true">#</a> ②创建新的数据库</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">database</span> db_school<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_3删除数据库" tabindex="-1"><a class="header-anchor" href="#_3删除数据库" aria-hidden="true">#</a> ③删除数据库</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token keyword">database</span> db_school<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_4指定当前要使用的数据库" tabindex="-1"><a class="header-anchor" href="#_4指定当前要使用的数据库" aria-hidden="true">#</a> ④指定当前要使用的数据库</h3><p>由于一个服务器上可以有很多个数据库，所以我们需要明确指定一个现在要使用的数据库。<br> 如果没有使用use语句，后面针对数据库的操作也没有加“数据库名”的限定，那么会报“ERROR 1046 (3D000): No database selected”（没有选择数据库）<br> 使用完use语句之后，如果接下来的SQL都是针对一个数据库操作的，那就不用重复use了，如果要针对另一个数据库操作，那么要重新use。<br></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">use</span> db_hr<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_5查看当前数据库中的所有数据库表" tabindex="-1"><a class="header-anchor" href="#_5查看当前数据库中的所有数据库表" aria-hidden="true">#</a> ⑤查看当前数据库中的所有数据库表</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h2 id="_7、创建数据库表" tabindex="-1"><a class="header-anchor" href="#_7、创建数据库表" aria-hidden="true">#</a> 7、创建数据库表</h2><br><h3 id="_1基本语法" tabindex="-1"><a class="header-anchor" href="#_1基本语法" aria-hidden="true">#</a> ①基本语法</h3><p><img src="`+cn+`" alt="img.png"></p><br><h3 id="_2主键" tabindex="-1"><a class="header-anchor" href="#_2主键" aria-hidden="true">#</a> ②主键</h3><br><h4 id="_1-提出问题" tabindex="-1"><a class="header-anchor" href="#_1-提出问题" aria-hidden="true">#</a> [1]提出问题</h4><p>为什么需要主键？假设我们要给入学的学生录入信息，同时有两个tom，年龄都是15，录入下表后无法区分：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> t_student<span class="token punctuation">(</span>
    stu_name <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    stu_age <span class="token keyword">int</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p><img src="`+rn+'" alt="img.png"></p><br><p>所以我们需要在创建数据库表时，用主键作为每一条记录的<strong>唯一标识</strong>。</p><br><h4 id="_2-主键的语法规则" tabindex="-1"><a class="header-anchor" href="#_2-主键的语法规则" aria-hidden="true">#</a> [2]主键的语法规则</h4><p>我们对主键的要求是：</p><ul><li>非空：在数据库表中主键字段非常重要，它是区分每一条记录的根本依据，所以绝对不能为空。</li><li>值唯一：为了能够区分每一条记录，所以主键值在数据库表中必须是唯一的。</li><li>设置唯一：一个表中主键只能有一个</li></ul><h4 id="_3-主键的业务规则" tabindex="-1"><a class="header-anchor" href="#_3-主键的业务规则" aria-hidden="true">#</a> [3]主键的业务规则</h4><ul><li>不可修改：作为每一条记录的唯一标识，一旦修改就可能导致这条记录找不到。但是这个要求是对我们编写代码的要求，MySQL没有这个限制。</li><li>不要使用业务字段作为主键： 什么是业务字段呢？在我们的项目中所有描述现实世界的都是业务字段。例如：学生姓名、年龄、性别、籍贯、身高、体重……<br> 为什么不能使用业务字段作为主键呢？<br> 即使使用唯一性的业务字段作为主键也不建议，因为业务字段可能为空，也可能删除导致表没有主键。<br></li></ul><br><h4 id="_4-设定主键的语法" tabindex="-1"><a class="header-anchor" href="#_4-设定主键的语法" aria-hidden="true">#</a> [4]设定主键的语法</h4><p><img src="'+dn+`" alt="img.png"></p><br><h4 id="_5-联合主键" tabindex="-1"><a class="header-anchor" href="#_5-联合主键" aria-hidden="true">#</a> [5]联合主键</h4><p>大部分情况下，我们使用一个字段作为主键就够了。但是某些情况下，我们会使用多个字段共同构成主键。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 创建老师表  </span>
<span class="token keyword">create</span> <span class="token keyword">table</span> t_teacher<span class="token punctuation">(</span>  
    teacher_id <span class="token keyword">int</span> <span class="token keyword">auto_increment</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">,</span>  
    teacher_name <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>  
<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token comment"># 创建学生表  </span>
<span class="token keyword">create</span> <span class="token keyword">table</span> t_student<span class="token punctuation">(</span>  
    stu_id <span class="token keyword">int</span> <span class="token keyword">auto_increment</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">,</span>  
    stu_name <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>  
<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token comment"># 表达多对多关联关系时，需要一张额外的中间表  </span>
<span class="token comment"># 此时我们把 teacher_id 和 stu_id 的组合作为主键，这就是联合主键  </span>
<span class="token comment"># 在联合主键中，单独来看，每个字段值都可以重复，但是参与联合的所有字段值的组合不能重复  </span>
<span class="token keyword">create</span> <span class="token keyword">table</span> inner_teacher_student<span class="token punctuation">(</span>  
    teacher_id <span class="token keyword">int</span><span class="token punctuation">,</span>  
    stu_id <span class="token keyword">int</span><span class="token punctuation">,</span>  
    <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>teacher_id<span class="token punctuation">,</span> stu_id<span class="token punctuation">)</span>  
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_3主键自增" tabindex="-1"><a class="header-anchor" href="#_3主键自增" aria-hidden="true">#</a> ③主键自增</h3><p>为了保证主键值的唯一性（不重复），所以在数据库表层面为每一条新增的记录生成主键是最好的办法。<br> 如果由程序员在Java程序中生成主键值，那么并发场景下A线程计算出来是5，B线程也计算出来是5，就重复了。<br> 具体来说，在创建表时可以通过auto_increment关键词设置某个字段的值由MySQL生成，程序员不必指定。<br></p><p><img src="`+un+`" alt="img.png"></p><br><h3 id="_4查看表结构" tabindex="-1"><a class="header-anchor" href="#_4查看表结构" aria-hidden="true">#</a> ④查看表结构</h3><p>desc是describe的缩写：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">desc</span> 表名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h2 id="_8、基础增删改查操作" tabindex="-1"><a class="header-anchor" href="#_8、基础增删改查操作" aria-hidden="true">#</a> 8、基础增删改查操作</h2><p>先创建库和表做准备：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">database</span> db_hr<span class="token punctuation">;</span>
<span class="token keyword">use</span> db_hr<span class="token punctuation">;</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> t_emp<span class="token punctuation">(</span>
    id <span class="token keyword">int</span> <span class="token keyword">auto_increment</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">,</span>
    emp_name <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    emp_age <span class="token keyword">int</span><span class="token punctuation">,</span>
    emp_salary <span class="token keyword">double</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_1insert语句" tabindex="-1"><a class="header-anchor" href="#_1insert语句" aria-hidden="true">#</a> ①insert语句</h3><p><img src="`+kn+`" alt="img.png"></p><br><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 插入一条数据，主键因为是自增的，所以不必指定数据了</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> t_emp<span class="token punctuation">(</span>emp_name<span class="token punctuation">,</span> emp_age<span class="token punctuation">,</span> emp_salary<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">5000.00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># 插入多条数据</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> t_emp<span class="token punctuation">(</span>emp_name<span class="token punctuation">,</span> emp_age<span class="token punctuation">,</span> emp_salary<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&quot;jerry&quot;</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">6000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&quot;bob&quot;</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">3400.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&quot;harry&quot;</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">,</span> <span class="token number">6000.00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_2delete语句" tabindex="-1"><a class="header-anchor" href="#_2delete语句" aria-hidden="true">#</a> ②delete语句</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 删除数据库表中的所有数据，但是这样做太危险了，几乎不可能发生在实际项目中</span>
<span class="token keyword">delete</span> <span class="token keyword">from</span> t_emp<span class="token punctuation">;</span>

<span class="token comment"># 根据查询条件指定要删除的记录，通常是根据主键来删除。where关键词后面通过表达式来构建查询条件，后面会详细讲</span>
<span class="token keyword">delete</span> <span class="token keyword">from</span> t_emp <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_3update语句" tabindex="-1"><a class="header-anchor" href="#_3update语句" aria-hidden="true">#</a> ③update语句</h3><p>在指定数据库表中修改指定字段</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 把 t_emp 表中的 emp_salary 字段设置为新值，但是这样会影响到所有记录</span>
<span class="token keyword">update</span> t_emp <span class="token keyword">set</span> emp_salary<span class="token operator">=</span><span class="token number">66666.66</span><span class="token punctuation">;</span>

<span class="token comment"># 使用 where 子句设置查询条件，有针对性的修改</span>
<span class="token keyword">update</span> t_emp <span class="token keyword">set</span> emp_salary<span class="token operator">=</span><span class="token number">66666.66</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>

<span class="token comment"># 涉及多个字段，用逗号分开  </span>
<span class="token keyword">update</span> t_emp <span class="token keyword">set</span> emp_salary<span class="token operator">=</span><span class="token number">400</span><span class="token punctuation">,</span>emp_name<span class="token operator">=</span><span class="token string">&#39;happy100&#39;</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">;</span>  
  
<span class="token comment"># 在原来工资的基础上+200  </span>
<span class="token keyword">update</span> t_emp <span class="token keyword">set</span> emp_salary<span class="token operator">=</span>emp_salary<span class="token operator">+</span><span class="token number">200</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_4select语句" tabindex="-1"><a class="header-anchor" href="#_4select语句" aria-hidden="true">#</a> ④select语句</h3><p>在指定数据库表中查询指定字段</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 查询 t_emp 表中的全部记录，每条记录都显示全部字段</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_emp<span class="token punctuation">;</span>

<span class="token comment"># 查询 t_emp 表中的全部记录，每条记录只显示指定字段</span>
<span class="token keyword">select</span> id<span class="token punctuation">,</span> emp_name<span class="token punctuation">,</span> emp_salary <span class="token keyword">from</span> t_emp<span class="token punctuation">;</span>

<span class="token comment"># 查询 t_emp 表中符合查询条件的记录，每条记录只显示指定字段</span>
<span class="token keyword">select</span> id<span class="token punctuation">,</span> emp_name<span class="token punctuation">,</span> emp_salary <span class="token keyword">from</span> t_emp <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><blockquote><p>实际开发中不要采用select *的写法，因为这样不知道具体查询了哪些字段。<br> 时间一长，别说别人，自己都不记得。</p></blockquote><br><h2 id="_9、运算符与表达式" tabindex="-1"><a class="header-anchor" href="#_9、运算符与表达式" aria-hidden="true">#</a> 9、运算符与表达式</h2><br><h3 id="_1算术运算符" tabindex="-1"><a class="header-anchor" href="#_1算术运算符" aria-hidden="true">#</a> ①算术运算符</h3><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>+</td><td>在MySQL中，加号就是求和，没有字符串拼接的功能</td></tr><tr><td>-</td><td>做减法</td></tr><tr><td>*</td><td>做乘法</td></tr><tr><td>/</td><td>做除法</td></tr><tr><td>div</td><td>做除法，但只保留商的整数部分</td></tr><tr><td>%</td><td>取模</td></tr><tr><td>mod</td><td>取模</td></tr></tbody></table><br><p><strong>注意</strong>：MySQL中没有+=这样的写法。</p><h3 id="_2比较运算符" tabindex="-1"><a class="header-anchor" href="#_2比较运算符" aria-hidden="true">#</a> ②比较运算符</h3><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;=</td><td>大于或等于</td></tr><tr><td>&lt;=</td><td>小于或等于</td></tr><tr><td>=</td><td>等于</td></tr><tr><td>!=</td><td>不等于</td></tr><tr><td>&lt;&gt;</td><td>不等于</td></tr></tbody></table><br><p><strong>注意</strong>：=是做是否相等的判断，不是赋值。<br><strong>注意</strong>：不能写 xxx = null，此时要写 xxx is null<br><strong>注意</strong>：!=或&lt;&gt;也不能用于对null值进行判断，而是要写成 xxx is not null<br></p><h3 id="_3区间或集合范围比较运算符" tabindex="-1"><a class="header-anchor" href="#_3区间或集合范围比较运算符" aria-hidden="true">#</a> ③区间或集合范围比较运算符</h3><ul><li>查询在区间范围的记录：between x and y</li><li>查询不在区间范围的记录：not between x and y</li><li>查询在集合范围的记录：in (x,y,z)</li><li>查询不在集合范围的记录：not in (x,y,z)</li></ul><h3 id="_4模糊匹配比较运算符" tabindex="-1"><a class="header-anchor" href="#_4模糊匹配比较运算符" aria-hidden="true">#</a> ④模糊匹配比较运算符</h3><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>%</td><td>表示这里可以匹配任意数量的任意字符</td></tr><tr><td>_</td><td>每一个下划线匹配一个任意字符</td></tr></tbody></table><h3 id="_5逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_5逻辑运算符" aria-hidden="true">#</a> ⑤逻辑运算符</h3><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑与</td></tr><tr><td>and</td><td>逻辑与</td></tr><tr><td>||</td><td>逻辑或</td></tr><tr><td>or</td><td>逻辑或</td></tr><tr><td>!</td><td>逻辑非</td></tr><tr><td>xor</td><td>逻辑异或</td></tr></tbody></table><h3 id="_6关于null值" tabindex="-1"><a class="header-anchor" href="#_6关于null值" aria-hidden="true">#</a> ⑥关于null值</h3><h4 id="_1-null值的判断" tabindex="-1"><a class="header-anchor" href="#_1-null值的判断" aria-hidden="true">#</a> [1]null值的判断</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>xxx <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span>
xxx <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span>
xxx <span class="token operator">&lt;=&gt;</span> <span class="token boolean">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-null值的计算" tabindex="-1"><a class="header-anchor" href="#_2-null值的计算" aria-hidden="true">#</a> [2]null值的计算</h4><p>调用ifnull()函数，在某条记录中某个字段值为null时，使用替代值来计算：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>ifnull<span class="token punctuation">(</span>xxx<span class="token punctuation">,</span>替代值<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="四、sql进阶语法" tabindex="-1"><a class="header-anchor" href="#四、sql进阶语法" aria-hidden="true">#</a> 四、SQL进阶语法</h1><br><h2 id="_1、sql查询语句的各子句" tabindex="-1"><a class="header-anchor" href="#_1、sql查询语句的各子句" aria-hidden="true">#</a> 1、SQL查询语句的各子句</h2><ul><li>(1)<strong>select</strong></li><li>(2)<strong>from</strong>：从哪些表中筛选</li><li>(3)<strong>inner</strong> | <strong>left</strong> | <strong>right</strong> ... <strong>join</strong> <strong>on</strong>：关联多表查询时，去除笛卡尔积</li><li>(4)<strong>where</strong>：从表中筛选的条件</li><li>(5)<strong>group by</strong>：分组依据</li><li>(6)<strong>having</strong>：在分组统计结果中再次筛选（with rollup)</li><li>(7)<strong>order by</strong>：排序</li><li>(8)<strong>limit</strong>：分页</li></ul><p>必须按照从(1)到(8)的顺序编写各子句。</p><h2 id="_2、distinct去重" tabindex="-1"><a class="header-anchor" href="#_2、distinct去重" aria-hidden="true">#</a> 2、distinct去重</h2><br><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 使用 distinct 关键字对查询结果去重，重复的查询结果记录只保留一条  </span>
<span class="token keyword">select</span> <span class="token keyword">distinct</span> emp_name<span class="token punctuation">,</span> emp_salary<span class="token punctuation">,</span> emp_subject <span class="token keyword">from</span> t_emp <span class="token keyword">where</span> emp_id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="_3、关联查询" tabindex="-1"><a class="header-anchor" href="#_3、关联查询" aria-hidden="true">#</a> 3、关联查询</h2><br><blockquote><p>表和表之间，通过字段之间的关联可以设定表之间的关联关系：<br> ❤一对一：一个人和他的身份证号之间的关系。<br> ❤一对多：客户和订单之间的关系。<br> ❤多对多：老师和学生之间的关系。<br></p></blockquote><br><p>当表和表之间建立了关联关系，那么我们很自然的就想知道和A表关联的B表中的记录信息，例如：<br> 查询工资最高的员工所在部门的名称。</p><br><h3 id="_1概念" tabindex="-1"><a class="header-anchor" href="#_1概念" aria-hidden="true">#</a> ①概念</h3><p>当A表通过某个字段关联到B表时，我们说A表和B表之间建立了关联关系。<br><br></p><p>当我们根据表之间的关联关系，在查询中涉及多张表时，就是关联查询。<br><br></p><p>比如：员工表通过部门编号关联部门表。<br><br></p><p>关联字段需要满足以下条件：</p><ul><li>逻辑意义一样：比如t_emp表中使用dept_id关联t_dept表中的id</li><li>数据类型一样</li></ul><br><p>以下两方面不要求：</p><ul><li>字段名不要求一样</li><li>创建外键约束不要求</li></ul><h3 id="_2关联查询的各种情况" tabindex="-1"><a class="header-anchor" href="#_2关联查询的各种情况" aria-hidden="true">#</a> ②关联查询的各种情况</h3><p><img src="`+mn+`" alt="img.png"></p><br><h3 id="_3关联查询的语法要求" tabindex="-1"><a class="header-anchor" href="#_3关联查询的语法要求" aria-hidden="true">#</a> ③关联查询的语法要求</h3><p>联合查询必须写关联条件，关联条件的个数 = n - 1。n是联合查询的表的数量。<br></p><ul><li>如果2个表一起联合查询，关联条件数量是1，</li><li>如果3个表一起联合查询，关联条件数量是2，</li><li>如果4个表一起联合查询，关联条件数量是3，</li><li>以此类推。。。。 如果不指定连接条件，就会出现笛卡尔积现象，这是应该避免的。<br> 所谓笛卡尔积就A表中每条记录都关联B表中的每条记录，既不符合逻辑，又会导致查询结果数据量暴增。<br><br></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 笛卡尔积：A 表中每一条记录都和 B 表中的每一条记录匹配，  </span>
<span class="token comment"># 查询结果数量=A表记录数×B表记录数  </span>
<span class="token comment"># 危害1：记录全量匹配相乘导致记录数相乘，数据量暴增  </span>
<span class="token comment"># 危害2：数据之间组合的关系不符合数据本身的逻辑关系  </span>
<span class="token keyword">select</span> t_emp<span class="token punctuation">.</span>emp_name<span class="token punctuation">,</span> t_dept<span class="token punctuation">.</span>dept_id <span class="token keyword">from</span> t_emp<span class="token punctuation">,</span>t_dept<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关联条件可以用on子句编写，也可以写到where中。<br> 但是建议用on单独编写，可读性更好。<br> 每一个join后面都要加on子句：</p><ul><li>A inner|left|right join B on 条件</li><li>A inner|left|right join B on 条件 inner|left|right jon C on 条件</li></ul><h3 id="_4sql实现" tabindex="-1"><a class="header-anchor" href="#_4sql实现" aria-hidden="true">#</a> ④SQL实现</h3><h4 id="_1-内连接" tabindex="-1"><a class="header-anchor" href="#_1-内连接" aria-hidden="true">#</a> [1]内连接</h4><ul><li>语法：A表 inner join B表 on 连接条件</li><li>执行结果：A表 ∩ B表</li></ul><br><p><img src="`+vn+`" alt="img.png"></p><br><p>如果遇到：“Column &#39;did&#39; in field list is ambiguous”的错误提示，就是说两张表的同名字段必须加别名。</p><br><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 写法二：内连接  </span>
<span class="token comment"># MySQL 执行这条 SQL 语句时内部先做笛卡尔积，关联所有记录  </span>
<span class="token comment"># 然后再使用下面的连接条件在笛卡尔积的基础上进行筛选  </span>
<span class="token comment"># t_emp.dept_id = t_dept.dept_id 含义：员工表的部门 id 关联部门表的部门 id# 把符合连接条件的记录作为查询结果  </span>
<span class="token comment"># 员工表没有显示的数据：dept_id 为 null 的数据（不满足连接条件的数据）  </span>
<span class="token comment"># 部门表没有显示的数据：dept_id 没有在 t_emp 表中出现过的记录（不满足连接条件的数据）  </span>
<span class="token comment"># 内连接的特点：参与连接的表都只采纳“满足连接条件”的记录  </span>
<span class="token keyword">select</span> emp_id<span class="token punctuation">,</span> emp_name<span class="token punctuation">,</span> t_dept<span class="token punctuation">.</span>dept_id<span class="token punctuation">,</span> dept_name  
<span class="token keyword">from</span> t_emp  
         <span class="token keyword">inner</span> <span class="token keyword">join</span> t_dept <span class="token keyword">on</span> t_emp<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> t_dept<span class="token punctuation">.</span>dept_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 为了简化 SQL 语句，MySQL 允许我们给表设置别名  </span>
<span class="token keyword">select</span> emp_id<span class="token punctuation">,</span> emp_name<span class="token punctuation">,</span> d<span class="token punctuation">.</span>dept_id<span class="token punctuation">,</span> dept_name  
<span class="token keyword">from</span> t_emp <span class="token keyword">as</span> e  
         <span class="token keyword">inner</span> <span class="token keyword">join</span> t_dept <span class="token keyword">as</span> d <span class="token keyword">on</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>dept_id<span class="token punctuation">;</span>  
  
<span class="token keyword">select</span> emp_id<span class="token punctuation">,</span> emp_name<span class="token punctuation">,</span> d<span class="token punctuation">.</span>dept_id<span class="token punctuation">,</span> dept_name  
<span class="token keyword">from</span> t_emp e  
         <span class="token keyword">inner</span> <span class="token keyword">join</span> t_dept d <span class="token keyword">on</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>dept_id<span class="token punctuation">;</span>  
  
<span class="token comment"># 字段也可以设置别名（as 也可以省略）  </span>
<span class="token comment"># 字段别名加不加引号都行  </span>
<span class="token keyword">select</span> emp_id <span class="token keyword">as</span> <span class="token string">&quot;员工编号&quot;</span><span class="token punctuation">,</span> emp_name <span class="token keyword">as</span> <span class="token string">&quot;员工姓名&quot;</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>dept_id <span class="token string">&quot;部门编号&quot;</span><span class="token punctuation">,</span> dept_name 部门名称  
<span class="token keyword">from</span> t_emp e  
         <span class="token keyword">inner</span> <span class="token keyword">join</span> t_dept d <span class="token keyword">on</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>dept_id<span class="token punctuation">;</span>  
  
<span class="token comment"># 表的别名不能加引号  </span>
<span class="token comment"># [42000][1064] You have an error in your SQL syntax;  </span>
<span class="token comment"># check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;&quot;e&quot; inner join t_dept &quot;d&quot; on e.dept_id = d.dept_id&#39; at line 2  </span>
<span class="token keyword">select</span> emp_id<span class="token punctuation">,</span> emp_name<span class="token punctuation">,</span> d<span class="token punctuation">.</span>dept_id<span class="token punctuation">,</span> dept_name  
<span class="token keyword">from</span> t_emp <span class="token string">&quot;e&quot;</span>  
         <span class="token keyword">inner</span> <span class="token keyword">join</span> t_dept <span class="token string">&quot;d&quot;</span> <span class="token keyword">on</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>dept_id<span class="token punctuation">;</span>  
<span class="token keyword">select</span> emp_id<span class="token punctuation">,</span> emp_name<span class="token punctuation">,</span> d<span class="token punctuation">.</span>dept_id<span class="token punctuation">,</span> dept_name  
<span class="token keyword">from</span> t_emp <span class="token string">&#39;e&#39;</span>  
         <span class="token keyword">inner</span> <span class="token keyword">join</span> t_dept <span class="token string">&#39;d&#39;</span> <span class="token keyword">on</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>dept_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="_2-左外连接" tabindex="-1"><a class="header-anchor" href="#_2-左外连接" aria-hidden="true">#</a> [2]左外连接</h4><ul><li>语法：A表 left join B表 on 连接条件</li><li>执行结果： <ul><li>A表全部</li><li>A表 - A∩B</li></ul></li></ul><br><p><img src="`+bn+'" alt="img.png"></p><br><p><img src="'+hn+'" alt="img.png"><br></p><h4 id="_3-右外连接" tabindex="-1"><a class="header-anchor" href="#_3-右外连接" aria-hidden="true">#</a> [3]右外连接</h4><ul><li>语法：A表 right join B表 on 连接条件</li><li>执行结果： <ul><li>B表全部</li><li>B表 - A∩B</li></ul></li></ul><br><p><img src="'+yn+'" alt="img.png"></p><br><p><img src="'+_n+'" alt="img.png"></p><br><h4 id="_4-全外连接" tabindex="-1"><a class="header-anchor" href="#_4-全外连接" aria-hidden="true">#</a> [4]全外连接</h4><ul><li>语法：full outer join ... on，但是MySQL不支持这个关键字，MySQL使用union（合并）结果的方式代替</li><li>执行结果：A表 ∪ B表</li><li>MySQL替代方案：A表查询语句 union B表查询语句</li></ul><br><p>union的语法细节：</p><ul><li>参与union的查询语句，输出的字段必须是一样的</li><li>UNION ALL合并不去重</li><li>UNION合并且去重</li></ul><br><p><img src="'+gn+`" alt="img.png"></p><br><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#查询所有员工和所有部门，包括没有指定部门的员工和没有分配员工的部门。 </span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_employee <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> t_department 
<span class="token keyword">ON</span> t_employee<span class="token punctuation">.</span>did <span class="token operator">=</span> t_department<span class="token punctuation">.</span>did

<span class="token keyword">UNION</span> 

<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_employee <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> t_department 
<span class="token keyword">ON</span> t_employee<span class="token punctuation">.</span>did <span class="token operator">=</span> t_department<span class="token punctuation">.</span>did<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p><img src="`+wn+`" alt="img.png"></p><br><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#查询那些没有分配部门的员工和没有指定员工的部门，即A表和B表在对方那里找不到对应记录的数据。</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> t_employee <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> t_department
<span class="token keyword">ON</span> t_employee<span class="token punctuation">.</span>did <span class="token operator">=</span> t_department<span class="token punctuation">.</span>did
<span class="token keyword">WHERE</span> t_employee<span class="token punctuation">.</span>did <span class="token operator">IS</span> <span class="token boolean">NULL</span>

<span class="token keyword">UNION</span> 

<span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> t_employee <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> t_department
<span class="token keyword">ON</span> t_employee<span class="token punctuation">.</span>did <span class="token operator">=</span> t_department<span class="token punctuation">.</span>did
<span class="token keyword">WHERE</span> t_employee<span class="token punctuation">.</span>did <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="_5-自连接" tabindex="-1"><a class="header-anchor" href="#_5-自连接" aria-hidden="true">#</a> [5]自连接</h4><p>一张表自己和自己关联，物理上来说是同一张表，逻辑上当作两张表来写SQL。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/*
分析表结构：t_employee表
mid：是表示存储员工的领导编号。即该员工归谁管。领导编号其实就是“领导”作为员工身份的员工编号
   例如：eid为3的员工邓超远，他的mid是7，表示他的领导是员工编号为7的员工。
   eid为7的员工是贾宝玉，他的eid是7，贾宝玉作为员工来说，他的编号是7。

mid的取值范围受到eid字段的限制。mid的值选择必须是eid现有值范围。

可以理解为mid和eid是关联字段，如果要建外键，可以在mid字段上建外键。
foreign key(mid) references t_employee(eid)   

此时t_employee既是子表也是父表。
员工表t_employee建立了外键：
CONSTRAINT \`t_employee_ibfk_3\` FOREIGN KEY (\`mid\`) REFERENCES \`t_employee\` (\`eid\`) ON DELETE SET NULL ON UPDATE CASCADE
*/</span>

<span class="token comment">#查询每一个员工自己的编号、名字、薪资和他的领导的编号、姓名、薪资。</span>
<span class="token comment">#把t_employee当成两张表，通过取别名的方式</span>
<span class="token comment">#t_employee AS emp 把员工表 当成员工表</span>
<span class="token comment"># t_employee AS mgr 把员工表  当成存储领导信息的领导表</span>
<span class="token comment">#emp.mid = mgr.eid; 员工表的领导编号就是领导表的员工编号</span>
<span class="token keyword">SELECT</span> emp<span class="token punctuation">.</span>eid<span class="token punctuation">,</span>emp<span class="token punctuation">.</span>ename<span class="token punctuation">,</span>emp<span class="token punctuation">.</span>salary<span class="token punctuation">,</span>  mgr<span class="token punctuation">.</span>eid<span class="token punctuation">,</span>mgr<span class="token punctuation">.</span>ename<span class="token punctuation">,</span>mgr<span class="token punctuation">.</span>salary
<span class="token keyword">FROM</span> t_employee <span class="token keyword">AS</span> emp <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> t_employee <span class="token keyword">AS</span> mgr
<span class="token keyword">ON</span> emp<span class="token punctuation">.</span>mid <span class="token operator">=</span> mgr<span class="token punctuation">.</span>eid<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="_6-小结" tabindex="-1"><a class="header-anchor" href="#_6-小结" aria-hidden="true">#</a> [6]小结</h4><p><img src="`+fn+'" alt="img.png"></p><br><h2 id="_4、分组与聚合查询" tabindex="-1"><a class="header-anchor" href="#_4、分组与聚合查询" aria-hidden="true">#</a> 4、分组与聚合查询</h2><br><h3 id="_1分组的概念" tabindex="-1"><a class="header-anchor" href="#_1分组的概念" aria-hidden="true">#</a> ①分组的概念</h3><p>根据某个（或某几个）字段的值，把查询结果分组，指定字段的值相同的划分到同一组。<br> 例如：根据部门id分组<br></p><p><img src="'+qn+`" alt="img.png"></p><br><h3 id="_2聚合的概念" tabindex="-1"><a class="header-anchor" href="#_2聚合的概念" aria-hidden="true">#</a> ②聚合的概念</h3><p>分组之后，一个组内很可能包含很多条数据，而最终的查询结果中，一个组只生成一条记录。<br> 所以问题来了，组内多条记录怎么压缩成一条？<br> 两个办法：</p><ul><li>情况一：某个字段在组内所有记录中的值都是一样的，那就可以直接用。</li><li>情况二：使用聚合函数。</li></ul><br><h3 id="_3练习案例一" tabindex="-1"><a class="header-anchor" href="#_3练习案例一" aria-hidden="true">#</a> ③练习案例一</h3><p>目标：查询各部门员工的平均工资。<br></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>emp_salary<span class="token punctuation">)</span><span class="token punctuation">,</span> dept_id <span class="token keyword">from</span> t_emp <span class="token keyword">group</span> <span class="token keyword">by</span> dept_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_4练习案例二" tabindex="-1"><a class="header-anchor" href="#_4练习案例二" aria-hidden="true">#</a> ④练习案例二</h3><p>目标：得到各部门平均工资之后显示合计数值</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>emp_salary<span class="token punctuation">)</span><span class="token punctuation">,</span> dept_id <span class="token keyword">from</span> t_emp <span class="token keyword">group</span> <span class="token keyword">by</span> dept_id <span class="token keyword">with rollup</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_5练习案例三" tabindex="-1"><a class="header-anchor" href="#_5练习案例三" aria-hidden="true">#</a> ⑤练习案例三</h3><p>目标：先按照部门分组，在部门分组结果内再按照专业分组</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>emp_salary<span class="token punctuation">)</span><span class="token punctuation">,</span> emp_subject<span class="token punctuation">,</span> dept_id  
<span class="token keyword">from</span> t_emp  
<span class="token keyword">group</span> <span class="token keyword">by</span> dept_id<span class="token punctuation">,</span> emp_subject<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6练习案例四" tabindex="-1"><a class="header-anchor" href="#_6练习案例四" aria-hidden="true">#</a> ⑥练习案例四</h3><p>目标：查询各部门平均工资，要求显示部门名称。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>emp_salary<span class="token punctuation">)</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>dept_id<span class="token punctuation">,</span> dept_name  
<span class="token keyword">from</span> t_emp e  
         <span class="token keyword">left</span> <span class="token keyword">join</span> t_dept d <span class="token keyword">on</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>dept_id  
<span class="token keyword">group</span> <span class="token keyword">by</span> dept_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7练习案例五" tabindex="-1"><a class="header-anchor" href="#_7练习案例五" aria-hidden="true">#</a> ⑦练习案例五</h3><p>关于分组、聚合操作时涉及的查询条件，原则是：能在分组、聚合操作前执行的查询条件就在操作前执行。因为查询条件把不满足条件的数据过滤掉之后，分组、聚合操作运算量更小，效率更高。</p><ul><li>分组、聚合操作前执行的查询条件：where子句</li><li>分组、聚合操作后执行的查询条件：having子句</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 分组、聚合操作前过滤数据：针对所有女员工数据根据部门 id 分组  </span>
<span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>emp_salary<span class="token punctuation">)</span><span class="token punctuation">,</span> dept_id<span class="token punctuation">,</span> emp_gender  
<span class="token keyword">from</span> t_emp  
<span class="token keyword">where</span> emp_gender <span class="token operator">=</span> <span class="token string">&#39;female&#39;</span>  
<span class="token keyword">group</span> <span class="token keyword">by</span> dept_id<span class="token punctuation">;</span>  
  
<span class="token comment"># 分组、聚合操作后过滤数据：显示平均工资大于4000的聚合结果  </span>
<span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>emp_salary<span class="token punctuation">)</span> emp_avg_salary<span class="token punctuation">,</span> dept_id  
<span class="token keyword">from</span> t_emp  
<span class="token keyword">group</span> <span class="token keyword">by</span> dept_id  
<span class="token keyword">having</span> emp_avg_salary <span class="token operator">&gt;</span> <span class="token number">4000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5、子查询" tabindex="-1"><a class="header-anchor" href="#_5、子查询" aria-hidden="true">#</a> 5、子查询</h2><br><h3 id="_1概念-1" tabindex="-1"><a class="header-anchor" href="#_1概念-1" aria-hidden="true">#</a> ①概念</h3><p>嵌套在另一个SQL语句中的查询。select、update、delete、insert、create等语句都可以嵌套子查询。</p><br><h3 id="_2select嵌套子查询" tabindex="-1"><a class="header-anchor" href="#_2select嵌套子查询" aria-hidden="true">#</a> ②select嵌套子查询</h3><br><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 需求：计算每个员工的工资和所有员工平均工资的差值</span>
<span class="token keyword">select</span> emp_id<span class="token punctuation">,</span>   
       emp_name<span class="token punctuation">,</span>   
       emp_salary<span class="token punctuation">,</span>   
       emp_salary <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>emp_salary<span class="token punctuation">)</span> <span class="token keyword">from</span> t_emp<span class="token punctuation">)</span> difference
<span class="token keyword">from</span> t_emp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_3where嵌套子查询" tabindex="-1"><a class="header-anchor" href="#_3where嵌套子查询" aria-hidden="true">#</a> ③where嵌套子查询</h3><p>where子句中嵌入子查询肯定是作为查询条件。所以子查询部分需要配合各种表达式。此时需要考虑一个因素：子查询返回的数据是一个值还是多个值？</p><ul><li>子查询结果：单列单个值——直接使用比较运算符，如“&lt;”、“&lt;=”、“&gt;”、“&gt;=”、“=”、“!=”等与子查询结果进行比较。</li><li>子查询结果：单列多个值 <ul><li>可以使用比较运算符IN或NOT IN进行比较。</li><li>可以使用比较运算符, 如“&lt;”、“&lt;=”、“&gt;”、“&gt;=”、“=”、“!=”等搭配ANY、SOME、ALL等关键字与查询结果进行比较。</li></ul></li></ul><br><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 查询工资最高的员工工资和姓名</span>
<span class="token keyword">SELECT</span> ename<span class="token punctuation">,</span>salary <span class="token keyword">FROM</span> t_employee <span class="token keyword">WHERE</span> salary <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_employee<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># 在“t_employee”表中查询和“白露”，“谢吉娜”同一部门的员工姓名和电话。</span>
<span class="token keyword">SELECT</span> ename<span class="token punctuation">,</span>tel<span class="token punctuation">,</span>did
<span class="token keyword">FROM</span> t_employee
<span class="token keyword">WHERE</span> did <span class="token operator">IN</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> did <span class="token keyword">FROM</span> t_employee <span class="token keyword">WHERE</span> ename<span class="token operator">=</span><span class="token string">&#39;白露&#39;</span> <span class="token operator">||</span> ename<span class="token operator">=</span><span class="token string">&#39;谢吉娜&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> ename<span class="token punctuation">,</span>tel<span class="token punctuation">,</span>did
<span class="token keyword">FROM</span> t_employee
<span class="token keyword">WHERE</span> did <span class="token operator">=</span> <span class="token keyword">ANY</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> did <span class="token keyword">FROM</span> t_employee <span class="token keyword">WHERE</span> ename<span class="token operator">=</span><span class="token string">&#39;白露&#39;</span> <span class="token operator">||</span> ename<span class="token operator">=</span><span class="token string">&#39;谢吉娜&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># 在“t_employee”表中查询薪资比“白露”，“李诗雨”，“黄冰茹”三个人的薪资都要高的员工姓名和薪资。</span>
<span class="token keyword">SELECT</span> ename<span class="token punctuation">,</span>salary
<span class="token keyword">FROM</span> t_employee
<span class="token keyword">WHERE</span> salary <span class="token operator">&gt;</span><span class="token keyword">ALL</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> salary <span class="token keyword">FROM</span> t_employee <span class="token keyword">WHERE</span> ename <span class="token operator">IN</span><span class="token punctuation">(</span><span class="token string">&#39;白露&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;李诗雨&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;黄冰茹&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_4having嵌套子查询" tabindex="-1"><a class="header-anchor" href="#_4having嵌套子查询" aria-hidden="true">#</a> ④having嵌套子查询</h3><br><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 查询“t_employee”和“t_department”表，按部门统计平均工资，</span>
<span class="token comment"># 显示部门平均工资比全公司的总平均工资高的部门编号、部门名称、部门平均薪资，</span>
<span class="token comment"># 并按照部门平均薪资升序排列。</span>
<span class="token keyword">SELECT</span> t_department<span class="token punctuation">.</span>did<span class="token punctuation">,</span>dname<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> t_employee <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> t_department
<span class="token keyword">ON</span> t_employee<span class="token punctuation">.</span>did <span class="token operator">=</span> t_department<span class="token punctuation">.</span>did
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> t_department<span class="token punctuation">.</span>did
<span class="token keyword">HAVING</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_employee<span class="token punctuation">)</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_5exists型子查询" tabindex="-1"><a class="header-anchor" href="#_5exists型子查询" aria-hidden="true">#</a> ⑤EXISTS型子查询</h3><p>EXISTS型子查询也是存在外层SELECT的WHERE子句中，不过它和上面的WHERE型子查询的工作模式不相同，所以这里单独讨论它。</p><p>如果EXISTS关键字后面的参数是一个任意的子查询，系统将对子查询进行运算以判断它是否返回行，如果至少返回一行，那么EXISTS的结果为true，此时外层查询语句将进行查询；如果子查询没有返回任何行，那么EXISTS的结果为false，此时外层查询语句不进行查询。EXISTS和NOT EXISTS的结果只取决于是否返回行，而不取决于这些行的内容，所以这个子查询输入列表通常是无关紧要的。</p><p>如果EXISTS关键字后面的参数是一个关联子查询，即子查询的WHERE条件中包含与外层查询表的关联条件，那么此时将对外层查询表做循环，即在筛选外层查询表的每一条记录时，都看这条记录是否满足子查询的条件，如果满足就再用外层查询的其他WHERE条件对该记录进行筛选，否则就丢弃这行记录。</p><br><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 查询“t_employee”表中是否存在部门编号为NULL的员工，</span>
<span class="token comment"># 如果存在，查询“t_department”表的部门编号、部门名称。</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_department 
<span class="token keyword">WHERE</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_employee  <span class="token keyword">WHERE</span> did <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># 查询“t_department”表是否存在与“t_employee”表相同部门编号的记录，</span>
<span class="token comment"># 如果存在，查询这些部门的编号和名称。</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_department
<span class="token keyword">WHERE</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_employee <span class="token keyword">WHERE</span> t_employee<span class="token punctuation">.</span>did <span class="token operator">=</span> t_department<span class="token punctuation">.</span>did<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># 查询结果等价于下面的sql</span>
<span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> t_department<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">FROM</span> t_department <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> t_employee
<span class="token keyword">ON</span> t_department<span class="token punctuation">.</span>did <span class="token operator">=</span> t_employee<span class="token punctuation">.</span>did<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_6from嵌套子查询" tabindex="-1"><a class="header-anchor" href="#_6from嵌套子查询" aria-hidden="true">#</a> ⑥from嵌套子查询</h3><p>当子查询结果是多列的结果时，通常将子查询放到FROM后面，然后采用给子查询结果取别名的方式，把子查询结果当成一张“动态生成的临时表”使用。</p><br><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 在“t_employee”表中，查询每个部门的平均薪资，</span>
<span class="token comment"># 然后与“t_department”表联合查询</span>
<span class="token comment"># 所有部门的部门编号、部门名称、部门平均薪资。</span>

<span class="token keyword">SELECT</span> did<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_employee <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> did<span class="token punctuation">;</span>

<span class="token operator">+</span><span class="token comment">------+-------------+</span>
<span class="token operator">|</span> did  <span class="token operator">|</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+-------------+</span>
<span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>  <span class="token number">11479.3125</span> <span class="token operator">|</span>
<span class="token operator">|</span>    <span class="token number">2</span> <span class="token operator">|</span>       <span class="token number">13978</span> <span class="token operator">|</span>
<span class="token operator">|</span>    <span class="token number">3</span> <span class="token operator">|</span>    <span class="token number">37858.25</span> <span class="token operator">|</span>
<span class="token operator">|</span>    <span class="token number">4</span> <span class="token operator">|</span>       <span class="token number">12332</span> <span class="token operator">|</span>
<span class="token operator">|</span>    <span class="token number">5</span> <span class="token operator">|</span>       <span class="token number">11725</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+-------------+</span>
<span class="token number">5</span> <span class="token keyword">ROWS</span> <span class="token operator">IN</span> <span class="token keyword">SET</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

<span class="token comment"># 用上面的查询结果，当成一张临时表，与t_department部门表做联合查询</span>
<span class="token comment"># 要给这样的子查询取别名的方式来当临时表用，该临时表必须起别名。</span>
<span class="token comment"># 而且别忘了：表的别名不能加引号（字段别名可以）</span>

<span class="token comment"># 错误示范：from后面的t_department和temp表都没有salary字段，</span>
<span class="token comment"># SELECT t_department.did ,dname,AVG(salary)出现AVG(salary)是错误的</span>
<span class="token keyword">SELECT</span> t_department<span class="token punctuation">.</span>did <span class="token punctuation">,</span>dname<span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> t_department <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> did<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_employee <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> did<span class="token punctuation">)</span> <span class="token keyword">temp</span>
<span class="token keyword">ON</span> t_department<span class="token punctuation">.</span>did <span class="token operator">=</span> <span class="token keyword">temp</span><span class="token punctuation">.</span>did<span class="token punctuation">;</span>

<span class="token comment"># 正确写法是：</span>
<span class="token keyword">SELECT</span> t_department<span class="token punctuation">.</span>did<span class="token punctuation">,</span>dname<span class="token punctuation">,</span>pingjun
<span class="token keyword">FROM</span> t_department <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> did<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">AS</span> pingjun <span class="token keyword">FROM</span> t_employee <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> did<span class="token punctuation">)</span> <span class="token keyword">temp</span>
<span class="token keyword">ON</span> t_department<span class="token punctuation">.</span>did <span class="token operator">=</span> <span class="token keyword">temp</span><span class="token punctuation">.</span>did<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_7update嵌套子查询" tabindex="-1"><a class="header-anchor" href="#_7update嵌套子查询" aria-hidden="true">#</a> ⑦update嵌套子查询</h3><br><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># [1]测试部员工涨薪1.5倍。</span>
<span class="token keyword">UPDATE</span> t_employee
<span class="token keyword">SET</span> salary <span class="token operator">=</span> salary <span class="token operator">*</span> <span class="token number">1.5</span>
<span class="token keyword">WHERE</span> did <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> did <span class="token keyword">FROM</span> t_department <span class="token keyword">WHERE</span> dname <span class="token operator">=</span> <span class="token string">&#39;测试部&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># [2]修改“t_employee”表中did为NULL的员工信息，</span>
<span class="token comment"># 将他们的did值修改为“测试部”的部门编号。</span>
<span class="token comment"># 子查询select did from t_department where dname = &#39;测试部&#39;</span>
<span class="token comment"># 这种子查询必须是单个值，否则无法赋值</span>
<span class="token keyword">UPDATE</span> t_employee 
<span class="token keyword">SET</span> did <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> did <span class="token keyword">FROM</span> t_department <span class="token keyword">WHERE</span> dname <span class="token operator">=</span> <span class="token string">&#39;测试部&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">WHERE</span> did <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>

<span class="token comment"># [3]修改“t_employee”表中“李冰冰”的薪资值等于“孙红梅”的薪资值。</span>
<span class="token comment"># 这里使用子查询先在“t_employee”表中查询出“孙红梅”的薪资。</span>
<span class="token comment"># select salary from t_employee where ename = &#39;孙红梅&#39;;</span>

<span class="token comment"># 错误示范：You can&#39;t specify target table &#39;t_employee&#39; for update in FROM clause&#39;</span>
<span class="token keyword">UPDATE</span> t_employee
<span class="token keyword">SET</span> salary <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> salary <span class="token keyword">FROM</span> t_employee <span class="token keyword">WHERE</span> ename <span class="token operator">=</span> <span class="token string">&#39;孙红梅&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">WHERE</span> ename <span class="token operator">=</span> <span class="token string">&#39;李冰冰&#39;</span><span class="token punctuation">;</span>

<span class="token comment"># 当update的表和子查询的表是同一个表时，需要将子查询的结果用临时表的方式表示</span>
<span class="token comment"># 也就是再套一层子查询，使得update和最外层的子查询不是同一张表</span>
<span class="token keyword">UPDATE</span> t_employee
<span class="token keyword">SET</span> salary <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> salary <span class="token keyword">FROM</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> salary <span class="token keyword">FROM</span> t_employee <span class="token keyword">WHERE</span> ename <span class="token operator">=</span> <span class="token string">&#39;孙红梅&#39;</span><span class="token punctuation">)</span><span class="token keyword">temp</span><span class="token punctuation">)</span>
<span class="token keyword">WHERE</span> ename <span class="token operator">=</span> <span class="token string">&#39;李冰冰&#39;</span><span class="token punctuation">;</span>

<span class="token comment"># [3]修改“t_employee”表“李冰冰”的薪资与她所在部门的平均薪资一样。</span>
<span class="token comment"># 子查询第一层，查询李冰冰的部门编号 </span>
<span class="token comment"># select did from t_employee where ename = &#39;李冰冰&#39;;</span>

<span class="token comment"># 子查询第二层，查询李冰冰所在部门的平均薪资</span>
<span class="token comment"># select avg(salary) from t_employee where did = (select did from t_employee where ename = &#39;李冰冰&#39;);</span>

<span class="token comment"># 子查询第三层，把第二层的子查询结果当成临时表再查一下结果</span>
<span class="token comment"># 目的使得和外层的update不是同一张表</span>
<span class="token keyword">SELECT</span> pingjun 
<span class="token keyword">FROM</span> <span class="token punctuation">(</span>
	<span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> pingjun 
	<span class="token keyword">FROM</span> t_employee 
	<span class="token keyword">WHERE</span> did <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> did <span class="token keyword">FROM</span> t_employee <span class="token keyword">WHERE</span> ename <span class="token operator">=</span> <span class="token string">&#39;李冰冰&#39;</span><span class="token punctuation">)</span> <span class="token keyword">temp</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># update更新</span>
<span class="token keyword">UPDATE</span> t_employee
<span class="token keyword">SET</span> salary <span class="token operator">=</span> 
<span class="token punctuation">(</span><span class="token keyword">SELECT</span> pingjun <span class="token keyword">FROM</span> 
  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> pingjun <span class="token keyword">FROM</span> t_employee <span class="token keyword">WHERE</span> did <span class="token operator">=</span> 
    <span class="token punctuation">(</span><span class="token keyword">SELECT</span> did <span class="token keyword">FROM</span> t_employee <span class="token keyword">WHERE</span> ename <span class="token operator">=</span> <span class="token string">&#39;李冰冰&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">temp</span><span class="token punctuation">)</span>
<span class="token keyword">WHERE</span> ename <span class="token operator">=</span> <span class="token string">&#39;李冰冰&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_8delete嵌套子查询" tabindex="-1"><a class="header-anchor" href="#_8delete嵌套子查询" aria-hidden="true">#</a> ⑧delete嵌套子查询</h3><br><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># [1]从“t_employee”表中删除“测试部”的员工记录。</span>
<span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> t_employee 
<span class="token keyword">WHERE</span> did <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> did <span class="token keyword">FROM</span> t_department <span class="token keyword">WHERE</span> dname <span class="token operator">=</span> <span class="token string">&#39;测试部&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># [2]从“t_employee”表中删除和“李冰冰”同一个部门的员工记录。</span>
<span class="token comment"># 子查询 “李冰冰”的部门编号</span>
<span class="token comment"># select did from t_employee where ename = &#39;李冰冰&#39;;</span>

<span class="token comment"># You can&#39;t specify target table &#39;t_employee&#39; for update in FROM clause&#39;</span>
<span class="token comment"># 删除和子查询是同一张表</span>
<span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> t_employee <span class="token keyword">WHERE</span> did <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> did <span class="token keyword">FROM</span> t_employee <span class="token keyword">WHERE</span> ename <span class="token operator">=</span> <span class="token string">&#39;李冰冰&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> t_employee <span class="token keyword">WHERE</span> did <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> did <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> did <span class="token keyword">FROM</span> t_employee <span class="token keyword">WHERE</span> ename <span class="token operator">=</span> <span class="token string">&#39;李冰冰&#39;</span><span class="token punctuation">)</span><span class="token keyword">temp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_9使用子查询复制表" tabindex="-1"><a class="header-anchor" href="#_9使用子查询复制表" aria-hidden="true">#</a> ⑨使用子查询复制表</h3><br><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 仅仅是复制表结构，可以用create语句</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> department <span class="token operator">LIKE</span> t_department<span class="token punctuation">;</span>

<span class="token comment"># 使用INSERT语句+子查询，复制数据，此时INSERT不用写values</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> department <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_department <span class="token keyword">WHERE</span> did<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># 同时复制表结构+数据</span>
<span class="token comment"># 如果select后面是部分字段，复制的新表就只有这一部分字段</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> d_department <span class="token keyword">AS</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_department<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="_6、排序" tabindex="-1"><a class="header-anchor" href="#_6、排序" aria-hidden="true">#</a> 6、排序</h2><br><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 需求：查询员工姓名和工资，按照工资排序（默认是升序）  </span>
<span class="token keyword">select</span> emp_name<span class="token punctuation">,</span> emp_salary <span class="token keyword">from</span> t_employee <span class="token keyword">order</span> <span class="token keyword">by</span> emp_salary<span class="token punctuation">;</span>  
<span class="token keyword">select</span> emp_name<span class="token punctuation">,</span> emp_salary <span class="token keyword">from</span> t_employee <span class="token keyword">order</span> <span class="token keyword">by</span> emp_salary <span class="token keyword">asc</span><span class="token punctuation">;</span>  
  
<span class="token comment"># 需求：降序排序  </span>
<span class="token keyword">select</span> emp_name<span class="token punctuation">,</span> emp_salary <span class="token keyword">from</span> t_employee <span class="token keyword">order</span> <span class="token keyword">by</span> emp_salary <span class="token keyword">desc</span><span class="token punctuation">;</span>  
  
<span class="token comment"># 需求：先根据部门 id 排序，在部门 id 重复的范围内，再根据工资排序  </span>
<span class="token keyword">select</span> emp_name<span class="token punctuation">,</span> dept_id<span class="token punctuation">,</span> emp_salary <span class="token keyword">from</span> t_employee <span class="token keyword">order</span> <span class="token keyword">by</span> dept_id <span class="token keyword">asc</span><span class="token punctuation">,</span> emp_salary <span class="token keyword">desc</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="_7、分页" tabindex="-1"><a class="header-anchor" href="#_7、分页" aria-hidden="true">#</a> 7、分页</h2><h3 id="_1概念-2" tabindex="-1"><a class="header-anchor" href="#_1概念-2" aria-hidden="true">#</a> ①概念</h3><p><img src="`+En+`" alt="img.png"></p><br><p>页面上每次只显示数据的一部分，而不是全部数据。</p><br><p>分页显示数据的好处：</p><ul><li>查询速度比加载全部数据要快。</li><li>只加载一部分数据，节约资源：内存、网络传输时间……</li><li>有利于改善用户体验：一次性看到非常多的数据（几百、上千），用户体验会不太好</li></ul><br><p>页面上用户操作的方式：</p><ul><li>点击页码按钮</li><li>点击上一页、下一页按钮</li><li>在文本框输入指定页的页码 上面三种其实都是提供了一个参数：目标页面的页码（pageNo）</li></ul><br><p>除了页码，还有一个隐含的参数：每页显示数据的数量（pageSize）</p><br><p>我们后端程序的任务就是根据前端提供的 pageNo、pageSize 把页面显示分页所需的数据查询出来。</p><br><h3 id="_2mysql分页" tabindex="-1"><a class="header-anchor" href="#_2mysql分页" aria-hidden="true">#</a> ②MySQL分页</h3><p>MySQL 分页需要用到 limit 子句。limit 子句需要传入两个参数：</p><ul><li>参数1：index</li><li>参数2：pageSize</li></ul><br><p>使用 limit 子句的公式：(pageNo-1)*pageSize,pageSize</p><br><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># limit 子句本身的含义是：从你指定的索引位置开始，加载指定数量的记录  </span>
<span class="token keyword">select</span> emp_id<span class="token punctuation">,</span> emp_name<span class="token punctuation">,</span> emp_age <span class="token keyword">from</span> t_employee <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">;</span>  
<span class="token keyword">select</span> emp_id<span class="token punctuation">,</span> emp_name<span class="token punctuation">,</span> emp_age <span class="token keyword">from</span> t_employee <span class="token keyword">limit</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">;</span>  
<span class="token keyword">select</span> emp_id<span class="token punctuation">,</span> emp_name<span class="token punctuation">,</span> emp_age <span class="token keyword">from</span> t_employee <span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">;</span>  
  
<span class="token comment"># 第一页 pageNo:1，index:0      0*5     (pageNo-1)*pageSize  </span>
<span class="token comment"># 第二页 pageNo:2，index:5      1*5  </span>
<span class="token comment"># 第三页 pageNo:3，index:10     2*5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8、系统函数" tabindex="-1"><a class="header-anchor" href="#_8、系统函数" aria-hidden="true">#</a> 8、系统函数</h2><p>函数：代表一个独立的可复用的功能。</p><p>和Java中的方法有所不同，不同点在于：MySQL中的函数必须有返回值，参数可以有可以没有。</p><p>MySQL函数分类：</p>`,506),Ln=a(`<br><h3 id="_1单行函数举例" tabindex="-1"><a class="header-anchor" href="#_1单行函数举例" aria-hidden="true">#</a> ①单行函数举例</h3><h4 id="_1-concat字符串拼接" tabindex="-1"><a class="header-anchor" href="#_1-concat字符串拼接" aria-hidden="true">#</a> [1]concat字符串拼接</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 拼接字符串  </span>
<span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tom!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token keyword">select</span> emp_id<span class="token punctuation">,</span> concat<span class="token punctuation">(</span>emp_name<span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">,</span> emp_salary<span class="token punctuation">)</span> <span class="token keyword">from</span> t_employee <span class="token keyword">where</span> emp_id<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>  
  
<span class="token comment"># 替换字符串  </span>
<span class="token keyword">select</span> <span class="token keyword">replace</span><span class="token punctuation">(</span>emp_name<span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;@&quot;</span><span class="token punctuation">)</span> <span class="token keyword">from</span> t_employee<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-case-when" tabindex="-1"><a class="header-anchor" href="#_2-case-when" aria-hidden="true">#</a> [2]case ... when</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> eid<span class="token punctuation">,</span>ename<span class="token punctuation">,</span>salary<span class="token punctuation">,</span>
<span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> salary<span class="token operator">&gt;</span><span class="token number">20000</span> <span class="token keyword">THEN</span> <span class="token string">&#39;羡慕级别&#39;</span>
     <span class="token keyword">WHEN</span> salary<span class="token operator">&gt;</span><span class="token number">15000</span> <span class="token keyword">THEN</span> <span class="token string">&#39;努力级别&#39;</span>
     <span class="token keyword">WHEN</span> salary<span class="token operator">&gt;</span><span class="token number">10000</span> <span class="token keyword">THEN</span> <span class="token string">&#39;平均级别&#39;</span>
     <span class="token keyword">ELSE</span> <span class="token string">&#39;保底级别&#39;</span>
<span class="token keyword">END</span> <span class="token keyword">AS</span> <span class="token string">&quot;等级&quot;</span>
<span class="token keyword">FROM</span> t_employee<span class="token punctuation">;</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-round" tabindex="-1"><a class="header-anchor" href="#_3-round" aria-hidden="true">#</a> [3]round()</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># ROUND(x,y) 返回参数x的四舍五入的有y位的小数的值  </span>
<span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>emp_salary<span class="token punctuation">)</span> <span class="token keyword">from</span> t_employee<span class="token punctuation">;</span>  
<span class="token keyword">select</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token function">avg</span><span class="token punctuation">(</span>emp_salary<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">from</span> t_employee<span class="token punctuation">;</span>  
<span class="token keyword">select</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token function">avg</span><span class="token punctuation">(</span>emp_salary<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">from</span> t_employee<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2聚合函数举例" tabindex="-1"><a class="header-anchor" href="#_2聚合函数举例" aria-hidden="true">#</a> ②聚合函数举例</h3><ul><li>avg() 多个值计算平均数</li><li>min() 多个值取最小值</li><li>max() 多个值取最大值</li><li>sum() 多个值求和</li><li>count() 多个值计数</li><li>group_concat() 分组后，组内多个值拼接成一个字符串</li></ul><br><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># group_concat()分组后，组内多个值拼接成一个字符串  </span>
<span class="token keyword">select</span> dept_id 部门id<span class="token punctuation">,</span> group_concat<span class="token punctuation">(</span>emp_name separator <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span> 部门成员列表  
<span class="token keyword">from</span> t_employee  
<span class="token keyword">group</span> <span class="token keyword">by</span> dept_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="五、约束" tabindex="-1"><a class="header-anchor" href="#五、约束" aria-hidden="true">#</a> 五、约束</h1><h2 id="_1、概述" tabindex="-1"><a class="header-anchor" href="#_1、概述" aria-hidden="true">#</a> 1、概述</h2><h3 id="_1、约束的作用" tabindex="-1"><a class="header-anchor" href="#_1、约束的作用" aria-hidden="true">#</a> ①、约束的作用</h3><p>给数据库表中的数据额外添加限制条件，以此来保证『数据完整性』（说白了就是数据正确性）：</p><ul><li>实体完整性（Entity Integrity）：例如，同一个表中，不能存在两条完全相同无法区分的记录</li><li>域完整性（Domain Integrity）：例如：年龄范围0-120，性别范围“男/女”</li><li>引用完整性（Referential Integrity）：例如：员工所在部门，在部门表中要能找到这个部门</li><li>用户自定义完整性（User-defined Integrity）：例如：用户名唯一、密码不能为空等，本部门经理的工资不得高于本部门职工的平均工资的5倍。</li></ul><br><h3 id="_2约束的类型" tabindex="-1"><a class="header-anchor" href="#_2约束的类型" aria-hidden="true">#</a> ②约束的类型</h3><h4 id="_1-从约束目标来区分" tabindex="-1"><a class="header-anchor" href="#_1-从约束目标来区分" aria-hidden="true">#</a> [1]从约束目标来区分</h4><ul><li>键约束：主键约束、外键约束、唯一键约束</li><li>Not NULL约束：非空约束</li><li>Check约束：检查约束</li><li>Default约束：默认值约束</li></ul><br><p>自增是键约束字段的一个额外的属性。</p><br><h4 id="_2-从约束范围来区分" tabindex="-1"><a class="header-anchor" href="#_2-从约束范围来区分" aria-hidden="true">#</a> [2]从约束范围来区分</h4><ul><li>表级约束：不仅要看约束字段当前单元格的数据，还要看其他单元格的数据。 <ul><li>键约束</li><li>检查约束</li></ul></li><li>列级约束：约束字段只看当前单元格的数据即可，和其他单元格无关。 <ul><li>非空约束</li><li>默认值约束</li></ul></li></ul><br><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 查询所有表级约束</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span>table_constraints <span class="token keyword">WHERE</span> table_name <span class="token operator">=</span> <span class="token string">&#39;表名称&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_3约束和索引的关系" tabindex="-1"><a class="header-anchor" href="#_3约束和索引的关系" aria-hidden="true">#</a> ③约束和索引的关系</h3><p>在MySQL中键约束会自动创建索引，提高查询效率。索引的详细讲解在高级部分。</p><p>MySQL高级会给大家讲解索引、存储引擎等，因为高级要给大家分析SQL性能。而基础阶段先不管效率，只要能查出来就行。</p><p>约束和索引不同：</p><ul><li>约束是一个逻辑概念，它不会单独占用物理空间。</li><li>索引是一个物理概念，它是会占用物理空间。</li></ul><p>例如：字典</p><p>字典里面有要求，不能有重复的字（字一样，读音也一样），这是约束。</p><p>字典里面有“目录”，它可以快速的查找某个字，目录需要占用单独的页。</p><br><h2 id="_2、非空约束" tabindex="-1"><a class="header-anchor" href="#_2、非空约束" aria-hidden="true">#</a> 2、非空约束</h2><h3 id="_1效果" tabindex="-1"><a class="header-anchor" href="#_1效果" aria-hidden="true">#</a> ①效果</h3><p>在数据库表中，限定某个列的值不能为null。</p><ul><li>细节1：只能针对单独一个列设定非空约束，不能同时针对多个字段设置组合非空。</li><li>细节2：一张数据库表中可以有多个字段设置非空约束。</li></ul><h3 id="_2语法" tabindex="-1"><a class="header-anchor" href="#_2语法" aria-hidden="true">#</a> ②语法</h3><p>在创建或修改表时，声明字段时指定not null。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> 表名称<span class="token punctuation">(</span>
  字段名 数据类型 <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
  字段名 数据类型 <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
  字段名 数据类型
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3测试" tabindex="-1"><a class="header-anchor" href="#_3测试" aria-hidden="true">#</a> ③测试</h3><p>非空约束会禁止以下行为：</p><ul><li>insert时，非空字段未提供值且没有默认值</li><li>insert时，非空字段明确设置为null</li><li>update时，非空字段明确设置为null</li></ul><br><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">database</span> db_hello<span class="token punctuation">;</span>  
<span class="token keyword">use</span> db_hello<span class="token punctuation">;</span>  
<span class="token keyword">create</span> <span class="token keyword">table</span> t_hello<span class="token punctuation">(</span>  
    hello_id <span class="token keyword">int</span> <span class="token keyword">auto_increment</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">,</span>  
    hello_name <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>  
    hello_age <span class="token keyword">int</span>  
<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token comment"># 正常执行，没问题  </span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> t_hello<span class="token punctuation">(</span>hello_name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">&quot;goods&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token comment"># [23000][1048] Column &#39;hello_name&#39; cannot be null  </span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> t_hello<span class="token punctuation">(</span>hello_name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token comment"># [HY000][1364] Field &#39;hello_name&#39; doesn&#39;t have a default value  </span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> t_hello<span class="token punctuation">(</span>hello_age<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token comment"># [23000][1048] Column &#39;hello_name&#39; cannot be null  </span>
<span class="token keyword">update</span> t_hello <span class="token keyword">set</span> hello_name<span class="token operator">=</span><span class="token boolean">null</span> <span class="token keyword">where</span> hello_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、唯一键约束" tabindex="-1"><a class="header-anchor" href="#_3、唯一键约束" aria-hidden="true">#</a> 3、唯一键约束</h2><h3 id="_1效果-1" tabindex="-1"><a class="header-anchor" href="#_1效果-1" aria-hidden="true">#</a> ①效果</h3><ul><li>单列唯一：单个字段值不可重复。</li><li>组合唯一：多个字段值的组合不可重复。</li></ul><h3 id="_2特点" tabindex="-1"><a class="header-anchor" href="#_2特点" aria-hidden="true">#</a> ②特点</h3><ul><li>一个表可以有很多个唯一键约束</li><li>每一个唯一键约束字段都会自动创建唯一索引</li><li>创建唯一索引时也会自动添加唯一约束</li><li>唯一键约束允许为空，甚至允许约束范围内多个值为空</li><li>通过删除唯一键约束的索引来删除唯一键约束</li></ul><h3 id="_3测试-1" tabindex="-1"><a class="header-anchor" href="#_3测试-1" aria-hidden="true">#</a> ③测试</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> t_stu<span class="token punctuation">(</span>  
    stu_id <span class="token keyword">int</span> <span class="token keyword">auto_increment</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">,</span>  
    stu_name <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">unique</span> <span class="token keyword">key</span> <span class="token punctuation">,</span> <span class="token comment"># 单列唯一  </span>
    stu_subject <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  
    stu_direct <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  
    <span class="token keyword">unique</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>stu_subject<span class="token punctuation">,</span> stu_direct<span class="token punctuation">)</span> <span class="token comment"># 组合唯一  </span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token comment"># 测试单列唯一  </span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> t_stu<span class="token punctuation">(</span>stu_name<span class="token punctuation">,</span> stu_subject<span class="token punctuation">,</span> stu_direct<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Java&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;RD&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token comment"># [23000][1062] Duplicate entry &#39;tom&#39; for key &#39;t_stu.stu_name&#39;  </span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> t_stu<span class="token punctuation">(</span>stu_name<span class="token punctuation">,</span> stu_subject<span class="token punctuation">,</span> stu_direct<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;PHP&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;QA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token comment"># 测试组合唯一  </span>
<span class="token comment"># [23000][1062] Duplicate entry &#39;Java-RD&#39; for key &#39;t_stu.stu_subject&#39;  </span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> t_stu<span class="token punctuation">(</span>stu_name<span class="token punctuation">,</span> stu_subject<span class="token punctuation">,</span> stu_direct<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&quot;jerry&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Java&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;RD&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token comment"># 测试唯一字段可以为空，空值可以有多个  </span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> t_stu<span class="token punctuation">(</span>stu_subject<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&quot;MySQL&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token keyword">insert</span> <span class="token keyword">into</span> t_stu<span class="token punctuation">(</span>stu_subject<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&quot;Oracle&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4、主键约束" tabindex="-1"><a class="header-anchor" href="#_4、主键约束" aria-hidden="true">#</a> 4、主键约束</h2><h3 id="_1作用" tabindex="-1"><a class="header-anchor" href="#_1作用" aria-hidden="true">#</a> ①作用</h3><p>为数据库表中的每一条记录提供唯一标识。</p><br><h3 id="_2特点-1" tabindex="-1"><a class="header-anchor" href="#_2特点-1" aria-hidden="true">#</a> ②特点</h3><ul><li>唯一并且非空</li><li>一个表最多只能有一个主键约束</li><li>主键可以由多列组成，这就是联合主键</li><li>主键列会自动创建索引（能够根据主键查询的，就根据主键查询，效率更高）</li><li>如果删除主键约束了，主键约束对应的索引就自动删除了，但是非空约束不会自动删除。</li></ul><blockquote><p>主键列的唯一并且非空是约束的概念，但是MySQL会给每个表的主键列创建索引，会开辟单独的物理空间来存储每一个主键的目录表（B+Tree结构）。这样设计的意义，可以根据主键快速查询到某一行的记录。</p></blockquote><h3 id="_3主键约束和唯一键约束区别" tabindex="-1"><a class="header-anchor" href="#_3主键约束和唯一键约束区别" aria-hidden="true">#</a> ③主键约束和唯一键约束区别</h3><ul><li>在一张数据库表中：主键约束只能有一个，但是唯一约束可以有多个。</li><li>主键约束要求字段值不可为空，唯一键约束没有非空要求。</li></ul><br><h3 id="_4语法" tabindex="-1"><a class="header-anchor" href="#_4语法" aria-hidden="true">#</a> ④语法</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> 表名称<span class="token punctuation">(</span>
	<span class="token comment"># 在声明字段时指定</span>
	字段名  数据类型  <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
    字段名  数据类型<span class="token punctuation">,</span>  
    字段名  数据类型  
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> 表名称<span class="token punctuation">(</span>
	字段名  数据类型<span class="token punctuation">,</span>
    字段名  数据类型<span class="token punctuation">,</span>  
    字段名  数据类型<span class="token punctuation">,</span>
    <span class="token comment"># 在表级别指定</span>
    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>字段名或字段列表<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5、默认值约束" tabindex="-1"><a class="header-anchor" href="#_5、默认值约束" aria-hidden="true">#</a> 5、默认值约束</h2><h3 id="_1效果-2" tabindex="-1"><a class="header-anchor" href="#_1效果-2" aria-hidden="true">#</a> ①效果</h3><p>在插入记录时，如果没有给字段提供值，那么会自动使用默认值。</p><h3 id="_2语法-1" tabindex="-1"><a class="header-anchor" href="#_2语法-1" aria-hidden="true">#</a> ②语法</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> 表名称<span class="token punctuation">(</span>
	字段名  数据类型  <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
    字段名  数据类型  【<span class="token keyword">unique</span> <span class="token keyword">key</span>】 【<span class="token operator">not</span> <span class="token boolean">null</span>】<span class="token punctuation">,</span>  
    字段名  数据类型  【<span class="token operator">not</span> <span class="token boolean">null</span>】 【<span class="token keyword">default</span> 默认值】 
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3测试-2" tabindex="-1"><a class="header-anchor" href="#_3测试-2" aria-hidden="true">#</a> ③测试</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> t_flower<span class="token punctuation">(</span>  
    flower_id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>  
    flower_name <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  
    flower_color <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&#39;red&#39;</span>  
<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token keyword">insert</span> <span class="token keyword">into</span> t_flower<span class="token punctuation">(</span>flower_name<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&quot;mother solo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6、自增属性" tabindex="-1"><a class="header-anchor" href="#_6、自增属性" aria-hidden="true">#</a> 6、自增属性</h2><h3 id="_1效果-3" tabindex="-1"><a class="header-anchor" href="#_1效果-3" aria-hidden="true">#</a> ①效果</h3><p>给某个字段自动赋值，这个值是一直往上增加，如果没有特殊设定，每次自增1。</p><br><h3 id="_2特点和要求" tabindex="-1"><a class="header-anchor" href="#_2特点和要求" aria-hidden="true">#</a> ②特点和要求</h3><ul><li>一个表只能有一个自增字段</li><li>并且自增字段只能是key字段，即定义了主键、唯一键等键约束的字段。一般都是给主键或唯一键加自增。</li><li>自增字段应该是数值类型，一般都是整数类型。</li><li>如果插入数据时，自增列指定了 0 和 null，会在当前最大值的基础上自增，</li><li>如果自增列手动指定了具体值，直接赋值为具体值。</li></ul><br><h3 id="_3语法" tabindex="-1"><a class="header-anchor" href="#_3语法" aria-hidden="true">#</a> ③语法</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> 表名称<span class="token punctuation">(</span>
  字段名  数据类型 <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>
  字段名  数据类型<span class="token punctuation">,</span>  
  字段名  数据类型
<span class="token punctuation">)</span> <span class="token keyword">auto_increment</span><span class="token operator">=</span>自增起点值<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_4测试" tabindex="-1"><a class="header-anchor" href="#_4测试" aria-hidden="true">#</a> ④测试</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 测试：一个表只能有一个自增字段  </span>
<span class="token comment"># [42000][1075] Incorrect table definition;  </span>
<span class="token comment"># there can be only one auto column and it must be defined as a key  </span>
<span class="token keyword">create</span> <span class="token keyword">table</span> t_user<span class="token punctuation">(</span>  
    user_id <span class="token keyword">int</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>  
    user_age <span class="token keyword">int</span> <span class="token keyword">auto_increment</span>  
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># 测试：自增字段必须是数值类型  </span>
<span class="token comment"># [42000][1063] Incorrect column specifier for column &#39;user_name&#39;  </span>
<span class="token keyword">create</span> <span class="token keyword">table</span> t_user<span class="token punctuation">(</span>  
    user_name <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">auto_increment</span>  
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">create</span> <span class="token keyword">table</span> t_pen<span class="token punctuation">(</span>  
    pen_id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span> <span class="token comment"># 指定字段值自增生成  </span>
    pen_name <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>  
<span class="token punctuation">)</span> <span class="token keyword">auto_increment</span><span class="token operator">=</span><span class="token number">66</span><span class="token punctuation">;</span> <span class="token comment"># 指定自增值起点  </span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> t_pen<span class="token punctuation">(</span>pen_name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">&quot;pen01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token keyword">insert</span> <span class="token keyword">into</span> t_pen<span class="token punctuation">(</span>pen_name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">&quot;pen02&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token keyword">insert</span> <span class="token keyword">into</span> t_pen<span class="token punctuation">(</span>pen_name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">&quot;pen03&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token comment"># 如果自增列指定了 0 和 null，会在当前最大值的基础上自增  </span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> t_pen<span class="token punctuation">(</span>pen_id<span class="token punctuation">,</span> pen_name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;pen04&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token keyword">insert</span> <span class="token keyword">into</span> t_pen<span class="token punctuation">(</span>pen_id<span class="token punctuation">,</span> pen_name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">&quot;pen05&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token comment"># 如果自增列手动指定了具体值，直接赋值为具体值。  </span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> t_pen<span class="token punctuation">(</span>pen_id<span class="token punctuation">,</span> pen_name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">144</span><span class="token punctuation">,</span> <span class="token string">&quot;pen06&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="_7、检查约束" tabindex="-1"><a class="header-anchor" href="#_7、检查约束" aria-hidden="true">#</a> 7、检查约束</h2><h3 id="_1效果-4" tabindex="-1"><a class="header-anchor" href="#_1效果-4" aria-hidden="true">#</a> ①效果</h3><p>检查（CHECK） 约束用于限制字段中的值的范围。如果对单个字段定义 CHECK 约束，那么该字段只允许特定范围的值。</p><p>如果对一个表定义 CHECK 约束，那么此约束会基于行中其他字段的值在特定的字段中对值进行限制。</p><p>在MySQL 8.0.16版本之前， CREATE TABLE语句支持给单个字段定义CHECK约束的语法，但是不起作用。</p><p>在MySQL8.0.16版本之后，CREATE TABLE语句既支持给单个字段定义列级CHECK约束的语法，还支持定义表级CHECK约束的语法。</p><h3 id="_2语法-2" tabindex="-1"><a class="header-anchor" href="#_2语法-2" aria-hidden="true">#</a> ②语法</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#在建表时，可以指定检查约束</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> 表名称<span class="token punctuation">(</span>
  字段名<span class="token number">1</span> 数据类型 <span class="token keyword">check</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 列级检查约束</span>
  字段名<span class="token number">2</span> 数据类型<span class="token punctuation">,</span>
  字段名<span class="token number">3</span> 数据类型<span class="token punctuation">,</span>
  <span class="token keyword">check</span> <span class="token punctuation">(</span>条件<span class="token punctuation">)</span> <span class="token comment"># 表级检查约束</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3测试-3" tabindex="-1"><a class="header-anchor" href="#_3测试-3" aria-hidden="true">#</a> ③测试</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> t_employee<span class="token punctuation">(</span>  
    employee_id <span class="token keyword">int</span> <span class="token keyword">auto_increment</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">,</span>  
    employee_name <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">check</span> <span class="token punctuation">(</span> employee_name <span class="token operator">like</span> <span class="token string">&#39;%dog%&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># 列级检查约束  </span>
    hire_date <span class="token keyword">date</span><span class="token punctuation">,</span>  
    birthday <span class="token keyword">date</span><span class="token punctuation">,</span>  
    <span class="token keyword">check</span> <span class="token punctuation">(</span> <span class="token keyword">year</span><span class="token punctuation">(</span>hire_date<span class="token punctuation">)</span><span class="token operator">-</span><span class="token keyword">year</span><span class="token punctuation">(</span>birthday<span class="token punctuation">)</span><span class="token operator">&gt;=</span><span class="token number">18</span> <span class="token punctuation">)</span> <span class="token comment"># 表级检查约束  </span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token comment"># 正确插入  </span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> t_employee<span class="token punctuation">(</span>employee_name<span class="token punctuation">,</span> hire_date<span class="token punctuation">,</span> birthday<span class="token punctuation">)</span>  
<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&quot;tom dog peter&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2023-05-11&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1986-10-14&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token comment"># 违反列级约束  </span>
<span class="token comment"># [HY000][3819] Check constraint &#39;t_employee_chk_1&#39; is violated.  </span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> t_employee<span class="token punctuation">(</span>employee_name<span class="token punctuation">,</span> hire_date<span class="token punctuation">,</span> birthday<span class="token punctuation">)</span>  
<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&quot;tom peter&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2023-05-11&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1986-10-14&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token comment"># 违反表级约束  </span>
<span class="token comment"># [HY000][3819] Check constraint &#39;t_employee_chk_2&#39; is violated.  </span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> t_employee<span class="token punctuation">(</span>employee_name<span class="token punctuation">,</span> hire_date<span class="token punctuation">,</span> birthday<span class="token punctuation">)</span>  
<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&quot;tom dog peter&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2023-05-11&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2019-10-14&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8、外键约束-了解" tabindex="-1"><a class="header-anchor" href="#_8、外键约束-了解" aria-hidden="true">#</a> 8、外键约束(了解)</h2><h3 id="_1效果-5" tabindex="-1"><a class="header-anchor" href="#_1效果-5" aria-hidden="true">#</a> ①效果</h3><p>限定表中某个字段的引用完整性。</p>`,102),Mn=a(`<h3 id="_2相关概念" tabindex="-1"><a class="header-anchor" href="#_2相关概念" aria-hidden="true">#</a> ②相关概念</h3><ul><li>主表（父表）：被引用的表，被参考的表</li><li>从表（子表）：引用别人的表，参考别人的表</li></ul><br><p>例如：员工表的员工所在部门这个字段的值要参考部门表，</p><ul><li>部门表是主表</li><li>员工表是从表。</li></ul><br><h3 id="_3特点" tabindex="-1"><a class="header-anchor" href="#_3特点" aria-hidden="true">#</a> ③特点</h3><ul><li>在“从表”中指定外键约束，并且一个表可以建立多个外键约束</li><li>创建(create)表时就指定外键约束的话，先创建主表，再创建从表</li><li>删表时，先删从表（或先删除外键约束），再删除主表。或者先解除关系，再各自删除。</li><li>从表的外键列，必须引用/参考主表的键列（主键或唯一键），因为被依赖/被参考的值必须是唯一的</li><li>从表的外键列的数据类型，要与主表被参考/被引用的列的数据类型一致，并且逻辑意义一致。</li><li>外键列也会自动建立索引（根据外键查询效率很高，很多）</li><li>外键约束的删除，所以不会自动删除索引，如果要删除对应的索引，必须手动删除</li></ul><h3 id="_4语法-1" tabindex="-1"><a class="header-anchor" href="#_4语法-1" aria-hidden="true">#</a> ④语法</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> 主表名称<span class="token punctuation">(</span>
	字段<span class="token number">1</span>  数据类型  <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
	字段<span class="token number">2</span>  数据类型
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">create</span> <span class="token keyword">table</span> 从表名称<span class="token punctuation">(</span>
	字段<span class="token number">1</span>  数据类型  <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
	字段<span class="token number">2</span>  数据类型<span class="token punctuation">,</span>
	<span class="token keyword">foreign</span> <span class="token keyword">key</span> （从表的某个字段<span class="token punctuation">)</span> <span class="token keyword">references</span> 主表名<span class="token punctuation">(</span>被参考字段<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5测试" tabindex="-1"><a class="header-anchor" href="#_5测试" aria-hidden="true">#</a> ⑤测试</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> t_author<span class="token punctuation">(</span>  
    author_id <span class="token keyword">int</span> <span class="token keyword">auto_increment</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>  
    author_name <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>  
<span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token keyword">create</span> <span class="token keyword">table</span> t_book<span class="token punctuation">(</span>  
    book_id <span class="token keyword">int</span> <span class="token keyword">auto_increment</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>  
    book_name <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  
    author_id <span class="token keyword">int</span><span class="token punctuation">,</span>  
    <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>author_id<span class="token punctuation">)</span> <span class="token keyword">references</span> t_author<span class="token punctuation">(</span>author_id<span class="token punctuation">)</span>  
<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token keyword">insert</span> <span class="token keyword">into</span> t_author<span class="token punctuation">(</span>author_name<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token keyword">insert</span> <span class="token keyword">into</span> t_book<span class="token punctuation">(</span>book_name<span class="token punctuation">,</span> author_id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&quot;tom and pig&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token comment"># [23000][1452] Cannot add or update a child row: a foreign key constraint fails (\`db_hello\`.\`t_book\`, CONSTRAINT \`t_book_ibfk_1\` FOREIGN KEY (\`author_id\`) REFERENCES \`t_author\` (\`author_id\`))  </span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> t_book<span class="token punctuation">(</span>book_name<span class="token punctuation">,</span> author_id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&quot;tom and pig2&quot;</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9、修改表结构和约束" tabindex="-1"><a class="header-anchor" href="#_9、修改表结构和约束" aria-hidden="true">#</a> 9、修改表结构和约束</h2><h3 id="_1修改表结构" tabindex="-1"><a class="header-anchor" href="#_1修改表结构" aria-hidden="true">#</a> ①修改表结构</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 操作1：表重命名  </span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> t_book <span class="token keyword">rename</span> <span class="token keyword">to</span> t_book2<span class="token punctuation">;</span>
  
<span class="token comment"># 操作2：表重命名的另一种写法  </span>
<span class="token keyword">rename</span> <span class="token keyword">table</span> t_book2 <span class="token keyword">to</span> t_book<span class="token punctuation">;</span>
  
<span class="token comment"># 操作3：表中删除字段  </span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> t_flower <span class="token keyword">drop</span> flower_name<span class="token punctuation">;</span>
  
<span class="token comment"># 操作4：表中增加字段  </span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> t_flower <span class="token keyword">add</span> flower_name <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
<span class="token comment"># 操作5：表中增加字段，并将字段顺序设置为第一个</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> t_flower <span class="token keyword">add</span> flower_love <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">first</span> <span class="token punctuation">;</span>
  
<span class="token comment"># 操作6：表中增加字段，并将字段顺序设置为指定字段的后面</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> t_flower <span class="token keyword">add</span> flower_good <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">after</span> flower_color<span class="token punctuation">;</span>
  
<span class="token comment"># 操作7：修改字段名称，虽然是修改名称，但是新字段名还是要附加字段类型</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> t_flower change flower_name2 flower_name <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
<span class="token comment"># 操作8：修改字段类型等细节，column 关键词可以省略。first、after关键字仍然可以使用  </span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> t_flower <span class="token keyword">modify</span> <span class="token keyword">column</span> flower_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2修改约束" tabindex="-1"><a class="header-anchor" href="#_2修改约束" aria-hidden="true">#</a> ②修改约束</h3><br><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 操作1：给表添加主键  </span>
<span class="token keyword">create</span> <span class="token keyword">table</span> t_pig<span class="token punctuation">(</span>  
    pig_id <span class="token keyword">int</span><span class="token punctuation">,</span>  
    pig_name <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  
    pig_age <span class="token keyword">int</span><span class="token punctuation">,</span>  
    pig_weight <span class="token keyword">int</span>  
<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token keyword">alter</span> <span class="token keyword">table</span> t_pig <span class="token keyword">add</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>pig_id<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token keyword">alter</span> <span class="token keyword">table</span> t_pig <span class="token keyword">modify</span> pig_id <span class="token keyword">int</span> <span class="token keyword">auto_increment</span><span class="token punctuation">;</span>  
  
<span class="token comment"># 操作2：给表删除主键  </span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> t_pig <span class="token keyword">modify</span> pig_id <span class="token keyword">int</span><span class="token punctuation">;</span>  
<span class="token keyword">alter</span> <span class="token keyword">table</span> t_pig <span class="token keyword">drop</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">;</span>  
  
<span class="token comment"># 操作3：增加唯一键约束  </span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> t_pig <span class="token keyword">add</span> <span class="token keyword">unique</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>pig_name<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token keyword">alter</span> <span class="token keyword">table</span> t_pig <span class="token keyword">add</span> <span class="token keyword">unique</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>pig_age<span class="token punctuation">,</span> pig_weight<span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token comment"># 操作4：删除唯一键约束，通过删除唯一索引实现  </span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> t_pig <span class="token keyword">drop</span> <span class="token keyword">index</span> pig_age<span class="token punctuation">;</span>  
  
<span class="token comment"># 操作5：查看指定表的索引信息</span>
<span class="token comment"># 查看索引</span>
<span class="token keyword">show</span> <span class="token keyword">index</span> <span class="token keyword">from</span> t_pig<span class="token punctuation">;</span>
<span class="token comment"># 查看约束</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span>table_constraints <span class="token keyword">WHERE</span> table_name <span class="token operator">=</span> <span class="token string">&#39;t_pig&#39;</span> <span class="token operator">and</span> CONSTRAINT_SCHEMA<span class="token operator">=</span><span class="token string">&quot;db_good&quot;</span><span class="token punctuation">;</span>  
  
<span class="token comment"># 操作6：非空约束、默认值约束、自增属性通过修改字段的方式添加或删除  </span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> t_pig <span class="token keyword">modify</span> pig_age <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token number">20</span><span class="token punctuation">;</span>  
  
<span class="token comment"># 操作7：添加检查约束  </span>
<span class="token comment"># 无效  </span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> t_pig <span class="token keyword">modify</span> pig_age <span class="token keyword">int</span> <span class="token keyword">check</span> <span class="token punctuation">(</span> pig_age <span class="token operator">between</span> <span class="token number">0</span> <span class="token operator">and</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token comment"># 有效  </span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> t_pig <span class="token keyword">add</span> <span class="token keyword">check</span> <span class="token punctuation">(</span> pig_age <span class="token operator">between</span> <span class="token number">0</span> <span class="token operator">and</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token comment"># 操作8：删除检查约束  </span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> t_pig <span class="token keyword">drop</span> <span class="token keyword">check</span> t_pig_chk_1<span class="token punctuation">;</span>  
  
<span class="token comment"># 操作9：查看表中的约束  </span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span>table_constraints <span class="token keyword">WHERE</span> table_name <span class="token operator">=</span> <span class="token string">&#39;t_pig&#39;</span><span class="token punctuation">;</span>  
  
<span class="token comment"># 操作10：增加外键约束  </span>
<span class="token keyword">create</span> <span class="token keyword">table</span> t_master<span class="token punctuation">(</span>  
    master_id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>  
    master_name <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>  
<span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token keyword">create</span> <span class="token keyword">table</span> t_slave<span class="token punctuation">(</span>  
    slave_id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>  
    slave_name <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  
    master_id <span class="token keyword">int</span>  
<span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token comment"># 添加外键约束  </span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> t_slave <span class="token keyword">add</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>master_id<span class="token punctuation">)</span> <span class="token keyword">references</span> t_master<span class="token punctuation">(</span>master_id<span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token comment"># 查看约束  </span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span>table_constraints <span class="token keyword">WHERE</span> table_name <span class="token operator">=</span> <span class="token string">&#39;t_slave&#39;</span><span class="token punctuation">;</span>  
  
<span class="token comment"># 删除外键约束  </span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> t_slave <span class="token keyword">drop</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span> t_slave_ibfk_1<span class="token punctuation">;</span>  
  
<span class="token comment"># 查看索引  </span>
<span class="token keyword">show</span> <span class="token keyword">index</span> <span class="token keyword">from</span> t_slave<span class="token punctuation">;</span>  
  
<span class="token comment"># 删除创建外键约束时附带创建的索引  </span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> t_slave <span class="token keyword">drop</span> <span class="token keyword">index</span> master_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h1 id="六、事务" tabindex="-1"><a class="header-anchor" href="#六、事务" aria-hidden="true">#</a> 六、事务</h1><h2 id="_1、概念" tabindex="-1"><a class="header-anchor" href="#_1、概念" aria-hidden="true">#</a> 1、概念</h2><p>实际开发过程中，往往完成一个完整的业务功能需要执行多条SQL语句。而整体功能中的每一条SQL语句都缺一不可，一旦任何一条SQL语句执行失败，数据就会变得不正确。</p><br><p>以银行转换为例：</p><ul><li>A账户转出100元，执行update语句</li><li>B账户转入100元，执行update语句</li><li>A账户所在银行保存交易记录，执行insert语句</li><li>B账户所在银行保存交易记录，执行insert语句</li><li>总行保存交易记录，执行insert语句</li></ul><br><p>以上操作缺失任何一个，整个功能就执行失败了。所以这些SQL语句必须当作一个整体来对待。</p><p>要生效一起生效，有任何失败则整体撤销。</p><br><h2 id="_2、事务acid特性" tabindex="-1"><a class="header-anchor" href="#_2、事务acid特性" aria-hidden="true">#</a> 2、事务ACID特性</h2><h3 id="_1automicity原子性" tabindex="-1"><a class="header-anchor" href="#_1automicity原子性" aria-hidden="true">#</a> ①Automicity原子性</h3><p>从功能逻辑的角度来说：事务中的各个操作缺一不可，不可再分。缺少任何一个操作，事务整体在逻辑上就不成立了，就不能满足业务需求了。</p><br><p>上面转账是一个例子，这里我们再举一个下单的例子：</p><ul><li>保存订单数据：t_order表执行insert操作</li><li>保存订单详情数据：t_order_item表执行insert操作</li><li>更新库存数据：t_stock表执行update操作</li><li>更新销量数据：t_sales表执行update操作</li><li>更新用户积分：t_user_score表执行update操作</li></ul><br><h3 id="_2consistency一致性" tabindex="-1"><a class="header-anchor" href="#_2consistency一致性" aria-hidden="true">#</a> ②Consistency一致性</h3><p>事务执行前，数据处于一致性状态——说白了就是都正确。</p><p>事务执行后，数据仍然处于一致性状态。</p><br><p>为了做到这一点：</p><ul><li>提交事务：事务中所有操作全部都成功（要么都做）</li><li>回滚事务：事务中有任何一个操作失败（要么都撤）</li></ul><br><h3 id="_3isolation隔离性" tabindex="-1"><a class="header-anchor" href="#_3isolation隔离性" aria-hidden="true">#</a> ③Isolation隔离性</h3><p>事务可以在彼此隔离的状态下并发执行。</p><br><h3 id="_4durability持久性" tabindex="-1"><a class="header-anchor" href="#_4durability持久性" aria-hidden="true">#</a> ④Durability持久性</h3><p>事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响。</p><br><h2 id="_3、测试" tabindex="-1"><a class="header-anchor" href="#_3、测试" aria-hidden="true">#</a> 3、测试</h2><h3 id="_1开启事务" tabindex="-1"><a class="header-anchor" href="#_1开启事务" aria-hidden="true">#</a> ①开启事务</h3><p>MySQL中事务是默认开启的，也就是说，一条SQL语句执行完成后会自动提交。一条SQL语句自己是一个事务整体。</p><p>如果我们需要把多条SQL语句设置为一个事务，那显然需要手动控制，也就是把自动提交改成手动提交。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 下面语句执行之后，它之后的所有sql，都需要手动提交才能生效，直到恢复自动提交模式。</span>
<span class="token comment"># 关闭事务的自动提交方式一</span>
<span class="token keyword">set</span> autocommit <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token comment"># 关闭事务的自动提交方式二</span>
<span class="token keyword">set</span> autocommit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token comment"># 恢复事务为自动提交：把 autocommit 设置为 true 或 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">set</span> autocommit <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  

<span class="token comment"># 未提交时修改不生效</span>
<span class="token keyword">update</span> t_pig <span class="token keyword">set</span> pig_name<span class="token operator">=</span><span class="token string">&quot;uuu&quot;</span> <span class="token keyword">where</span> pig_id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>  

<span class="token keyword">commit</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2ddl不支持事务" tabindex="-1"><a class="header-anchor" href="#_2ddl不支持事务" aria-hidden="true">#</a> ②DDL不支持事务</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 说明：DDL不支持事务</span>
<span class="token comment"># DDL：create,drop,alter等创建库、创建表、删除库、删除表、修改库、修改表结构等这些语句不支持事务。</span>
<span class="token comment"># 换句话只有insert,update,delete语句支持事务。</span>
<span class="token comment"># TRUNCATE 表名称; 清空整个表的数据，不支持事务。 把表drop掉，新建一张表。</span>

<span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span>
<span class="token keyword">TRUNCATE</span> t_employee<span class="token punctuation">;</span>
<span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span> <span class="token comment"># 回滚无效</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4、事务隔离级别" tabindex="-1"><a class="header-anchor" href="#_4、事务隔离级别" aria-hidden="true">#</a> 4、事务隔离级别</h2><p>**数据库事务的隔离性**：数据库系统必须具有隔离并发运行各个事务的能力, 使它们不会相互影响, 避免各种并发问题。</p><p>**一个事务与其他事务隔离的程度称为隔离级别。** 数据库规定了多种事务隔离级别, 不同隔离级别对应不同的干扰程度, 隔离级别越高, 数据一致性就越好, 但并发性越弱。</p><br><h3 id="_1并发问题" tabindex="-1"><a class="header-anchor" href="#_1并发问题" aria-hidden="true">#</a> ①并发问题</h3><table><thead><tr><th>并发问题</th><th>现象描述</th></tr></thead><tbody><tr><td>脏读</td><td>事务A读取了事务B修改的数据，但是事务B回滚了操作，事务A读取到的数据就是错误的，这样的数据我们称之为脏数据。</td></tr><tr><td>不可重复读</td><td>事务A在执行期间多次读取同一个数据，但是由于这个数据被其它事务修改了，所以每次读取到的数据不一样。</td></tr><tr><td>幻读</td><td>事务A执行过程中，表中的记录数量有变化，就像发生了幻觉。</td></tr></tbody></table><br><h3 id="_2隔离级别" tabindex="-1"><a class="header-anchor" href="#_2隔离级别" aria-hidden="true">#</a> ②隔离级别</h3><table><thead><tr><th>隔离级别</th><th>英文名称</th><th>工作机制</th><th>可以解决的并发问题</th></tr></thead><tbody><tr><td>读未提交</td><td>read-uncommitted</td><td>当前事务可以读取其它事务尚未提交的修改</td><td>无</td></tr><tr><td>读已提交</td><td>read-committed</td><td>当前事务只读取其它事务已经提交的修改</td><td>脏读</td></tr><tr><td>可重复读</td><td>repeatable-read</td><td>当前事务在读取数据过程中多次读取同一个数据可以得到相同结果</td><td>脏读、不可重复读</td></tr><tr><td>串行化</td><td>serializable</td><td>当前事务执行过程中，锁定整个表</td><td>脏读、不可重复读、幻读</td></tr></tbody></table><br><ul><li>数据一致性评价：从上到下，数据一致性越来越好</li><li>性能评价：从上到下，性能越来越差</li></ul><br><h3 id="_3产品支持" tabindex="-1"><a class="header-anchor" href="#_3产品支持" aria-hidden="true">#</a> ③产品支持</h3><ul><li>Oracle只支持READ-COMMITED和SERIALIZABLE。默认隔离级别是READ-COMMITED。</li><li>MySQL支持四种隔离级别，默认是REPEATABLE-READ。由于MySQL内部使用了MVCC多版本控制技术，所以在REPEATABLE-READ这个级别也可以避免幻读。</li></ul><h3 id="_4查看事务隔离级别" tabindex="-1"><a class="header-anchor" href="#_4查看事务隔离级别" aria-hidden="true">#</a> ④查看事务隔离级别</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 全局范围  </span>
<span class="token keyword">SELECT</span> @<span class="token variable">@global.transaction_isolation</span><span class="token punctuation">;</span>  
  
<span class="token comment"># 当前会话范围  </span>
<span class="token keyword">SELECT</span> @<span class="token variable">@session.transaction_isolation</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5设置事务隔离级别" tabindex="-1"><a class="header-anchor" href="#_5设置事务隔离级别" aria-hidden="true">#</a> ⑤设置事务隔离级别</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 全局范围  </span>
<span class="token keyword">SET</span> <span class="token keyword">global</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION</span> <span class="token keyword">LEVEL</span> <span class="token keyword">read</span> <span class="token keyword">committed</span><span class="token punctuation">;</span>  

<span class="token comment"># 当前会话范围  </span>
<span class="token keyword">SET</span> <span class="token keyword">SESSION</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION</span> <span class="token keyword">LEVEL</span> <span class="token keyword">read</span> <span class="token keyword">committed</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="七、选学内容" tabindex="-1"><a class="header-anchor" href="#七、选学内容" aria-hidden="true">#</a> 七、选学内容</h1><br><h2 id="_1、mysql字符集与比较规则" tabindex="-1"><a class="header-anchor" href="#_1、mysql字符集与比较规则" aria-hidden="true">#</a> 1、MySQL字符集与比较规则</h2><br><p>在很多资料文档中，我们经常会看到这样的建库语句：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> my_database <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><p>这条语句的含义是创建数据库的同时设置字符集和排序规则。那么为什么这里的字符集是utf8mb4呢？排序规则又是什么意思呢？下面我们先从字符集说起。</p><br><h3 id="_1字符集" tabindex="-1"><a class="header-anchor" href="#_1字符集" aria-hidden="true">#</a> ①字符集</h3><p>计算机中保存任何数据都是用二进制数。那么为什么二进制数可以展示出文本、图像、音频、视频等等这些丰富多彩的媒体形式呢？</p><ul><li>编码：把文本、图像、音频、视频信号按照特定算法进行编码，得到二进制数据。</li><li>解码：读取二进制数据按照特定算法得到文本、图像、音频、视频信号。</li></ul><br><p>所谓字符集就是把一个一个字符和特定二进制数对应起来的表格。不同字符集的对应关系是不同的。</p><br><ol><li><p>UTF-8（Unicode字符集）：UTF-8是最常用的字符集之一，能够表示几乎所有的字符，包括国际字符集和特殊符号。它支持各种语言，如英语、汉语、德语、法语等。</p></li><li><p>Latin1（ISO 8859-1字符集）：Latin1是西欧国家最常用的字符集，也被称为ISO 8859-1字符集。它支持大部分欧洲语言，但不支持亚洲字符。</p></li><li><p>GBK（中文字符集）：GBK是基于GB2312标准扩展的字符集，主要用于存储简体中文字符。它支持汉字、数字和标点符号。</p></li><li><p>Latin2（ISO 8859-2字符集）：Latin2是中欧国家常用的字符集，也被称为ISO 8859-2字符集。它支持波兰语、捷克语等中欧地区的语言。</p></li><li><p><strong>UTF8MB4</strong>（UTF-8的超集）：UTF8MB4是UTF-8的一个变种，支持辅助平面字符（如Emoji表情符号）。它比标准的UTF-8字符集更全面，适用于处理包含辅助平面字符的数据。</p></li></ol><h3 id="_2排序规则" tabindex="-1"><a class="header-anchor" href="#_2排序规则" aria-hidden="true">#</a> ②排序规则</h3><p>在MySQL中，排序规则（Collation）用于定义字符串比较的方式。它决定了在排序和比较操作中，如何对字符进行排序、比较和区分大小写。</p><p>排序规则主要作用于下列情况：</p><ul><li>ORDER BY语句：在查询中使用ORDER BY子句对结果进行排序时。</li><li>比较运算符：比较字符串值时，如=、&lt;、&gt;等运算符。</li><li>字符串索引：对字符串类型的列创建索引时，根据排序规则确定索引的顺序。</li></ul><p>排序规则由两部分组成：字符集（Character Set）和排序规则本身（Collation）。字符集定义了可以存储的字符集合，而排序规则则定义了如何对这些字符进行排序和比较。</p><p>例如，常见的排序规则是utf8mb4_general_ci，其中&quot;utf8mb4&quot;表示字符集为utf8mb4，而&quot;general_ci&quot;表示不区分大小写（case-insensitive）。这意味着在排序和比较时，不考虑字符的大小写差异。</p><p>MySQL排序规则列表如下：</p><table><thead><tr><th>排序规则</th><th>介绍</th></tr></thead><tbody><tr><td>utf8mb4_general_ci</td><td>不区分大小写，以通用排序规则对字符串进行排序</td></tr><tr><td>utf8mb4_bin</td><td>区分大小写，以二进制方式对字符串进行排序</td></tr><tr><td>utf8mb4_unicode_ci</td><td>不区分大小写，使用Unicode排序算法对字符串进行排序。<br>支持多语言排序，包括特殊字符和变音符号。</td></tr><tr><td>utf8mb4_unicode_520_ci</td><td>不区分大小写，基于Unicode 5.20版本的排序规则。<br>支持更广泛的语言和排序方式</td></tr><tr><td>utf8_general_ci</td><td>不区分大小写，以通用排序规则对字符串进行排序。<br>适用于旧版本的UTF-8字符集</td></tr><tr><td>utf8_bin</td><td>区分大小写，以二进制方式对字符串进行排序。适用于旧版本的UTF-8字符集</td></tr><tr><td>latin1_swedish_ci</td><td>不区分大小写，以瑞典语排序规则对字符串进行排序。<br>适用于ISO 8859-1字符集</td></tr></tbody></table><br><h2 id="_2、mysql数据类型进阶" tabindex="-1"><a class="header-anchor" href="#_2、mysql数据类型进阶" aria-hidden="true">#</a> 2、MySQL数据类型进阶</h2><h3 id="_1varchar格式最大长度的计算方式" tabindex="-1"><a class="header-anchor" href="#_1varchar格式最大长度的计算方式" aria-hidden="true">#</a> ①VARCHAR格式最大长度的计算方式</h3><blockquote><p>char(M)，M的范围是0~255。</p></blockquote><br><h4 id="_1-行格式" tabindex="-1"><a class="header-anchor" href="#_1-行格式" aria-hidden="true">#</a> [1]行格式</h4><p>在MySQL中，行格式（Row Format）是指存储引擎用来表示数据行的方式。不同的行格式会影响到表格的存储空间、查询效率和可靠性等方面。</p><p>常见的行格式包括Dynamic、Fixed和Compact三种。其中，Dynamic和Compact都是InnoDB存储引擎的行格式，而Fixed则主要应用于MyISAM存储引擎。这里我们重点了解一下InnoDB存储引擎中的Dynamic和Compact行格式。</p><p>Dynamic行格式（也称为DYNAMIC或者Dynamically sized rows）是一种变长行格式，可以根据实际数据长度动态调整存储空间。在Dynamic行格式中，每个数据列前面都会有一个额外的字节用于存储该列的长度信息。这使得变长类型的数据（如VARCHAR和TEXT等）可以更加高效地存储，并且在插入或更新数据时，可以避免数据的碎片化和浪费。</p><p>与Dynamic行格式相比，Compact行格式更加紧凑，适合存储较小的数据行。它不会像Dynamic行格式那样存储每个变长列的长度信息，而是通过一些算法来进行数据压缩和存储。这使得Compact行格式存储空间更小，但也导致在更新变长类型的数据时需要进行更多的操作，可能会影响到性能。</p><p><b>不同行格式下，一条记录所占存储空间不同。</b></p><br><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 查看表的状态，包含行格式信息</span>
<span class="token keyword">show</span> <span class="token keyword">table</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">&quot;t_pig&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="_2-varchar字段所占空间" tabindex="-1"><a class="header-anchor" href="#_2-varchar字段所占空间" aria-hidden="true">#</a> [2]varchar字段所占空间</h4><p>一条记录所占空间（字节数）减去行头信息空间，再减去其它字段占空间，剩下的就是一个varchar字段所占空间（字节数）。</p><h4 id="_3-单个字符所占空间" tabindex="-1"><a class="header-anchor" href="#_3-单个字符所占空间" aria-hidden="true">#</a> [3]单个字符所占空间</h4><table><thead><tr><th>字符集</th><th>单个字符所需字节</th></tr></thead><tbody><tr><td>ASCII</td><td>1</td></tr><tr><td>Latin1</td><td>1</td></tr><tr><td>UTF-8</td><td>1~4</td></tr><tr><td>GBK</td><td>2</td></tr></tbody></table><br><h4 id="_4-最终计算方式" tabindex="-1"><a class="header-anchor" href="#_4-最终计算方式" aria-hidden="true">#</a> [4]最终计算方式</h4><p>(一条记录总共占空间字节数-行头信息所占空间字节数-其它字段所占空间字节数)/具体字符集下每个字符所占空间字节数</p><br><h3 id="_2枚举类型" tabindex="-1"><a class="header-anchor" href="#_2枚举类型" aria-hidden="true">#</a> ②枚举类型</h3><p>ENUM类型的字段在赋值时，只能在指定的枚举列表中取值，而且一次只能取一个。枚举列表最多可以有65535个成员。ENUM值在内部用整数表示，每个枚举值均有一个索引值， MySQL存储的就是这个索引编号。例如，定义ENUM类型的列(‘first’, ‘second’, ‘third’)。</p><br><p>SET类型的字段在赋值时，可从定义的值列表中选择1个或多个值的组合。SET列最多可以有64个成员。SET值在内部也用整数表示，分别是1，2，4，8……，都是2的n次方值，因为这些整数值对应的二进制都是只有1位是1，其余是0。</p><h3 id="_3binary和varbinary" tabindex="-1"><a class="header-anchor" href="#_3binary和varbinary" aria-hidden="true">#</a> ③BINARY和VARBINARY</h3><p>BINARY和VARBINARY类似于CHAR和VARCHAR，只是它们存储的是二进制字符串。</p><p>BINARY (M)为固定长度的二进制字符串，M表示最多能存储的字节数，取值范围是0~255个字节，如果未指定(M)表示只能存储1个字节。例如BINARY (8)，表示最多能存储8个字节，如果字段值不足(M)个字节，将在右边填充&#39;\\0&#39;以补齐指定长度。</p><p>VARBINARY (M)为可变长度的二进制字符串，M表示最多能存储的字节数，总字节数不能超过行的字节长度限制65535，另外还要考虑额外字节开销，VARBINARY类型的数据除了存储数据本身外，还需要1或2个字节来存储数据的字节数。VARBINARY类型和VARCHAR类型一样必须指定(M)，否则报错。</p><h3 id="_4blob和text类型" tabindex="-1"><a class="header-anchor" href="#_4blob和text类型" aria-hidden="true">#</a> ④BLOB和TEXT类型</h3><p>BLOB是一个二进制大对象，用来存储可变数量的二进制字符串，分为TINYBLOB、BLOB、MEDIUMBLOB、LONGBLOB四种类型。TINYTEXT、TEXT、MEDIUMTEXT和LONGTEXT四种文本类型，它们分别对应于以上四种BLOB类型，具有相同的最大长度和存储要求。</p><p>BLOB类型与TEXT类型的区别如下：</p><ul><li>BLOB类型存储的是二进制字符串，TEXT类型存储的是文本字符串。BLOB类型还可以存储图片和声音等二进制数据。</li><li>BLOB类型没有字符集，并且排序和比较基于列值字节的数值，TEXT类型有一个字符集，并且根据字符集对值进行排序和比较。</li></ul><br><h3 id="_5日期时间类型" tabindex="-1"><a class="header-anchor" href="#_5日期时间类型" aria-hidden="true">#</a> ⑤日期时间类型</h3><table><thead><tr><th>类型名称</th><th>类型说明</th><th>字节数</th><th>日期格式</th><th>取值范围</th></tr></thead><tbody><tr><td>YEAR</td><td>年份</td><td>1</td><td>&#39;YYYY&#39;</td><td>1901 到 2155</td></tr><tr><td>DATE</td><td>日期值</td><td>3</td><td>&#39;YYYY-MM-DD&#39;</td><td>&#39;1000-01-01&#39; 到 &#39;9999-12-31&#39;</td></tr><tr><td>TIME</td><td>时间值</td><td>3</td><td>&#39;HH:MM:SS&#39;</td><td>&#39;-838:59:59&#39; 到 &#39;838:59:59&#39;</td></tr><tr><td>DATETIME</td><td>日期和时间组合</td><td>8</td><td>&#39;YYYY-MM-DD HH:MM:SS&#39;</td><td>&#39;1000-01-01 00:00:00&#39; 到 &#39;9999-12-31 23:59:59&#39;</td></tr><tr><td>TIMESTAMP</td><td>时间戳，记录时间和时区</td><td>4</td><td>&#39;YYYY-MM-DD HH:MM:SS&#39;</td><td>&#39;1970-01-01 00:00:01&#39; 到 &#39;2038-01-19 03:14:07&#39; (32位系统)</td></tr></tbody></table><br><h3 id="_6double类型" tabindex="-1"><a class="header-anchor" href="#_6double类型" aria-hidden="true">#</a> ⑥double类型</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># double类型也可以指定小数的精度  </span>
<span class="token comment"># double(整个数据一共多少位,小数部分占多少位)  </span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> t_worker <span class="token keyword">add</span> worker_salary <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="_3、sql脚本导入、导出" tabindex="-1"><a class="header-anchor" href="#_3、sql脚本导入、导出" aria-hidden="true">#</a> 3、SQL脚本导入、导出</h2><h3 id="_1sql脚本导入" tabindex="-1"><a class="header-anchor" href="#_1sql脚本导入" aria-hidden="true">#</a> ①SQL脚本导入</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> <span class="token builtin class-name">source</span> d:<span class="token punctuation">\\</span>dir<span class="token punctuation">\\</span>database.sql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_2sql脚本导出" tabindex="-1"><a class="header-anchor" href="#_2sql脚本导出" aria-hidden="true">#</a> ②SQL脚本导出</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysqldump <span class="token operator">-</span>u用戶名 <span class="token operator">-</span>p密码 数据库名 <span class="token operator">&gt;</span> 脚本名<span class="token punctuation">.</span><span class="token keyword">sql</span>
mysqldump <span class="token operator">-</span>u用戶名 <span class="token operator">-</span>p密码 数据库名 表名 <span class="token operator">&gt;</span> 脚本名<span class="token punctuation">.</span><span class="token keyword">sql</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="_4、用户管理" tabindex="-1"><a class="header-anchor" href="#_4、用户管理" aria-hidden="true">#</a> 4、用户管理</h2><h3 id="_1简介" tabindex="-1"><a class="header-anchor" href="#_1简介" aria-hidden="true">#</a> ①简介</h3><p>MySQL中的用户和权限都保存在mysql系统库相应的数据表中。MySQL服务器通过权限表来控制用户对数据库的访问，由MySQL_install_db脚本初始化。存储账户权限信息的表主要有user、db、host、tables_priv、columns_priv和procs_priv。</p><ul><li>user表：存储连接MySQL服务的账户信息，账户对全局有效；</li><li>db表：存储用户对某个具体数据库的操作权限；</li><li>tables_priv表：存储用户对某个数据表的操作权限；</li><li>columns_priv表：存储用户对数据表的某一列的操作权限；</li><li>procs_priv表：存储用户对存储过程和函数的操作权限。</li></ul><br><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 查看用户信息</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_2操作" tabindex="-1"><a class="header-anchor" href="#_2操作" aria-hidden="true">#</a> ②操作</h3>`,156),Tn={href:"https://www.wolai.com/tmX1oTbMDWEhgBsuRVZEGn",target:"_blank",rel:"noopener noreferrer"},Rn=n("h2",{id:"_5、部分mysql8新特性",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5、部分mysql8新特性","aria-hidden":"true"},"#"),s(" 5、部分MySQL8新特性")],-1),An={href:"https://www.wolai.com/3UXPapMAEcnCjNvjyCnGxh",target:"_blank",rel:"noopener noreferrer"};function Qn(On,Cn){const e=l("ExternalLinkIcon");return i(),c("div",null,[Sn,s(" - 系统预定义函数：MySQL数据库管理软件给我们提供好的函数，直接用就可以，任何数据库都可以用公共的函数。 - 聚合函数：或者又称为分组函数，多行函数，表示会对表中的多行记录一起做一个“运算”，得到一个结果。 - 单行函数：表示会对表中的每一行记录分别计算，有n行得到还是n行结果 - 用户自定义函数：由开发人员自己定义的，通过CREATE FUNCTION语句定义，是属于某个数据库的对象。 "),Ln,s(" 如果t_emp表通过dept_id字段关联到t_dept表，那么外键约束会要求t_emp表中的dept_id字段值在t_dept表中都能够找到。 "),Mn,n("p",null,[n("a",Tn,[s("第三章 MySQL8与可视化工具sqlyog (wolai.com)"),t(e)])]),Rn,n("p",null,[n("a",An,[s("第二章 MySQL8与SQL语言 (wolai.com)"),t(e)])])])}const In=o(xn,[["render",Qn],["__file","note01-mysql.html.vue"]]);export{In as default};
