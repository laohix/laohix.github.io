import{_ as p,o as e,c as t,d as n,e as a,a as s}from"./app-8007fa1b.js";const o="/assets/image-20230620101211706-bc312e51.png",c="/assets/image-20230620101818139-39b3c16e.png",l="/assets/image-20230620102021483-cfd4ca40.png",i="/assets/image-20230620102445127-5d5818bc.png",u="/assets/image-20230620102929920-2f259bff.png",k="/assets/image-20230620103258876-2cee67bc.png",r="/assets/image-20230620103414738-76b3a77a.png",d="/assets/image-20230620103520098-19f46168.png",m="/assets/image-20230620110214479-c18a74fe.png",b="/assets/image-20230620110425801-5246c142.png",v="/assets/image-20230620110712828-07078314.png",y="/assets/image-20230620111016458-3ad23792.png",w="/assets/image-20230620111724680-43d7d6a0.png",E="/assets/image-20230620112213933-4f993e35.png",h="/assets/image-20230620112352974-f19ddd3e.png",N="/assets/image-20230620113022710-aa02e4b8.png",g="/assets/image-20211121185234856-09c2dae0.png",_="/assets/image-20211121190241237-c3747058.png",O="/assets/image-20230620142048732-3a27ccd7.png",R="/assets/image-20230620142257007-4d304c41.png",I={},L=a(`<h1 id="一、mysql关联查询优化" tabindex="-1"><a class="header-anchor" href="#一、mysql关联查询优化" aria-hidden="true">#</a> 一、MySQL关联查询优化</h1><h2 id="_1、数据准备" tabindex="-1"><a class="header-anchor" href="#_1、数据准备" aria-hidden="true">#</a> 1、数据准备</h2><p>创建两张表，并分插入16条和20条数据：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 分类</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">\`</span>class<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
<span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">\`</span>card<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 图书</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">\`</span>book<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
<span class="token identifier"><span class="token punctuation">\`</span>bookid<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">\`</span>card<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>bookid<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">-- 插入16条记录</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> class<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> class<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> class<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> class<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> class<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> class<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> class<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> class<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> class<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> class<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> class<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> class<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> class<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> class<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> class<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> class<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">-- 插入20条记录</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> book<span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、左外连接" tabindex="-1"><a class="header-anchor" href="#_2、左外连接" aria-hidden="true">#</a> 2、左外连接</h2><p>没有创建索引前的测试： 进行了全表扫描，查询次数为16*20</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> class <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> book <span class="token keyword">ON</span> class<span class="token punctuation">.</span>card <span class="token operator">=</span> book<span class="token punctuation">.</span>card<span class="token punctuation">;</span>
<span class="token comment">-- 左表class：驱动表、右表book：被驱动表</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果如下所示：</p><p><img src="`+o+`" alt="image-20230620101211706"></p><h3 id="_1测试1" tabindex="-1"><a class="header-anchor" href="#_1测试1" aria-hidden="true">#</a> ①测试1</h3><p>在驱动表上创建索引：进行了全索引扫描，查询次数是16*20<br></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建索引</span>
<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_class_card <span class="token keyword">ON</span> class<span class="token punctuation">(</span>card<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果如下所示：</p><p><img src="`+c+`" alt="image-20230620101818139"></p><h3 id="_2测试2" tabindex="-1"><a class="header-anchor" href="#_2测试2" aria-hidden="true">#</a> ②测试2</h3><p>仅在被驱动表上创建索引：可以避免全表扫描，查询次数是16*1</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 首先删除之前创建的索引</span>
<span class="token keyword">drop</span> <span class="token keyword">index</span> idx_class_card <span class="token keyword">on</span> class <span class="token punctuation">;</span>

<span class="token comment">-- 创建索引</span>
<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_book_card <span class="token keyword">ON</span> book<span class="token punctuation">(</span>card<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果如下所示：</p><p><img src="`+l+`" alt="image-20230620102021483"></p><h3 id="_3测试3" tabindex="-1"><a class="header-anchor" href="#_3测试3" aria-hidden="true">#</a> ③测试3</h3><p>同时给两张表添加索引：充分利用了索引，查询次数是16*1</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 已经有了book索引</span>
<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_class_card <span class="token keyword">ON</span> class<span class="token punctuation">(</span>card<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果如下所示：</p><p><img src="`+i+`" alt="image-20230620102445127"></p><p>结论：针对两张表的连接条件涉及的列，索引要创建在被驱动表上，驱动表尽量是小表</p><h2 id="_3、内连接" tabindex="-1"><a class="header-anchor" href="#_3、内连接" aria-hidden="true">#</a> 3、内连接</h2><p>测试：将前面外连接中的LEFT JOIN 变成 INNER JOIN</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 换成inner join</span>
<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> class <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> book <span class="token keyword">ON</span> class<span class="token punctuation">.</span>card<span class="token operator">=</span>book<span class="token punctuation">.</span>card<span class="token punctuation">;</span>

<span class="token comment">-- 交换class和book的位置</span>
<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> book <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> class <span class="token keyword">ON</span> class<span class="token punctuation">.</span>card<span class="token operator">=</span>book<span class="token punctuation">.</span>card<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1都有索引" tabindex="-1"><a class="header-anchor" href="#_1都有索引" aria-hidden="true">#</a> ①都有索引</h3><p>查询优化器自动选择数据量小的表做为驱动表</p><p><img src="`+u+'" alt="image-20230620102929920"></p><h3 id="_2仅class表有索引" tabindex="-1"><a class="header-anchor" href="#_2仅class表有索引" aria-hidden="true">#</a> ②仅class表有索引</h3><p>book表是驱动表</p><p><img src="'+k+'" alt="image-20230620103258876"></p><br><h3 id="_3book表有索引" tabindex="-1"><a class="header-anchor" href="#_3book表有索引" aria-hidden="true">#</a> ③book表有索引</h3><p>class表是驱动表</p><p><img src="'+r+'" alt="image-20230620103414738"></p><br><h3 id="_4都没有索引" tabindex="-1"><a class="header-anchor" href="#_4都没有索引" aria-hidden="true">#</a> ④都没有索引</h3><p>选择数据量小的表做为驱动表</p><p><img src="'+d+`" alt="image-20230620103520098"></p><h3 id="_5结论" tabindex="-1"><a class="header-anchor" href="#_5结论" aria-hidden="true">#</a> ⑤结论</h3><ul><li>发现即使交换表的位置，MySQL优化器也会自动选择驱动表。</li><li>自动选择驱动表的原则是：索引创建在被驱动表上，驱动表是小表。</li></ul><br><h2 id="_4、不同查询方式对比" tabindex="-1"><a class="header-anchor" href="#_4、不同查询方式对比" aria-hidden="true">#</a> 4、不同查询方式对比</h2><h3 id="_1准备数据" tabindex="-1"><a class="header-anchor" href="#_1准备数据" aria-hidden="true">#</a> ①准备数据</h3><p>需求：查询每一个人物所对应的掌门人名称</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>t_dept<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
 <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
 <span class="token identifier"><span class="token punctuation">\`</span>deptName<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
 <span class="token identifier"><span class="token punctuation">\`</span>address<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
 <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>t_emp<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
 <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
 <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
 <span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
 <span class="token identifier"><span class="token punctuation">\`</span>deptId<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">\`</span>empno<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
 <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">\`</span>idx_dept_id<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>deptId<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
 <span class="token comment">#CONSTRAINT \`fk_dept_id\` FOREIGN KEY (\`deptId\`) REFERENCES \`t_dept\` (\`id\`)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_dept<span class="token punctuation">(</span>id<span class="token punctuation">,</span>deptName<span class="token punctuation">,</span>address<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;华山&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;华山&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_dept<span class="token punctuation">(</span>id<span class="token punctuation">,</span>deptName<span class="token punctuation">,</span>address<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;丐帮&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;洛阳&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_dept<span class="token punctuation">(</span>id<span class="token punctuation">,</span>deptName<span class="token punctuation">,</span>address<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;峨眉&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;峨眉山&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_dept<span class="token punctuation">(</span>id<span class="token punctuation">,</span>deptName<span class="token punctuation">,</span>address<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&#39;武当&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;武当山&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_dept<span class="token punctuation">(</span>id<span class="token punctuation">,</span>deptName<span class="token punctuation">,</span>address<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&#39;明教&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;光明顶&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_dept<span class="token punctuation">(</span>id<span class="token punctuation">,</span>deptName<span class="token punctuation">,</span>address<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">&#39;少林&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;少林寺&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_emp<span class="token punctuation">(</span>id<span class="token punctuation">,</span>NAME<span class="token punctuation">,</span>age<span class="token punctuation">,</span>deptId<span class="token punctuation">,</span>empno<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;风清扬&#39;</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_emp<span class="token punctuation">(</span>id<span class="token punctuation">,</span>NAME<span class="token punctuation">,</span>age<span class="token punctuation">,</span>deptId<span class="token punctuation">,</span>empno<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;岳不群&#39;</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100002</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_emp<span class="token punctuation">(</span>id<span class="token punctuation">,</span>NAME<span class="token punctuation">,</span>age<span class="token punctuation">,</span>deptId<span class="token punctuation">,</span>empno<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;令狐冲&#39;</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100003</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_emp<span class="token punctuation">(</span>id<span class="token punctuation">,</span>NAME<span class="token punctuation">,</span>age<span class="token punctuation">,</span>deptId<span class="token punctuation">,</span>empno<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&#39;洪七公&#39;</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">100004</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_emp<span class="token punctuation">(</span>id<span class="token punctuation">,</span>NAME<span class="token punctuation">,</span>age<span class="token punctuation">,</span>deptId<span class="token punctuation">,</span>empno<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&#39;乔峰&#39;</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">100005</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_emp<span class="token punctuation">(</span>id<span class="token punctuation">,</span>NAME<span class="token punctuation">,</span>age<span class="token punctuation">,</span>deptId<span class="token punctuation">,</span>empno<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">&#39;灭绝师太&#39;</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">100006</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_emp<span class="token punctuation">(</span>id<span class="token punctuation">,</span>NAME<span class="token punctuation">,</span>age<span class="token punctuation">,</span>deptId<span class="token punctuation">,</span>empno<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">&#39;周芷若&#39;</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">100007</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_emp<span class="token punctuation">(</span>id<span class="token punctuation">,</span>NAME<span class="token punctuation">,</span>age<span class="token punctuation">,</span>deptId<span class="token punctuation">,</span>empno<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">&#39;张三丰&#39;</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">100008</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_emp<span class="token punctuation">(</span>id<span class="token punctuation">,</span>NAME<span class="token punctuation">,</span>age<span class="token punctuation">,</span>deptId<span class="token punctuation">,</span>empno<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">&#39;张无忌&#39;</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">100009</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_emp<span class="token punctuation">(</span>id<span class="token punctuation">,</span>NAME<span class="token punctuation">,</span>age<span class="token punctuation">,</span>deptId<span class="token punctuation">,</span>empno<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">&#39;韦小宝&#39;</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">100010</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 给t_dept表添加ceo字段，该字段的值为t_emp表的id</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> t_dept <span class="token keyword">ADD</span> CEO <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">UPDATE</span> t_dept <span class="token keyword">SET</span> CEO<span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">UPDATE</span> t_dept <span class="token keyword">SET</span> CEO<span class="token operator">=</span><span class="token number">4</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">UPDATE</span> t_dept <span class="token keyword">SET</span> CEO<span class="token operator">=</span><span class="token number">6</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">UPDATE</span> t_dept <span class="token keyword">SET</span> CEO<span class="token operator">=</span><span class="token number">8</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>
<span class="token keyword">UPDATE</span> t_dept <span class="token keyword">SET</span> CEO<span class="token operator">=</span><span class="token number">9</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_2方式一-三表左连接方式" tabindex="-1"><a class="header-anchor" href="#_2方式一-三表左连接方式" aria-hidden="true">#</a> ②方式一：三表左连接方式</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 员工表(t_emp)、部门表(t_dept)、ceo(t_emp)表 关联查询</span>
<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> emp<span class="token punctuation">.</span>name<span class="token punctuation">,</span> ceo<span class="token punctuation">.</span>name <span class="token keyword">AS</span> ceoname 
<span class="token keyword">FROM</span> t_emp emp
<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> t_dept dept <span class="token keyword">ON</span> emp<span class="token punctuation">.</span>deptid <span class="token operator">=</span> dept<span class="token punctuation">.</span>id 
<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> t_emp ceo <span class="token keyword">ON</span> dept<span class="token punctuation">.</span>ceo <span class="token operator">=</span> ceo<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果如下所示：</p><p><img src="`+m+`" alt="image-20230620110214479"></p><p>一趟查询，用到了主键索引，<strong>效果最佳</strong></p><br><h3 id="_3方式二-子查询方式" tabindex="-1"><a class="header-anchor" href="#_3方式二-子查询方式" aria-hidden="true">#</a> ③方式二：子查询方式</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">SELECT</span> 
emp<span class="token punctuation">.</span>name<span class="token punctuation">,</span> 
<span class="token punctuation">(</span><span class="token keyword">SELECT</span> ceo<span class="token punctuation">.</span>name <span class="token keyword">FROM</span> t_emp ceo <span class="token keyword">WHERE</span> ceo<span class="token punctuation">.</span>id <span class="token operator">=</span> dept<span class="token punctuation">.</span>ceo<span class="token punctuation">)</span> <span class="token keyword">AS</span> ceoname
<span class="token keyword">FROM</span> t_emp emp
<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> t_dept dept <span class="token keyword">ON</span> emp<span class="token punctuation">.</span>deptid <span class="token operator">=</span> dept<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果如下所示：</p><p><img src="`+b+`" alt="image-20230620110425801"></p><p>两趟查询，用到了主键索引，跟第一种比，效果稍微差点。</p><br><h3 id="_4方式三-在-from-子句使用临时表" tabindex="-1"><a class="header-anchor" href="#_4方式三-在-from-子句使用临时表" aria-hidden="true">#</a> ④方式三：在 FROM 子句使用临时表</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> emp_with_ceo_id<span class="token punctuation">.</span>name<span class="token punctuation">,</span> emp<span class="token punctuation">.</span>name <span class="token keyword">AS</span> ceoname <span class="token keyword">FROM</span> 
<span class="token comment">-- 查询所有员工及对应的ceo的id</span>
<span class="token punctuation">(</span> 
<span class="token keyword">SELECT</span> emp<span class="token punctuation">.</span>name<span class="token punctuation">,</span> dept<span class="token punctuation">.</span>ceo 
<span class="token keyword">FROM</span> t_emp emp 
<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> t_dept dept <span class="token keyword">ON</span> emp<span class="token punctuation">.</span>deptid <span class="token operator">=</span> dept<span class="token punctuation">.</span>id 
<span class="token punctuation">)</span> emp_with_ceo_id
<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> t_emp emp <span class="token keyword">ON</span> emp_with_ceo_id<span class="token punctuation">.</span>ceo <span class="token operator">=</span> emp<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果如下所示：</p><p><img src="`+v+`" alt="image-20230620110712828"></p><p>查询一趟，<strong>MySQL查询优化器将衍生表查询转换成了连接表查询</strong>，速度堪比第一种方式</p><br><h3 id="_5方式四-在-join-子句使用临时表" tabindex="-1"><a class="header-anchor" href="#_5方式四-在-join-子句使用临时表" aria-hidden="true">#</a> ⑤方式四：在 JOIN 子句使用临时表</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">SELECT</span> emp<span class="token punctuation">.</span>name<span class="token punctuation">,</span> ceo<span class="token punctuation">.</span>ceoname <span class="token keyword">FROM</span> t_emp emp <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span>
<span class="token punctuation">(</span> 
<span class="token keyword">SELECT</span> emp<span class="token punctuation">.</span>deptId <span class="token keyword">AS</span> deptId<span class="token punctuation">,</span> emp<span class="token punctuation">.</span>name <span class="token keyword">AS</span> ceoname 
<span class="token keyword">FROM</span> t_emp emp 
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> t_dept dept <span class="token keyword">ON</span> emp<span class="token punctuation">.</span>id <span class="token operator">=</span> dept<span class="token punctuation">.</span>ceo 
<span class="token punctuation">)</span> ceo
<span class="token keyword">ON</span> emp<span class="token punctuation">.</span>deptId <span class="token operator">=</span> ceo<span class="token punctuation">.</span>deptId<span class="token punctuation">;</span>

<span class="token comment">-- 查询并创建临时表ceo：包含ceo的部门id和ceo的name</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果如下所示：</p><p><img src="`+y+`" alt="image-20230620111016458"></p><p>查询一趟，MySQL查询优化器将衍生表查询转换成了连接表查询，但是只有一个表使用了索引，数据检索的次数稍多，性能最差。</p><h3 id="_6总结" tabindex="-1"><a class="header-anchor" href="#_6总结" aria-hidden="true">#</a> ⑥总结</h3><p>能够直接多表关联的尽量直接关联，不用子查询。(减少查询过程中大步骤的数量)</p><br><h1 id="二、mysql子查询优化" tabindex="-1"><a class="header-anchor" href="#二、mysql子查询优化" aria-hidden="true">#</a> 二、MySQL子查询优化</h1><p>需求：查询非掌门人的信息</p><h2 id="_1、方式一" tabindex="-1"><a class="header-anchor" href="#_1、方式一" aria-hidden="true">#</a> 1、方式一</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查询员工，这些员工的id没在（掌门人id列表中）</span>
<span class="token comment">-- 【查询不是CEO的员工】</span>
<span class="token keyword">explain</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_emp emp <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span>id <span class="token operator">NOT</span> <span class="token operator">IN</span> 
<span class="token punctuation">(</span><span class="token keyword">SELECT</span> dept<span class="token punctuation">.</span>ceo <span class="token keyword">FROM</span> t_dept dept <span class="token keyword">WHERE</span> dept<span class="token punctuation">.</span>ceo <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果如下所示：</p><p><img src="`+w+`" alt="image-20230620111724680"></p><br><h2 id="_2、方式二" tabindex="-1"><a class="header-anchor" href="#_2、方式二" aria-hidden="true">#</a> 2、方式二</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 推荐</span>
<span class="token keyword">explain</span> <span class="token keyword">SELECT</span> emp<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span> t_emp emp <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> t_dept dept <span class="token keyword">ON</span> emp<span class="token punctuation">.</span>id <span class="token operator">=</span> dept<span class="token punctuation">.</span>ceo <span class="token keyword">WHERE</span> dept<span class="token punctuation">.</span>id <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果如下所示：</p><p><img src="`+E+'" alt="image-20230620112213933"></p><br><p>也可以为ceo添加一个索引字段：</p><p><img src="'+h+`" alt="image-20230620112352974"></p><br><h2 id="_3、总结" tabindex="-1"><a class="header-anchor" href="#_3、总结" aria-hidden="true">#</a> 3、总结</h2><ul><li>实现同样的效果，关联查询要好于子查询</li><li>尽量不要使用NOT IN 或者 NOT EXISTS，用LEFT JOIN xxx ON xx = xx WHERE xx IS NULL替代</li></ul><br><h1 id="三、mysql排序优化" tabindex="-1"><a class="header-anchor" href="#三、mysql排序优化" aria-hidden="true">#</a> 三、MySQL排序优化</h1><h2 id="_1、排序索引失效情况" tabindex="-1"><a class="header-anchor" href="#_1、排序索引失效情况" aria-hidden="true">#</a> 1、排序索引失效情况</h2><h3 id="_1未使用过滤条件-索引无效" tabindex="-1"><a class="header-anchor" href="#_1未使用过滤条件-索引无效" aria-hidden="true">#</a> ①未使用过滤条件，索引无效</h3><p>准备工作：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 删除emp表中的所有的索引</span>
<span class="token comment">-- 创建新的索引结构</span>
<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_age_deptid_name <span class="token keyword">ON</span> emp <span class="token punctuation">(</span>age<span class="token punctuation">,</span>deptid<span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SQL演示：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 没有过滤条件，索引不生效：</span>
<span class="token comment">-- order by语句如果没有使用索引，在extra中会出现using filesort。</span>
<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> age<span class="token punctuation">,</span>deptid<span class="token punctuation">;</span>

<span class="token comment">-- 附加过滤条件，使索引生效（以 limit 子句作为过滤条件）：</span>
<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> age<span class="token punctuation">,</span>deptid <span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token comment">-- 附加过滤条件，使索引生效（以 where 子句作为过滤条件）：</span>
<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">where</span> age<span class="token operator">&gt;</span><span class="token number">50</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> age<span class="token punctuation">,</span>deptid<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果如下所示：</p><p><img src="`+N+`" alt="image-20230620113022710"></p><br><h3 id="_2方向不一致-索引无效" tabindex="-1"><a class="header-anchor" href="#_2方向不一致-索引无效" aria-hidden="true">#</a> ②方向不一致，索引无效</h3><p>SQL演示：<br></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 排序使用了索引：排序条件和索引一致，并方向相同，可以使用索引</span>
<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> age<span class="token operator">=</span><span class="token number">45</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> deptid <span class="token keyword">DESC</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">DESC</span><span class="token punctuation">;</span>

<span class="token comment">-- 排序未使用索引</span>
<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> age<span class="token operator">=</span><span class="token number">45</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> deptid <span class="token keyword">ASC</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">DESC</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_3其它细节" tabindex="-1"><a class="header-anchor" href="#_3其它细节" aria-hidden="true">#</a> ③其它细节</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 更多细节例子：</span>
<span class="token comment">-- 排序使用了索引</span>
<span class="token comment">-- 注意：key_len = 5是where语句使用age索引的标记，order by语句使用索引不在key_len中体现。</span>
<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> age<span class="token operator">=</span><span class="token number">45</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> deptid<span class="token punctuation">;</span>

<span class="token comment">-- 排序使用了索引</span>
<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> age<span class="token operator">=</span><span class="token number">45</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> deptid<span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>

<span class="token comment">-- 排序未使用索引：empno 字段未出现在索引中</span>
<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> age<span class="token operator">=</span><span class="token number">45</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> deptid<span class="token punctuation">,</span> empno<span class="token punctuation">;</span>

<span class="token comment">-- 排序未使用索引：排序字段顺序与索引不一致</span>
<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> age<span class="token operator">=</span><span class="token number">45</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> deptid<span class="token punctuation">;</span>

<span class="token comment">-- 排序没有使用索引：排序在条件过滤之后执行，条件过滤没有遵循最左前缀法则</span>
<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> deptid<span class="token operator">=</span><span class="token number">45</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> age<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="_2、排序优化案例" tabindex="-1"><a class="header-anchor" href="#_2、排序优化案例" aria-hidden="true">#</a> 2、排序优化案例</h2><p>排序优化的目的是，去掉 Extra 中的 using filesort，但这仅仅只是一个局部，更重要的是SQL本身执行效率足够高<br></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># ★★★准备工作 01：删除所有之前的索引</span>
<span class="token keyword">drop</span> <span class="token keyword">index</span> idx_age_name <span class="token keyword">on</span> emp<span class="token punctuation">;</span>

<span class="token comment"># ★★★准备工作 02：开启 profile 功能</span>
<span class="token keyword">SET</span> profiling <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">set</span> profiling_history_size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>

<span class="token comment"># ★★★测试场景 01：无任何索引</span>
<span class="token comment"># 执行 SQL 语句，配合 show profiles 查看消耗时间</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> emp<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">and</span> emp<span class="token punctuation">.</span>empno <span class="token operator">&lt;</span> <span class="token number">101000</span> <span class="token keyword">order</span> <span class="token keyword">BY</span> emp<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token punctuation">;</span>
<span class="token comment"># 执行耗时： 0.16191375</span>
<span class="token keyword">show</span> profiles <span class="token punctuation">;</span>
<span class="token comment"># Explain 分析查看索引是否生效：当前情况下没有索引，当然不可能有索引生效</span>
<span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> emp<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">and</span> emp<span class="token punctuation">.</span>empno <span class="token operator">&lt;</span> <span class="token number">101000</span> <span class="token keyword">order</span> <span class="token keyword">BY</span> emp<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token punctuation">;</span>

<span class="token comment"># ★★★测试场景 02：创建一个索引覆盖 SQL 语句中用到的所有字段</span>
<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_age_empno_name <span class="token keyword">ON</span> emp <span class="token punctuation">(</span>age<span class="token punctuation">,</span>empno<span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># 执行 SQL 语句，配合 show profiles 查看消耗时间</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> emp<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">and</span> emp<span class="token punctuation">.</span>empno <span class="token operator">&lt;</span> <span class="token number">101000</span> <span class="token keyword">order</span> <span class="token keyword">BY</span> emp<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token punctuation">;</span>
<span class="token comment"># 执行耗时：0.00146125</span>
<span class="token keyword">show</span> profiles <span class="token punctuation">;</span>
<span class="token comment"># Explain 分析查看索引是否生效：索引生效</span>
<span class="token comment"># key_len 值：9=5+4 说明索引生效的字段是 emp.age 和 emp.empno</span>
<span class="token comment"># 总结：最后的name索引没有用到，出现了Using filesort。</span>
<span class="token comment"># 原因是，因为empno是一个范围过滤，所以索引后面的字段不会再使用索引了。</span>
<span class="token comment"># 所以当前方案没有达到最佳的理想状态。</span>
<span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> emp<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">and</span> emp<span class="token punctuation">.</span>empno <span class="token operator">&lt;</span> <span class="token number">101000</span> <span class="token keyword">order</span> <span class="token keyword">BY</span> emp<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token punctuation">;</span>

<span class="token comment"># ★★★测试场景 03：想办法去掉 Using filesort</span>
<span class="token comment"># 要想去掉 Using filesort，那么就必须保证排序时能够用上索引</span>
<span class="token comment"># 为此思路就是：在过滤条件中，不给 empno 创建索引；然后创建索引时把排序中用到的 name 字段包含进去</span>
<span class="token comment"># 操作 01：删除上一步创建的索引</span>
<span class="token keyword">drop</span> <span class="token keyword">index</span> idx_age_empno_name <span class="token keyword">on</span> emp<span class="token punctuation">;</span>

<span class="token comment"># 操作 02：创建索引包含 age 和 name 两个字段</span>
<span class="token keyword">create</span> <span class="token keyword">index</span> idx_age_name <span class="token keyword">on</span> emp<span class="token punctuation">(</span>age<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># 执行 SQL 语句，配合 show profiles 查看消耗时间</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> emp<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">and</span> emp<span class="token punctuation">.</span>empno <span class="token operator">&lt;</span> <span class="token number">101000</span> <span class="token keyword">order</span> <span class="token keyword">BY</span> emp<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token punctuation">;</span>
<span class="token comment"># 执行耗时：0.29925475</span>
<span class="token keyword">show</span> profiles <span class="token punctuation">;</span>
<span class="token comment"># Explain 分析查看索引是否生效：索引生效了，排序也用到了索引</span>
<span class="token comment"># key_len 值：5 说明只有 age 字段</span>
<span class="token comment"># 总结 01：排序使用的字段不进入 key_len 计算</span>
<span class="token comment"># 总结 02：排序用到了索引，但是性能反而大幅度下降</span>
<span class="token comment"># 总结 03：排序之前的过滤条件 emp.empno &lt; 101000 没有用到索引，花费了大量时间</span>
<span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> emp<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">and</span> emp<span class="token punctuation">.</span>empno <span class="token operator">&lt;</span> <span class="token number">101000</span> <span class="token keyword">order</span> <span class="token keyword">BY</span> emp<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token punctuation">;</span>

<span class="token comment"># ★★★测试场景 04：让过滤条件使用索引，排序不使用索引</span>
<span class="token comment"># 操作 01：删除上一步创建的索引</span>
<span class="token keyword">drop</span> <span class="token keyword">index</span> idx_age_name <span class="token keyword">on</span> emp<span class="token punctuation">;</span>

<span class="token comment"># 操作 02：创建索引包含 age 和 empno 两个字段</span>
<span class="token keyword">create</span> <span class="token keyword">index</span> idx_age_empno <span class="token keyword">on</span> emp<span class="token punctuation">(</span>age<span class="token punctuation">,</span> empno<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># 执行 SQL 语句，配合 show profiles 查看消耗时间</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> emp<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">and</span> emp<span class="token punctuation">.</span>empno <span class="token operator">&lt;</span> <span class="token number">101000</span> <span class="token keyword">order</span> <span class="token keyword">BY</span> emp<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token punctuation">;</span>
<span class="token comment"># 执行耗时：0.00151575</span>
<span class="token keyword">show</span> profiles <span class="token punctuation">;</span>
<span class="token comment"># Explain 分析查看索引是否生效：过滤条件用到了索引，排序没有用到索引</span>
<span class="token comment"># key_len 值：9=5+4 说明索引生效的字段是 emp.age 和 emp.empno</span>
<span class="token comment"># 总结：所有的排序都是在条件过滤之后才执行的，所以，如果条件过滤掉大部分数据的话，剩下几百几千条数据进行排序其实并不是很消耗性能，</span>
<span class="token comment"># 即使索引优化了排序，但实际提升性能很有限。  相对的**empno &lt; 101000** 这个条件，如果没有用到索引的话，要对几万条的数据进行扫描，这是非</span>
<span class="token comment"># 常消耗性能的，所以索引放在这个字段上性价比最高，是最优选择。</span>
<span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> emp<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">and</span> emp<span class="token punctuation">.</span>empno <span class="token operator">&lt;</span> <span class="token number">101000</span> <span class="token keyword">order</span> <span class="token keyword">BY</span> emp<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token punctuation">;</span>

<span class="token comment"># 综合对比</span>
<span class="token comment"># 未创建索引：           0.16191375</span>
<span class="token comment"># 过滤条件用到了索引：     0.00146125</span>
<span class="token comment"># 过滤条件未充分使用索引：  0.29925475</span>
<span class="token comment"># 过滤条件用到了索引：     0.00151575</span>

<span class="token comment"># ★★★结论：当【范围条件】和【group by 或者 order by】的字段出现二选一时，优先观察条件字段的过滤数量，如果过滤的数据足够多，而需要排序的数据并不多时，优先把索引放在范围字段上。也可以将选择权交给MySQL：索引同时存在，MySQL自动选择最优的方案：（对于这个例子，MySQL选择idx_age_empno），但是，随着数据量的变化，选择的索引也会随之变化。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="_3、双路排序和单路排序" tabindex="-1"><a class="header-anchor" href="#_3、双路排序和单路排序" aria-hidden="true">#</a> 3、双路排序和单路排序</h2><p>如果排序没有使用索引，引起了filesort，那么filesort有两种算法</p><ul><li>双路排序</li><li>单路排序</li></ul><h3 id="_1双路排序" tabindex="-1"><a class="header-anchor" href="#_1双路排序" aria-hidden="true">#</a> ①双路排序</h3><p><img src="`+g+'" alt="image-20211121185234856"></p><p>原理：第一遍扫描出需要排序的字段，然后进行排序后，根据排序结果，第二遍再扫描一下需要select的列数据。这样会引起大量的随机IO，效率不高，但是节约内存。排序算法用的是快速排序，如果内存不够则会按照block进行排序，将排序结果写入磁盘文件，然后再将结果合并。</p><p>具体过程：<br></p><ul><li>①读取所有满足条件的记录。</li><li>②对于每一行，存储一对值到缓冲区（排序列，行记录指针），一个是排序的索引列的值，即order by用到的列值，和指向该行数据的行指针。</li><li>③当缓冲区满后，运行一个快速排序来将缓冲区中数据排序，并将排序完的数据存储到一个临时文件，并保存一个存储块的指针，当然如果缓冲区不满，则不会创建临时文件了。</li><li>④重复以上步骤，直到将所有行读完，并建立相应的有序的临时文件。</li><li>⑤对块级进行排序，这个类似于归并排序算法，只通过两个临时文件的指针来不断交换数据，最终达到两个文件，都是有序的。</li><li>⑥重复5直到所有的数据都排序完毕。</li><li>⑦采取顺序读的方式，将每行数据读入内存，并取出数据传到客户端，这里读取数据时并不是一行一行读，读取缓存大小由read_rnd_buffer_size 来指定。</li></ul><br>',124),T=s("br",null,null,-1),S=s("br",null,null,-1),A=s("br",null,null,-1),f=a('<br><h3 id="_2单路排序" tabindex="-1"><a class="header-anchor" href="#_2单路排序" aria-hidden="true">#</a> ②单路排序</h3><p>在MySQL4.1版本之前只有第一种排序算法双路排序，第二种算法是从MySQL4.1开始的改进算法，主要目的是为了减少第一次算法中需要两次访问表数据的IO操作，将两次变成了一次，但相应也会耗用更多的sort buffer空间。当然，MySQL4.1开始的以后所有版本同时也支持第一种算法。</p><p><img src="'+_+`" alt="image-20211121190241237"></p><p>具体过程：</p><ul><li>读取满足条件的记录</li><li>对于每一行，记录排序的key和数据行指针，并且把要查询的列也读出来</li><li>根据索引key排序</li><li>读取排序完成的文件，并直接根据数据位置读取数据返回客户端，而不是去访问表</li></ul><p>特点：</p><ul><li>单路排序一次性将结果读取出来，然后在sort buffer中排序，避免了双路排序的两次读的随机IO。</li><li>这也有一个问题：当 select 获取的列很多的时候，排序起来就很占空间</li></ul><br><h3 id="_3结论及引申出的问题" tabindex="-1"><a class="header-anchor" href="#_3结论及引申出的问题" aria-hidden="true">#</a> ③结论及引申出的问题</h3><ul><li>单路比多路要多占用更多内存空间</li><li>因为单路是把所有字段都取出，所以有可能取出的数据的总大小超出了sort_buffer_size的容量，导致每次只能取sort_buffer_size容量大小的数据，进行排序（创建tmp文件，多路合并），排完再取sort_buffer容量大小，再排……从而多次I/O。</li><li>单路本来想省一次I/O操作，反而导致了大量的I/O操作，反而得不偿失。</li></ul><br><h3 id="_4排序优化策略" tabindex="-1"><a class="header-anchor" href="#_4排序优化策略" aria-hidden="true">#</a> ④排序优化策略</h3><p>优化策略：</p><ul><li>减少select 后面的查询的字段：order by时select * 是一个大忌，至少要把业务需要的字段明确写出来，不需要的一个都不写。</li><li>查询字段过多会占用sort_buffer_size的容量。可以考虑增大sort_buffer_size参数的设置：当然，要根据系统的能力去提高，因为这个参数是针对每个进程（connection）的 1M-8M之间调整。 MySQL8.0，InnoDB存储引擎默认值是1048576字节，1MB。</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">&#39;%sort_buffer_size%&#39;</span><span class="token punctuation">;</span> <span class="token comment">-- 默认1MB</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看结果如下所示：</p><p><img src="`+O+`" alt="image-20230620142048732"></p><br><ul><li>增大<strong>max_length_for_sort_data</strong>参数的设置：MySQL根据max_length_for_sort_data变量来确定使用哪种算法，默认值是4096字节，如果需要返回的列的总长度<strong>大于max_length_for_sort_data，使用双路排序算法</strong>，否则使用单路排序算法。但是如果设的太高，数据总容量超出sort_buffer_size的概率就增大，明显症状是高的磁盘I/O活动和低的处理器使用率。1024-8192之间调整。</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">&#39;%max_length_for_sort_data%&#39;</span><span class="token punctuation">;</span> <span class="token comment">-- 默认4K</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看结果如下所示：</p><p><img src="`+R+`" alt="image-20230620142257007"></p><p><strong>举例：</strong></p><ul><li>1、如果数据总量很小（单路一次就可以读取所有数据），单条记录大小很大（大于4K，默认会使用双路排序），此时，可以增加 max_length_for_sort_data 的值，增加 sort_buffer_size 的值，让服务器默认使用单路排序。</li><li>2、如果数据总量很大（单路很多次IO才可以），单条记录大小很小（小于4K，默认会使用单路排序），此时，可以减小 max_length_for_sort_data 的值，让服务器默认使用双路排序。</li></ul><br><h2 id="_4、排序优化总结" tabindex="-1"><a class="header-anchor" href="#_4、排序优化总结" aria-hidden="true">#</a> 4、排序优化总结</h2><ul><li>最好的情况：排序能够用到索引 <ul><li>包含过滤条件</li><li>过滤条件要保证索引生效</li><li>排序字段都出现在索引中</li><li>排序字段出现顺序和索引中一致</li><li>排序字段排序的方向一致</li></ul></li><li>其次的情况：单路排序，只有一次I/O <ul><li>max_length_for_sort_data参数设置的值能够容纳当前要读取的所有字段（排序字段+select字段）</li><li>sort_buffer_size参数设置的值能够容纳所有读取的数据</li></ul></li><li>再次的情况：双路排序，两次I/O</li><li>最差的情况：单路排序，多次I/O</li></ul><br><h1 id="三、mysql分组优化" tabindex="-1"><a class="header-anchor" href="#三、mysql分组优化" aria-hidden="true">#</a> 三、MySQL分组优化</h1><ul><li>1、group by 使用索引的原则几乎跟order by一致。但是<strong>group by 即使没有过滤条件用到索引，也可以直接使用索引</strong>（Order By 必须有过滤条件才能使用上索引）</li><li>2、包含了order by、group by、distinct这些查询的语句，where条件过滤出来的结果集请保持在1000行以内，否则SQL会很慢。</li><li>3、group by和数据过滤：能在分组前过滤数据，就尽量分组前过滤，这样可以让分组操作面对的数据量更小 <ul><li>where 子句过滤数据</li><li>having 子句过滤数据</li></ul></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 底层执行 SQL 语句时，和编写 SQL 语句的顺序一样，先执行 where 子句的过滤条件</span>
<span class="token comment"># 在 where 子句过滤结果的基础上执行分组操作</span>
<span class="token comment"># 分组之后再执行 having 子句的过滤条件</span>
<span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> avg_age<span class="token punctuation">,</span> deptId <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno<span class="token operator">&gt;</span><span class="token number">100000</span> <span class="token keyword">group</span> <span class="token keyword">by</span> deptId <span class="token keyword">having</span> avg_age<span class="token operator">&gt;</span><span class="token number">40</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h1 id="四、覆盖索引优化" tabindex="-1"><a class="header-anchor" href="#四、覆盖索引优化" aria-hidden="true">#</a> 四、覆盖索引优化</h1><p>创建索引时，让索引中包含的字段，尽量和select子句要查询的字段匹配，如果能够不回表，那就又节约一定的时间</p><ul><li>1、禁止使用select *，禁止查询与业务无关字段 <ul><li>select * 危害1：有可能导致单路排序多次I/O</li><li>select * 危害2：有可能导致本来不需要回表的操作，现在需要回表</li><li>select * 危害3：SQL 语句可读性降低，从 SQL 语句本身看不出来要查询哪些字段</li></ul></li><li>2、尽量利用覆盖索引</li></ul>`,36);function x(U,F){return e(),t("div",null,[L,n(" 总结："),T,n(" 双路排序采取的方法是快速排序 + 归并排序。"),S,n(" 但有一个问题，就是，一行数据会被读两次，第一次是where条件过滤时，第二个是排完序后还得用行指针去读一次。"),A,n(" 一个优化的方法是，直接读入数据，排序的时候也根据这个排序，排序完成后，就直接发送到客户端了——这就是下面要说的单路排序。"),f])}const D=p(I,[["render",x],["__file","MySQL07-优化-专题.html.vue"]]);export{D as default};
